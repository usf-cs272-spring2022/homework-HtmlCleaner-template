










Skip navigation links
Java SE 17 & JDK 17 

Overview
Module
Package
Class
Use
Tree
Preview
New
Deprecated
Index
Help



SEARCH:










All Classes and Interfaces


All Classes and InterfacesInterfacesClassesEnum ClassesRecord ClassesExceptionsErrorsAnnotation Interfaces


Class
Description
AboutEvent

Event sent when the application is asked to open its about window.

AboutHandler

An implementer receives notification when the app is asked to show its about
 dialog.

AbsentInformationException

Thrown to indicate line number or variable information is not available.

AbstractAction

This class provides default implementations for the JFC Action
 interface.

AbstractAnnotationValueVisitor14<R,P>

A skeletal visitor for annotation values with default behavior
 appropriate for source version RELEASE_14.

AbstractAnnotationValueVisitor6<R,P>

A skeletal visitor for annotation values with default behavior
 appropriate for the RELEASE_6
 source version.

AbstractAnnotationValueVisitor7<R,P>

A skeletal visitor for annotation values with default behavior
 appropriate for the RELEASE_7
 source version.

AbstractAnnotationValueVisitor8<R,P>

A skeletal visitor for annotation values with default behavior
 appropriate for the RELEASE_8
 source version.

AbstractAnnotationValueVisitor9<R,P>

A skeletal visitor for annotation values with default behavior
 appropriate for source versions RELEASE_9 through RELEASE_14.

AbstractBorder

A class that implements an empty border with no size.

AbstractButton

Defines common behaviors for buttons and menu items.

AbstractCellEditor

A base class for CellEditors, providing default
 implementations for the methods in the CellEditor
 interface except getCellEditorValue().

AbstractChronology

An abstract implementation of a calendar system, used to organize and identify dates.

AbstractCollection<E>

This class provides a skeletal implementation of the Collection
 interface, to minimize the effort required to implement this interface.

AbstractColorChooserPanel

This is the abstract superclass for color choosers.

AbstractDocument

An implementation of the document interface to serve as a
 basis for implementing various kinds of documents.

AbstractDocument.AttributeContext

An interface that can be used to allow MutableAttributeSet
 implementations to use pluggable attribute compression
 techniques.

AbstractDocument.Content

Interface to describe a sequence of character content that
 can be edited.

AbstractDocument.ElementEdit

An implementation of ElementChange that can be added to the document
 event.

AbstractElementVisitor14<R,P>

A skeletal visitor of program elements with default behavior
 appropriate for the RELEASE_14
 source version.

AbstractElementVisitor6<R,P>

A skeletal visitor of program elements with default behavior
 appropriate for the RELEASE_6
 source version.

AbstractElementVisitor7<R,P>

A skeletal visitor of program elements with default behavior
 appropriate for the RELEASE_7
 source version.

AbstractElementVisitor8<R,P>

A skeletal visitor of program elements with default behavior
 appropriate for the RELEASE_8
 source version.

AbstractElementVisitor9<R,P>

A skeletal visitor of program elements with default behavior
 appropriate for source versions RELEASE_9 through RELEASE_14.

AbstractExecutorService

Provides default implementations of ExecutorService
 execution methods.

AbstractInterruptibleChannel

Base implementation class for interruptible channels.

AbstractLayoutCache

Warning:
 Serialized objects of this class will not be compatible with
 future Swing releases.

AbstractLayoutCache.NodeDimensions

Used by AbstractLayoutCache to determine the size
 and x origin of a particular node.

AbstractList<E>

This class provides a skeletal implementation of the List
 interface to minimize the effort required to implement this interface
 backed by a "random access" data store (such as an array).

AbstractListModel<E>

The abstract definition for the data model that provides
 a List with its contents.

AbstractMap<K,V>

This class provides a skeletal implementation of the Map
 interface, to minimize the effort required to implement this interface.

AbstractMap.SimpleEntry<K,V>

An Entry maintaining a key and a value.

AbstractMap.SimpleImmutableEntry<K,V>

An unmodifiable Entry maintaining a key and a value.

AbstractMethodError

Thrown when an application tries to call an abstract method.

AbstractMultiResolutionImage

This class provides default implementations of several Image methods
 for classes that want to implement the MultiResolutionImage
 interface.

AbstractNotificationHandler<T>

A skeletal handler that consumes notifications and continues.

AbstractOwnableSynchronizer

A synchronizer that may be exclusively owned by a thread.

AbstractPreferences

This class provides a skeletal implementation of the Preferences
 class, greatly easing the task of implementing it.

AbstractProcessor

An abstract annotation processor designed to be a convenient
 superclass for most concrete annotation processors.

AbstractQueue<E>

This class provides skeletal implementations of some Queue
 operations.

AbstractQueuedLongSynchronizer

A version of AbstractQueuedSynchronizer in
 which synchronization state is maintained as a long.

AbstractQueuedSynchronizer

Provides a framework for implementing blocking locks and related
 synchronizers (semaphores, events, etc) that rely on
 first-in-first-out (FIFO) wait queues.

AbstractRegionPainter

Convenient base class for defining Painter instances for rendering a
 region or component in Nimbus.

AbstractRegionPainter.PaintContext

A class encapsulating state useful when painting.

AbstractRegionPainter.PaintContext.CacheMode

Cache mode.

AbstractRelinkableCallSite

A basic implementation of the RelinkableCallSite as a
 MutableCallSite.

AbstractResourceBundleProvider

AbstractResourceBundleProvider is an abstract class that provides
 the basic support for a provider implementation class for
 ResourceBundleProvider.

AbstractScriptEngine

Provides a standard implementation for several of the variants of the eval
 method.

AbstractSelectableChannel

Base implementation class for selectable channels.

AbstractSelectionKey

Base implementation class for selection keys.

AbstractSelector

Base implementation class for selectors.

AbstractSequentialList<E>

This class provides a skeletal implementation of the List
 interface to minimize the effort required to implement this interface
 backed by a "sequential access" data store (such as a linked list).

AbstractSet<E>

This class provides a skeletal implementation of the Set
 interface to minimize the effort required to implement this
 interface.

AbstractSpinnerModel

This class provides the ChangeListener part of the
 SpinnerModel interface that should be suitable for most concrete SpinnerModel
 implementations.

AbstractTableModel

This abstract class provides default implementations for most of
  the methods in the TableModel interface.

AbstractTypeVisitor14<R,P>

A skeletal visitor of types with default behavior appropriate for the
 RELEASE_14 source version.

AbstractTypeVisitor6<R,P>

A skeletal visitor of types with default behavior appropriate for
 the RELEASE_6
 source version.

AbstractTypeVisitor7<R,P>

A skeletal visitor of types with default behavior appropriate for
 the RELEASE_7
 source version.

AbstractTypeVisitor8<R,P>

A skeletal visitor of types with default behavior appropriate for
 the RELEASE_8
 source version.

AbstractTypeVisitor9<R,P>

A skeletal visitor of types with default behavior appropriate for
 source versions RELEASE_9 through
 RELEASE_14.

AbstractUndoableEdit

An abstract implementation of UndoableEdit,
 implementing simple responses to all boolean methods in
 that interface.

AbstractView

A base interface that all views shall derive from.

AbstractWriter

AbstractWriter is an abstract class that actually
 does the work of writing out the element tree
 including the attributes.

AcceptPendingException

Unchecked exception thrown when an attempt is made to initiate an accept
 operation on a channel and a previous accept operation has not completed.

AccessControlContext
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

AccessControlException
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

AccessController
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

AccessDeniedException

Checked exception thrown when a file system operation is denied, typically
 due to a file permission or other access check.

AccessException

An AccessException is thrown by certain methods of the
 java.rmi.Naming class (specifically bind,
 rebind, and unbind) to
 indicate that the caller does not have permission to perform the action
 requested by the method call.

AccessibilityEventMonitor

AccessibilityEventMonitor implements a PropertyChange listener
 on every UI object that implements interface Accessible in the Java
 Virtual Machine.

AccessibilityListenerList

The AccessibilityListenerList is a copy of the Swing
 EventListerList class.

AccessibilityProvider

Service Provider Interface (SPI) for Assistive Technology.

Accessible

Provides information on the accessibility of a type or type component.

Accessible

Interface Accessible is the main interface for the accessibility
 package.

AccessibleAction

The AccessibleAction interface should be supported by any object that
 can perform one or more actions.

AccessibleAttributeSequence

This class collects together the span of text that share the same contiguous
 set of attributes, along with that set of attributes.

AccessibleBundle

Base class used to maintain a strongly typed enumeration.

AccessibleComponent

The AccessibleComponent interface should be supported by any object
 that is rendered on the screen.

AccessibleContext

AccessibleContext represents the minimum information all accessible
 objects return.

AccessibleEditableText

The AccessibleEditableText interface should be implemented by all
 classes that present editable textual information on the display.

AccessibleExtendedComponent

The AccessibleExtendedComponent interface should be supported by any
 object that is rendered on the screen.

AccessibleExtendedTable

Class AccessibleExtendedTable provides extended information about a
 user-interface component that presents data in a two-dimensional table
 format.

AccessibleExtendedText

The AccessibleExtendedText interface contains additional methods not
 provided by the AccessibleText interface.

AccessibleHyperlink

Encapsulation of a link, or set of links (e.g. client side imagemap) in a
 Hypertext document

AccessibleHypertext

The AccessibleHypertext class is the base class for all classes that
 present hypertext information on the display.

AccessibleIcon

The AccessibleIcon interface should be supported by any object that
 has an associated icon (e.g., buttons).

AccessibleKeyBinding

The AccessibleKeyBinding interface should be supported by any object
 that has a keyboard bindings such as a keyboard mnemonic and/or keyboard
 shortcut which can be used to select the object.

AccessibleObject

The AccessibleObject class is the base class for Field,
 Method, and Constructor objects (known as reflected
 objects).

AccessibleRelation

Class AccessibleRelation describes a relation between the object that
 implements the AccessibleRelation and one or more other objects.

AccessibleRelationSet

Class AccessibleRelationSet determines a component's relation set.

AccessibleResourceBundle
Deprecated.
This class is deprecated as of version 1.3 of the Java Platform

AccessibleRole

Class AccessibleRole determines the role of a component.

AccessibleSelection

This AccessibleSelection interface provides the standard mechanism
 for an assistive technology to determine what the current selected children
 are, as well as modify the selection set.

AccessibleState

Class AccessibleState describes a component's particular state.

AccessibleStateSet

Class AccessibleStateSet determines a component's state set.

AccessibleStreamable

The AccessibleStreamable interface should be implemented by the
 AccessibleContext of any component that presents the raw stream
 behind a component on the display screen.

AccessibleTable

Class AccessibleTable describes a user-interface component that
 presents data in a two-dimensional table format.

AccessibleTableModelChange

The AccessibleTableModelChange interface describes a change to the
 table model.

AccessibleText

The AccessibleText interface should be implemented by all classes
 that present textual information on the display.

AccessibleTextSequence

This class collects together key details of a span of text.

AccessibleValue

The AccessibleValue interface should be supported by any object that
 supports a numerical value (e.g., a scroll bar).

AccessMode

Defines access modes used to test the accessibility of a file.

AccessWatchpointEvent

Notification of a field access in the target VM.

AccessWatchpointRequest

Request for notification when the contents of a field are accessed
 in the target VM.

AccountException

A generic account exception.

AccountExpiredException

Signals that a user account has expired.

AccountLockedException

Signals that an account was locked.

AccountNotFoundException

Signals that an account was not found.

AclEntry

An entry in an access control list (ACL).

AclEntry.Builder

A builder of AclEntry objects.

AclEntryFlag

Defines the flags for used by the flags component of an ACL entry.

AclEntryPermission

Defines the permissions for use with the permissions component of an ACL
 entry.

AclEntryType

A typesafe enumeration of the access control entry types.

AclFileAttributeView

A file attribute view that supports reading or updating a file's Access
 Control Lists (ACL) or file owner attributes.

Action

The Action interface provides a useful extension to the
 ActionListener
 interface in cases where the same functionality may be accessed by
 several controls.

ActionEvent

A semantic event which indicates that a component-defined action occurred.

ActionListener

The listener interface for receiving action events.

ActionMap

ActionMap provides mappings from
 Objects
 (called keys or Action names)
 to Actions.

ActionMapUIResource

A subclass of javax.swing.ActionMap that implements UIResource.

ActiveEvent

An interface for events that know how to dispatch themselves.

Addressable

Represents a type which is addressable.

Adjustable

The interface for objects which have an adjustable numeric value
 contained within a bounded range of values.

AdjustmentEvent

The adjustment event emitted by Adjustable objects like
 Scrollbar and ScrollPane.

AdjustmentListener

The listener interface for receiving adjustment events.

Adler32

A class that can be used to compute the Adler-32 checksum of a data
 stream.

AEADBadTagException

This exception is thrown when a Cipher operating in
 an AEAD mode (such as GCM/CCM) is unable to verify the supplied
 authentication tag.

AffineTransform

The AffineTransform class represents a 2D affine transform
 that performs a linear mapping from 2D coordinates to other 2D
 coordinates that preserves the "straightness" and
 "parallelness" of lines.

AffineTransformOp

This class uses an affine transform to perform a linear mapping from
 2D coordinates in the source image or Raster to 2D coordinates
 in the destination image or Raster.

AgentInitializationException

The exception thrown when an agent fails to initialize in the target
 Java virtual machine.

AgentLoadException

The exception thrown when an agent cannot be loaded into the target
 Java virtual machine.

AlgorithmConstraints

This interface specifies constraints for cryptographic algorithms,
 keys (key sizes), and other algorithm parameters.

AlgorithmMethod

An abstract representation of an algorithm defined in the XML Security
 specifications.

AlgorithmParameterGenerator

The AlgorithmParameterGenerator class is used to generate a
 set of
 parameters to be used with a certain algorithm.

AlgorithmParameterGeneratorSpi

This class defines the Service Provider Interface (SPI)
 for the AlgorithmParameterGenerator class, which
 is used to generate a set of parameters to be used with a certain algorithm.

AlgorithmParameters

This class is used as an opaque representation of cryptographic parameters.

AlgorithmParameterSpec

A (transparent) specification of cryptographic parameters.

AlgorithmParametersSpi

This class defines the Service Provider Interface (SPI)
 for the AlgorithmParameters class, which is used to manage
 algorithm parameters.

AllPermission

The AllPermission is a permission that implies all other permissions.

AlphaComposite

The AlphaComposite class implements basic alpha
 compositing rules for combining source and destination colors
 to achieve blending and transparency effects with graphics and
 images.

AlreadyBoundException

Unchecked exception thrown when an attempt is made to bind the socket a
 network oriented channel that is already bound.

AlreadyBoundException

An AlreadyBoundException is thrown if an attempt
 is made to bind an object to a name that already
 has an associated binding in the registry.

AlreadyConnectedException

Unchecked exception thrown when an attempt is made to connect a SocketChannel that is already connected.

AncestorEvent

An event reported to a child component that originated from an
 ancestor in the component hierarchy.

AncestorListener

AncestorListener

 Interface to support notification when changes occur to a JComponent or one
 of its ancestors.

AnnotatedArrayType

AnnotatedArrayType represents the potentially annotated use of an
 array type, whose component type may itself represent the annotated use of a
 type.

AnnotatedConstruct

Represents a construct that can be annotated.

AnnotatedElement

Represents an annotated construct of the program currently running
 in this VM.

AnnotatedParameterizedType

AnnotatedParameterizedType represents the potentially annotated use
 of a parameterized type, whose type arguments may themselves represent
 annotated uses of types.

AnnotatedType

AnnotatedType represents the potentially annotated use of a type in
 the program currently running in this VM.

AnnotatedTypeTree

A tree node for an annotated type.

AnnotatedTypeVariable

AnnotatedTypeVariable represents the potentially annotated use of a
 type variable, whose declaration may have bounds which themselves represent
 annotated uses of types.

AnnotatedWildcardType

AnnotatedWildcardType represents the potentially annotated use of a
 wildcard type argument, whose upper or lower bounds may themselves represent
 annotated uses of types.

Annotation

The common interface extended by all annotation interfaces.

Annotation

An Annotation object is used as a wrapper for a text attribute value if
 the attribute has annotation characteristics.

AnnotationElement

Describes event metadata, such as labels, descriptions and units.

AnnotationFormatError

Thrown when the annotation parser attempts to read an annotation
 from a class file and determines that the annotation is malformed.

AnnotationMirror

Represents an annotation.

AnnotationTree

A tree node for an annotation.

AnnotationTypeMismatchException

Thrown to indicate that a program has attempted to access an element of
 an annotation whose type has changed after the annotation was compiled
 (or serialized).

AnnotationValue

Represents a value of an annotation interface element.

AnnotationValueVisitor<R,P>

A visitor of the values of annotation interface elements, using a
 variant of the visitor design pattern.

AppConfigurationEntry

This class represents a single LoginModule entry
 configured for the application specified in the
 getAppConfigurationEntry(String appName)
 method in the Configuration class.

AppConfigurationEntry.LoginModuleControlFlag

This class represents whether or not a LoginModule
 is REQUIRED, REQUISITE, SUFFICIENT or OPTIONAL.

Appendable

An object to which char sequences and values can be appended.

AppEvent

AppEvents are sent to listeners and handlers installed on the
 Desktop instance of the current desktop context.

AppForegroundEvent

Event sent when the application has become the foreground app, and when it is
 no longer the foreground app.

AppForegroundListener

Implementors are notified when the app becomes the foreground app and when it
 is no longer the foreground app.

AppHiddenEvent

Event sent when the application has been hidden or shown.

AppHiddenListener

Implementors are notified when the app is hidden or shown by the user.

Applet
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.

AppletContext
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.

AppletInitializer
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated.

AppletStub
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.

AppReopenedEvent

Event sent when the application is asked to re-open itself.

AppReopenedListener

Implementors receive notification when the app has been asked to open again.

Arc2D

Arc2D is the abstract superclass for all objects that
 store a 2D arc defined by a framing rectangle,
 start angle, angular extent (length of the arc), and a closure type
 (OPEN, CHORD, or PIE).

Arc2D.Double

This class defines an arc specified in double precision.

Arc2D.Float

This class defines an arc specified in float precision.

Area

An Area object stores and manipulates a
 resolution-independent description of an enclosed area of
 2-dimensional space.

AreaAveragingScaleFilter

An ImageFilter class for scaling images using a simple area averaging
 algorithm that produces smoother results than the nearest neighbor
 algorithm.

ArithmeticException

Thrown when an exceptional arithmetic condition has occurred.

Array

The Array class provides static methods to dynamically create and
 access Java arrays.

Array

The mapping in the Java programming language for the SQL type
 ARRAY.

ArrayAccessTree

A tree node for an array access expression.

ArrayBlockingQueue<E>

A bounded blocking queue backed by an
 array.

ArrayDeque<E>

Resizable-array implementation of the Deque interface.

ArrayIndexOutOfBoundsException

Thrown to indicate that an array has been accessed with an illegal index.

ArrayList<E>

Resizable-array implementation of the List interface.

ArrayReference

Provides access to an array object and its components in the target VM.

Arrays

This class contains various methods for manipulating arrays (such as
 sorting and searching).

ArrayStoreException

Thrown to indicate that an attempt has been made to store the
 wrong type of object into an array of objects.

ArrayType

Provides access to the class of an array and the type of
 its components in the target VM.

ArrayType

Represents an array type.

ArrayType<T>

The ArrayType class is the open type class whose instances describe
 all open data values which are n-dimensional arrays of open data values.

ArrayTypeTree

A tree node for an array type.

AssertionError

Thrown to indicate that an assertion has failed.

AssertTree

A tree node for an assert statement.

AssignmentTree

A tree node for an assignment expression.

Association

A class that represents an SCTP association.

AssociationChangeNotification

Notification emitted when an association has either opened or closed.

AssociationChangeNotification.AssocChangeEvent

Defines the type of change event that happened to the association.

AsyncBoxView

A box that does layout asynchronously.

AsynchronousByteChannel

An asynchronous channel that can read and write bytes.

AsynchronousChannel

A channel that supports asynchronous I/O operations.

AsynchronousChannelGroup

A grouping of asynchronous channels for the purpose of resource sharing.

AsynchronousChannelProvider

Service-provider class for asynchronous channels.

AsynchronousCloseException

Checked exception received by a thread when another thread closes the
 channel or the part of the channel upon which it is blocked in an I/O
 operation.

AsynchronousFileChannel

An asynchronous channel for reading, writing, and manipulating a file.

AsynchronousServerSocketChannel

An asynchronous channel for stream-oriented listening sockets.

AsynchronousSocketChannel

An asynchronous channel for stream-oriented connecting sockets.

AtomicBoolean

A boolean value that may be updated atomically.

AtomicInteger

An int value that may be updated atomically.

AtomicIntegerArray

An int array in which elements may be updated atomically.

AtomicIntegerFieldUpdater<T>

A reflection-based utility that enables atomic updates to
 designated volatile int fields of designated classes.

AtomicLong

A long value that may be updated atomically.

AtomicLongArray

A long array in which elements may be updated atomically.

AtomicLongFieldUpdater<T>

A reflection-based utility that enables atomic updates to
 designated volatile long fields of designated classes.

AtomicMarkableReference<V>

An AtomicMarkableReference maintains an object reference
 along with a mark bit, that can be updated atomically.

AtomicMoveNotSupportedException

Checked exception thrown when a file cannot be moved as an atomic file system
 operation.

AtomicReference<V>

An object reference that may be updated atomically.

AtomicReferenceArray<E>

An array of object references in which elements may be updated
 atomically.

AtomicReferenceFieldUpdater<T,V>

A reflection-based utility that enables atomic updates to
 designated volatile reference fields of designated
 classes.

AtomicStampedReference<V>

An AtomicStampedReference maintains an object reference
 along with an integer "stamp", that can be updated atomically.

ATR

A Smart Card's answer-to-reset bytes.

AttachingConnector

A connector which attaches to a previously running target VM.

AttachNotSupportedException

Thrown by VirtualMachine.attach when attempting to attach to a Java virtual machine
 for which a compatible AttachProvider does not exist.

AttachOperationFailedException

Exception type to signal that an attach operation failed in the target VM.

AttachPermission

When a SecurityManager set, this
 is the permission which will be checked when code invokes VirtualMachine.attach to attach to a target virtual
 machine.

AttachProvider

Attach provider class for attaching to a Java virtual machine.

Attr

The Attr interface represents an attribute in an
 Element object.

Attribute

Represents an MBean attribute by associating its name with its value.

Attribute

This interface represents an attribute associated with a named object.

Attribute

Interface Attribute is the base interface implemented by any and
 every printing attribute class to indicate that the class represents a
 printing attribute.

Attribute

An interface that contains information about an attribute.

AttributeChangeNotification

Provides definitions of the attribute change notifications sent by MBeans.

AttributeChangeNotificationFilter

This class implements of the NotificationFilter
 interface for the attribute change notification.

AttributedCharacterIterator

An AttributedCharacterIterator allows iteration through both text and
 related attribute information.

AttributedCharacterIterator.Attribute

Defines attribute keys that are used to identify text attributes.

AttributedString

An AttributedString holds text and related attribute information.

AttributeException

Interface AttributeException is a mixin interface which a subclass of
 PrintException can implement to report an error
 condition involving one or more printing attributes that a particular Print
 Service instance does not support.

AttributeInUseException

This exception is thrown when an operation attempts
 to add an attribute that already exists.

AttributeList

Represents a list of values for attributes of an MBean.

AttributeList

This class defines the attributes of an SGML element
 as described in a DTD using the ATTLIST construct.

AttributeList
Deprecated.
This interface has been replaced by the SAX2
             Attributes
             interface, which includes Namespace support.

AttributeListImpl
Deprecated.
This class implements a deprecated interface,
             AttributeList;
             that interface has been replaced by
             Attributes,
             which is implemented in the
             AttributesImpl helper class.

AttributeModificationException

This exception is thrown when an attempt is
 made to add, or remove, or modify an attribute, its identifier,
 or its values that conflicts with the attribute's (schema) definition
 or the attribute's state.

AttributeNotFoundException

The specified attribute does not exist or cannot be retrieved.

Attributes

The Attributes class maps Manifest attribute names to associated string
 values.

Attributes

This interface represents a collection of attributes.

Attributes

Interface for a list of XML attributes.

Attributes.Name

The Attributes.Name class represents an attribute name stored in
 this Map.

Attributes2

SAX2 extension to augment the per-attribute information
 provided through Attributes.

Attributes2Impl

SAX2 extension helper for additional Attributes information,
 implementing the Attributes2 interface.

AttributeSet

Interface AttributeSet specifies the interface for a set of printing
 attributes.

AttributeSet

A collection of unique attributes.

AttributeSet.CharacterAttribute

This interface is the type signature that is expected
 to be present on any attribute key that contributes to
 character level presentation.

AttributeSet.ColorAttribute

This interface is the type signature that is expected
 to be present on any attribute key that contributes to
 presentation of color.

AttributeSet.FontAttribute

This interface is the type signature that is expected
 to be present on any attribute key that contributes to
 the determination of what font to use to render some
 text.

AttributeSet.ParagraphAttribute

This interface is the type signature that is expected
 to be present on any attribute key that contributes to
 the paragraph level presentation.

AttributeSetUtilities

Class AttributeSetUtilities provides static methods for manipulating
 AttributeSets.

AttributesImpl

Default implementation of the Attributes interface.

AttributeTree

A tree node for an attribute in an HTML element.

AttributeTree.ValueKind

The kind of an attribute value.

AttributeValueExp

Represents attributes used as arguments to relational constraints.

AttributeView

An object that provides a read-only or updatable view of non-opaque
 values associated with an object in a filesystem.

AudioClip
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.

AudioFileFormat

An instance of the AudioFileFormat class describes an audio file,
 including the file type, the file's length in bytes, the length in sample
 frames of the audio data contained in the file, and the format of the audio
 data.

AudioFileFormat.Type

An instance of the Type class represents one of the standard
 types of audio file.

AudioFileReader

Provider for audio file reading services.

AudioFileWriter

Provider for audio file writing services.

AudioFormat

AudioFormat is the class that specifies a particular arrangement of
 data in a sound stream.

AudioFormat.Encoding

The Encoding class names the specific type of data representation
 used for an audio stream.

AudioInputStream

An audio input stream is an input stream with a specified audio format and
 length.

AudioPermission

The AudioPermission class represents access rights to the audio
 system resources.

AudioSystem

The AudioSystem class acts as the entry point to the sampled-audio
 system resources.

AuthenticationException

This exception is thrown when an authentication error occurs while
 accessing the naming or directory service.

AuthenticationException

This exception is thrown by a SASL mechanism implementation
 to indicate that the SASL
 exchange has failed due to reasons related to authentication, such as
 an invalid identity, passphrase, or key.

AuthenticationNotSupportedException

This exception is thrown when
 the particular flavor of authentication requested is not supported.

Authenticator

Authenticator represents an implementation of an HTTP authentication
 mechanism.

Authenticator

The class Authenticator represents an object that knows how to obtain
 authentication for a network connection.

Authenticator.Failure

Indicates an authentication failure.

Authenticator.RequestorType

The type of the entity requesting authentication.

Authenticator.Result

Base class for return type from Authenticator.authenticate(HttpExchange) method.

Authenticator.Retry

Indicates an authentication must be retried.

Authenticator.Success

Indicates an authentication has succeeded and the
 authenticated user principal can be acquired by calling
 Authenticator.Success.getPrincipal().

AuthorizationDataEntry

Kerberos 5 AuthorizationData entry.

AuthorizeCallback

This callback is used by SaslServer to determine whether
 one entity (identified by an authenticated authentication id)
 can act on
 behalf of another entity (identified by an authorization id).

AuthorTree

A tree node for an @author block tag.

AuthPermission

This class is for authentication permissions.

AuthProvider

This class defines login and logout methods for a provider.

AutoCloseable

An object that may hold resources (such as file or socket handles)
 until it is closed.

Autoscroll

During DnD operations it is possible that a user may wish to drop the
 subject of the operation on a region of a scrollable GUI control that is
 not currently visible to the user.

AWTError

Thrown when a serious Abstract Window Toolkit error has occurred.

AWTEvent

The root event class for all AWT events.

AWTEventListener

The listener interface for receiving notification of events
 dispatched to objects that are instances of Component or
 MenuComponent or their subclasses.

AWTEventListenerProxy

A class which extends the EventListenerProxy
 specifically for adding an AWTEventListener
 for a specific event mask.

AWTEventMonitor

The AWTEventMonitor implements a suite of listeners that are
 conditionally installed on every AWT component instance in the Java
 Virtual Machine.

AWTEventMulticaster

AWTEventMulticaster implements efficient and thread-safe multi-cast
 event dispatching for the AWT events defined in the java.awt.event
 package.

AWTException

Signals that an Abstract Window Toolkit exception has occurred.

AWTKeyStroke

An AWTKeyStroke represents a key action on the
 keyboard, or equivalent input device.

AWTPermission

This class is for AWT permissions.

BackingStoreException

Thrown to indicate that a preferences operation could not complete because
 of a failure in the backing store, or a failure to contact the backing
 store.

BadAttributeValueExpException

Thrown when an invalid MBean attribute is passed to a query
 constructing method.

BadBinaryOpValueExpException

Thrown when an invalid expression is passed to a method for
 constructing a query.

BadLocationException

This exception is to report bad locations within a document model
 (that is, attempts to reference a location that doesn't exist).

BadPaddingException

This exception is thrown when a particular padding mechanism is
 expected for the input data but the data is not padded properly.

BadStringOperationException

Thrown when an invalid string operation is passed
 to a method for constructing a query.

BandCombineOp

This class performs an arbitrary linear combination of the bands
 in a Raster, using a specified matrix.

BandedSampleModel

This class represents image data which is stored in a band interleaved
  fashion and for
  which each sample of a pixel occupies one data element of the DataBuffer.

Base64

This class consists exclusively of static methods for obtaining
 encoders and decoders for the Base64 encoding scheme.

Base64.Decoder

This class implements a decoder for decoding byte data using the
 Base64 encoding scheme as specified in RFC 4648 and RFC 2045.

Base64.Encoder

This class implements an encoder for encoding byte data using
 the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.

BaselineTIFFTagSet

A class representing the set of tags found in the baseline TIFF
 specification as well as some common additional tags.

BaseMultiResolutionImage

This class is an array-based implementation of
 the AbstractMultiResolutionImage class.

BaseRowSet

An abstract class providing a RowSet object with its basic functionality.

BaseStream<T,S extends BaseStream<T,S>>

Base interface for streams, which are sequences of elements supporting
 sequential and parallel aggregate operations.

BasicArrowButton

JButton object that draws a scaled Arrow in one of the cardinal directions.

BasicAttribute

This class provides a basic implementation of the Attribute interface.

BasicAttributes

This class provides a basic implementation
 of the Attributes interface.

BasicAuthenticator

BasicAuthenticator provides an implementation of HTTP Basic
 authentication.

BasicBorders

Factory object that can vend Borders appropriate for the basic L & F.

BasicBorders.ButtonBorder

Draws a border around a button.

BasicBorders.FieldBorder

Draws the border around a field.

BasicBorders.MarginBorder

Draws the border around components which support margins.

BasicBorders.MenuBarBorder

Draws the border around a menu bar.

BasicBorders.RadioButtonBorder

Draws the border around a radio button.

BasicBorders.RolloverButtonBorder

Special thin border for rollover toolbar buttons.

BasicBorders.SplitPaneBorder

Draws the border around the splitpane.

BasicBorders.ToggleButtonBorder

Draws the border around a toggle button.

BasicButtonListener

Button Listener

BasicButtonUI

BasicButton implementation

BasicCheckBoxMenuItemUI

BasicCheckboxMenuItem implementation

BasicCheckBoxUI

CheckboxUI implementation for BasicCheckboxUI

BasicColorChooserUI

Provides the basic look and feel for a JColorChooser.

BasicComboBoxEditor

The default editor for editable combo boxes.

BasicComboBoxEditor.UIResource

A subclass of BasicComboBoxEditor that implements UIResource.

BasicComboBoxRenderer

ComboBox renderer

BasicComboBoxRenderer.UIResource

A subclass of BasicComboBoxRenderer that implements UIResource.

BasicComboBoxUI

Basic UI implementation for JComboBox.

BasicComboPopup

This is a basic implementation of the ComboPopup interface.

BasicControl

This class provides a basic implementation of the Control
 interface.

BasicDesktopIconUI

Basic L&F for a minimized window on a desktop.

BasicDesktopPaneUI

Basic L&F for a desktop.

BasicDirectoryModel

Basic implementation of a file list.

BasicEditorPaneUI

Provides the look and feel for a JEditorPane.

BasicFileAttributes

Basic attributes associated with a file in a file system.

BasicFileAttributeView

A file attribute view that provides a view of a basic set of file
 attributes common to many file systems.

BasicFileChooserUI

Basic L&F implementation of a FileChooser.

BasicFormattedTextFieldUI

Provides the look and feel implementation for
 JFormattedTextField.

BasicGraphicsUtils

Convenient util class.

BasicHTML

Support for providing html views for the swing components.

BasicIconFactory

Factory object that can vend Icons appropriate for the basic L & F.

BasicInternalFrameTitlePane

The class that manages a basic title bar

BasicInternalFrameUI

A basic L&F implementation of JInternalFrame.

BasicLabelUI

A Windows L&F implementation of LabelUI.

BasicListUI

An extensible implementation of ListUI.

BasicLookAndFeel

A base class to use in creating a look and feel for Swing.

BasicMenuBarUI

A default L&F implementation of MenuBarUI.

BasicMenuItemUI

BasicMenuItem implementation

BasicMenuUI

A default L&F implementation of MenuUI.

BasicOptionPaneUI

Provides the basic look and feel for a JOptionPane.

BasicOptionPaneUI.ButtonAreaLayout

ButtonAreaLayout behaves in a similar manner to
 FlowLayout.

BasicPanelUI

BasicPanel implementation

BasicPasswordFieldUI

Provides the Windows look and feel for a password field.

BasicPermission

The BasicPermission class extends the Permission class, and
 can be used as the base class for permissions that want to
 follow the same naming convention as BasicPermission.

BasicPopupMenuSeparatorUI

A Basic L&F implementation of PopupMenuSeparatorUI.

BasicPopupMenuUI

A Windows L&F implementation of PopupMenuUI.

BasicProgressBarUI

A Basic L&F implementation of ProgressBarUI.

BasicRadioButtonMenuItemUI

BasicRadioButtonMenuItem implementation

BasicRadioButtonUI

RadioButtonUI implementation for BasicRadioButtonUI

BasicRootPaneUI

Basic implementation of RootPaneUI, there is one shared between all
 JRootPane instances.

BasicScrollBarUI

Implementation of ScrollBarUI for the Basic Look and Feel

BasicScrollPaneUI

A default L&F implementation of ScrollPaneUI.

BasicSeparatorUI

A Basic L&F implementation of SeparatorUI.

BasicSliderUI

A Basic L&F implementation of SliderUI.

BasicSpinnerUI

The default Spinner UI delegate.

BasicSplitPaneDivider

Divider used by BasicSplitPaneUI.

BasicSplitPaneUI

A Basic L&F implementation of the SplitPaneUI.

BasicStroke

The BasicStroke class defines a basic set of rendering
 attributes for the outlines of graphics primitives, which are rendered
 with a Graphics2D object that has its Stroke attribute set to
 this BasicStroke.

BasicTabbedPaneUI

A Basic L&F implementation of TabbedPaneUI.

BasicTableHeaderUI

BasicTableHeaderUI implementation

BasicTableUI

BasicTableUI implementation

BasicTextAreaUI

Provides the look and feel for a plain text editor.

BasicTextFieldUI

Basis of a look and feel for a JTextField.

BasicTextPaneUI

Provides the look and feel for a styled text editor.

BasicTextUI


 Basis of a text components look-and-feel.

BasicTextUI.BasicCaret

Default implementation of the interface Caret.

BasicTextUI.BasicHighlighter

Default implementation of the interface Highlighter.

BasicToggleButtonUI

BasicToggleButton implementation

BasicToolBarSeparatorUI

A Basic L&F implementation of ToolBarSeparatorUI.

BasicToolBarUI

A Basic L&F implementation of ToolBarUI.

BasicToolTipUI

Standard tool tip L&F.

BasicTreeUI

The basic L&F for a hierarchical data structure.

BasicViewportUI

BasicViewport implementation

BatchUpdateException

The subclass of SQLException thrown when an error
 occurs during a batch update operation.

BeanContext


 The BeanContext acts a logical hierarchical container for JavaBeans.

BeanContextChild


 JavaBeans wishing to be nested within, and obtain a reference to their
 execution environment, or context, as defined by the BeanContext
 sub-interface shall implement this interface.

BeanContextChildComponentProxy


 This interface is implemented by
 BeanContextChildren that have an AWT Component
 associated with them.

BeanContextChildSupport


 This is a general support class to provide support for implementing the
 BeanContextChild protocol.

BeanContextContainerProxy


 This interface is implemented by BeanContexts' that have an AWT Container
 associated with them.

BeanContextEvent


 BeanContextEvent is the abstract root event class
 for all events emitted
 from, and pertaining to the semantics of, a BeanContext.

BeanContextMembershipEvent

A BeanContextMembershipEvent encapsulates
 the list of children added to, or removed from,
 the membership of a particular BeanContext.

BeanContextMembershipListener


 Compliant BeanContexts fire events on this interface when the state of
 the membership of the BeanContext changes.

BeanContextProxy


 This interface is implemented by a JavaBean that does
 not directly have a BeanContext(Child) associated with
 it (via implementing that interface or a subinterface thereof),
 but has a public BeanContext(Child) delegated from it.

BeanContextServiceAvailableEvent


 This event type is used by the BeanContextServicesListener in order to
 identify the service being registered.

BeanContextServiceProvider


 One of the primary functions of a BeanContext is to act a as rendezvous
 between JavaBeans, and BeanContextServiceProviders.

BeanContextServiceProviderBeanInfo

A BeanContextServiceProvider implementor who wishes to provide explicit
 information about the services their bean may provide shall implement a
 BeanInfo class that implements this BeanInfo subinterface and provides
 explicit information about the methods, properties, events, etc, of their
 services.

BeanContextServiceRevokedEvent


 This event type is used by the
 BeanContextServiceRevokedListener in order to
 identify the service being revoked.

BeanContextServiceRevokedListener

The listener interface for receiving
 BeanContextServiceRevokedEvent objects.

BeanContextServices


 The BeanContextServices interface provides a mechanism for a BeanContext
 to expose generic "services" to the BeanContextChild objects within.

BeanContextServicesListener

The listener interface for receiving
 BeanContextServiceAvailableEvent objects.

BeanContextServicesSupport


 This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContextServices interface.

BeanContextServicesSupport.BCSSServiceProvider

subclasses may subclass this nested class to add behaviors for
 each BeanContextServicesProvider.

BeanContextSupport

This helper class provides a utility implementation of the
 java.beans.beancontext.BeanContext interface.

BeanContextSupport.BCSIterator

protected final subclass that encapsulates an iterator but implements
 a noop remove() method.

BeanDescriptor

A BeanDescriptor provides global information about a "bean",
 including its Java class, its displayName, etc.

BeanInfo

Use the BeanInfo interface
 to create a BeanInfo class
 and provide explicit information about the methods,
 properties, events, and other features of your beans.

BeanProperty

An annotation used to specify some property-related information for the
 automatically generated BeanInfo classes.

Beans

This class provides some general purpose beans control methods.

BeansLinker

A linker for ordinary Java objects.

BevelBorder

A class which implements a simple two-line bevel border.

BiConsumer<T,U>

Represents an operation that accepts two input arguments and returns no
 result.

Bidi

This class implements the Unicode Bidirectional Algorithm.

BiFunction<T,U,R>

Represents a function that accepts two arguments and produces a result.

BigDecimal

Immutable, arbitrary-precision signed decimal numbers.

BigInteger

Immutable arbitrary-precision integers.

BinaryOperator<T>

Represents an operation upon two operands of the same type, producing a result
 of the same type as the operands.

BinaryRefAddr

This class represents the binary form of the address of
 a communications end-point.

BinaryTree

A tree node for a binary expression.

BindException

Signals that an error occurred while attempting to bind a
 socket to a local address and port.

Binding

This class represents a name-to-object binding found in a context.

BindingPatternTree

A binding pattern tree

Bindings

A mapping of key/value pairs, all of whose keys are
 Strings.

BiPredicate<T,U>

Represents a predicate (boolean-valued function) of two arguments.

BitSet

This class implements a vector of bits that grows as needed.

Blob

The representation (mapping) in
 the Java programming language of an SQL
 BLOB value.

BlockingDeque<E>

A Deque that additionally supports blocking operations that wait
 for the deque to become non-empty when retrieving an element, and wait for
 space to become available in the deque when storing an element.

BlockingQueue<E>

A Queue that additionally supports operations that wait for
 the queue to become non-empty when retrieving an element, and wait
 for space to become available in the queue when storing an element.

BlockTagTree

A tree node used as the base class for the different types of
 block tags.

BlockTree

A tree node for a statement block.

BlockView

A view implementation to display a block (as a box)
 with CSS specifications.

BMPImageWriteParam

A subclass of ImageWriteParam for encoding images in
 the BMP format.

Book

The Book class provides a representation of a document in
 which pages may have different page formats and page painters.

Boolean

The Boolean class wraps a value of the primitive type
 boolean in an object.

BooleanControl

A BooleanControl provides the ability to switch between two possible
 settings that affect a line's audio.

BooleanControl.Type

An instance of the BooleanControl.Type class identifies one kind
 of boolean control.

BooleanFlag

Event field annotation, specifies that the value is a boolean flag, a true or
 false value.

BooleanSupplier

Represents a supplier of boolean-valued results.

BooleanType

The type of all primitive boolean values
 accessed in the target VM.

BooleanValue

Provides access to a primitive boolean value in
 the target VM.

Bootstrap

Initial class that provides access to the default implementation
 of JDI interfaces.

BootstrapMethodError

Thrown to indicate that an invokedynamic instruction or a dynamic
 constant failed to resolve its bootstrap method and arguments,
 or for invokedynamic instruction the bootstrap method has failed to
 provide a
 call site with a
 target
 of the correct method type,
 or for a dynamic constant the bootstrap method has failed to provide a
 constant value of the required type.

Border

Interface describing an object capable of rendering a border
 around the edges of a swing component.

BorderFactory

Factory class for vending standard Border objects.

BorderLayout

A border layout lays out a container, arranging and resizing
 its components to fit in five regions:
 north, south, east, west, and center.

BorderUIResource

A Border wrapper class which implements UIResource.

BorderUIResource.BevelBorderUIResource

A bevel border UI resource.

BorderUIResource.CompoundBorderUIResource

A compound border UI resource.

BorderUIResource.EmptyBorderUIResource

An empty border UI resource.

BorderUIResource.EtchedBorderUIResource

An etched border UI resource.

BorderUIResource.LineBorderUIResource

A line border UI resource.

BorderUIResource.MatteBorderUIResource

A matte border UI resource.

BorderUIResource.TitledBorderUIResource

A titled border UI resource.

BoundedRangeModel

Defines the data model used by components like Sliders
 and ProgressBars.

Box

A lightweight container
 that uses a BoxLayout object as its layout manager.

Box.Filler

An implementation of a lightweight component that participates in
 layout but has no view.

BoxLayout

A layout manager that allows multiple components to be laid out either
 vertically or horizontally.

BoxView

A view that arranges its children into a box shape by tiling
 its children along an axis.

BreakIterator

The BreakIterator class implements methods for finding
 the location of boundaries in text.

BreakIteratorProvider

An abstract class for service providers that
 provide concrete implementations of the
 BreakIterator class.

BreakpointEvent

Notification of a breakpoint in the target VM.

BreakpointRequest

Identifies a Location in the target VM at which
 execution should be stopped.

BreakTree

A tree node for a break statement.

BrokenBarrierException

Exception thrown when a thread tries to wait upon a barrier that is
 in a broken state, or which enters the broken state while the thread
 is waiting.

Buffer

A container for data of a specific primitive type.

BufferCapabilities

Capabilities and properties of buffers.

BufferCapabilities.FlipContents

A type-safe enumeration of the possible back buffer contents after
 page-flipping

BufferedImage

The BufferedImage subclass describes an Image with an accessible buffer of image data.

BufferedImageFilter

The BufferedImageFilter class subclasses an
 ImageFilter to provide a simple means of
 using a single-source/single-destination image operator
 (BufferedImageOp) to filter a BufferedImage
 in the Image Producer/Consumer/Observer
 paradigm.

BufferedImageOp

This interface describes single-input/single-output
 operations performed on BufferedImage objects.

BufferedInputStream

A BufferedInputStream adds
 functionality to another input stream-namely,
 the ability to buffer the input and to
 support the mark and reset
 methods.

BufferedOutputStream

The class implements a buffered output stream.

BufferedReader

Reads text from a character-input stream, buffering characters so as to
 provide for the efficient reading of characters, arrays, and lines.

BufferedWriter

Writes text to a character-output stream, buffering characters so as to
 provide for the efficient writing of single characters, arrays, and strings.

BufferOverflowException

Unchecked exception thrown when a relative put operation reaches
 the target buffer's limit.

BufferPoolMXBean

The management interface for a buffer pool, for example a pool of
 direct or mapped buffers.

BufferStrategy

The BufferStrategy class represents the mechanism with which
 to organize complex memory on a particular Canvas or
 Window.

BufferUnderflowException

Unchecked exception thrown when a relative get operation reaches
 the source buffer's limit.

Button

This class creates a labeled button.

ButtonGroup

This class is used to create a multiple-exclusion scope for
 a set of buttons.

ButtonModel

State model for buttons.

ButtonUI

Pluggable look and feel interface for JButton.

Byte

The Byte class wraps a value of primitive type byte
 in an object.

ByteArrayInputStream

A ByteArrayInputStream contains
 an internal buffer that contains bytes that
 may be read from the stream.

ByteArrayOutputStream

This class implements an output stream in which the data is
 written into a byte array.

ByteBuffer

A byte buffer.

ByteChannel

A channel that can read and write bytes.

ByteLookupTable

This class defines a lookup table object.

ByteOrder

A typesafe enumeration for byte orders.

ByteType

The type of all primitive byte values accessed in
 the target VM.

ByteValue

Provides access to a primitive byte value in the target VM.

ByteVector

A specialized Vector representing an ordered immutable sequence of
 byte values.

C14NMethodParameterSpec

A specification of algorithm parameters for a CanonicalizationMethod
 Algorithm.

CachedRowSet

The interface that all standard implementations of
 CachedRowSet must implement.

CacheRequest

Represents channels for storing resources in the
 ResponseCache.

CacheResponse

Represent channels for retrieving resources from the
 ResponseCache.

Calendar

The Calendar class is an abstract class that provides methods
 for converting between a specific instant in time and a set of calendar fields such as YEAR, MONTH,
 DAY_OF_MONTH, HOUR, and so on, and for
 manipulating the calendar fields, such as getting the date of the next
 week.

Calendar.Builder

Calendar.Builder is used for creating a Calendar from
 various date-time parameters.

CalendarDataProvider

An abstract class for service providers that provide locale-dependent Calendar parameters.

CalendarNameProvider

An abstract class for service providers that provide localized string
 representations (display names) of Calendar field values.

Callable<V>

A task that returns a result and may throw an exception.

CallableStatement

The interface used to execute SQL stored procedures.

Callback

 Implementations of this interface are passed to a
 CallbackHandler, allowing underlying security services
 the ability to interact with a calling application to retrieve specific
 authentication data such as usernames and passwords, or to display
 certain information, such as error and warning messages.

CallbackHandler

 An application implements a CallbackHandler and passes
 it to underlying security services so that they may interact with
 the application to retrieve specific authentication data,
 such as usernames and passwords, or to display certain information,
 such as error and warning messages.

CallSite

A CallSite is a holder for a variable MethodHandle,
 which is called its target.

CallSiteDescriptor

Call site descriptors contain all the information necessary for linking a
 call site.

CancelablePrintJob

This interface is used by a printing application to cancel a print job.

CancellationException

Exception indicating that the result of a value-producing task,
 such as a FutureTask, cannot be retrieved because the task
 was cancelled.

CancelledKeyException

Unchecked exception thrown when an attempt is made to use
 a selection key that is no longer valid.

CannotProceedException

This exception is thrown to indicate that the operation reached
 a point in the name where the operation cannot proceed any further.

CannotRedoException

Thrown when an UndoableEdit is told to redo() and can't.

CannotUndoException

Thrown when an UndoableEdit is told to undo() and can't.

CanonicalizationMethod

A representation of the XML CanonicalizationMethod
 element as defined in the
 
 W3C Recommendation for XML-Signature Syntax and Processing.

Canvas

A Canvas component represents a blank rectangular
 area of the screen onto which the application can draw or from
 which the application can trap input events from the user.

Card

A Smart Card with which a connection has been established.

CardChannel

A logical channel connection to a Smart Card.

CardException

Exception for errors that occur during communication with the
 Smart Card stack or the card itself.

CardLayout

A CardLayout object is a layout manager for a
 container.

CardNotPresentException

Exception thrown when an application tries to establish a connection with a
 terminal that has no card present.

CardPermission

A permission for Smart Card operations.

CardTerminal

A Smart Card terminal, sometimes referred to as a Smart Card Reader.

CardTerminals

The set of terminals supported by a TerminalFactory.

CardTerminals.State

Enumeration of attributes of a CardTerminal.

Caret

A place within a document view that represents where
 things can be inserted into the document model.

CaretEvent

CaretEvent is used to notify interested parties that
 the text caret has changed in the event source.

CaretListener

Listener for changes in the caret position of a text
 component.

CaseLabelTreePREVIEW
Preview.
A marker interface for Trees that may be used as CaseTree labels.

CaseTree

A tree node for a case in a switch statement or expression.

CaseTree.CaseKind

The syntactic form of this case:
 
     STATEMENT: case <expression>: <statements>
     RULE: case <expression> -> <expression>/<statement>
 

Catalog

The Catalog class represents an entity Catalog as defined by
 
 XML Catalogs, OASIS Standard V1.1, 7 October 2005.

CatalogException

The exception class handles errors that may happen while processing or using
 a catalog.

CatalogFeatures

The CatalogFeatures holds a collection of features and properties.

CatalogFeatures.Builder

The Builder class for building the CatalogFeatures object.

CatalogFeatures.Feature

A Feature type as defined in the
 Catalog Features table.

CatalogManager

The Catalog Manager manages the creation of XML Catalogs and Catalog Resolvers.

CatalogResolver

A Catalog Resolver that implements SAX EntityResolver,
 StAX XMLResolver,
 DOM LS LSResourceResolver used by Schema Validation, and
 Transform URIResolver, and resolves
 external references using catalogs.

CatchTree

A tree node for a catch block in a try statement.

Category

Event annotation, to associate the event type with a category, in the format
 of a human-readable path.

CDATASection

CDATA sections are used to escape blocks of text containing characters that
 would otherwise be regarded as markup.

CellEditor

This interface defines the methods any general editor should be able
 to implement.

CellEditorListener

CellEditorListener defines the interface for an object that listens
 to changes in a CellEditor

CellRendererPane

This class is inserted in between cell renderers and the components that
 use them.

Certificate

Abstract class for managing a variety of identity certificates.

Certificate
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE.

Certificate
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in java.security.cert instead.

Certificate.CertificateRep

Alternate Certificate class for serialization.

CertificateEncodingException

Certificate Encoding Exception.

CertificateEncodingException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in java.security.cert instead.

CertificateException

This exception indicates one of a variety of certificate problems.

CertificateException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in java.security.cert instead.

CertificateExpiredException

Certificate Expired Exception.

CertificateExpiredException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in java.security.cert instead.

CertificateFactory

This class defines the functionality of a certificate factory, which is
 used to generate certificate, certification path (CertPath)
 and certificate revocation list (CRL) objects from their encodings.

CertificateFactorySpi

This class defines the Service Provider Interface (SPI)
 for the CertificateFactory class.

CertificateNotYetValidException

Certificate is not yet valid exception.

CertificateNotYetValidException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in java.security.cert instead.

CertificateParsingException

Certificate Parsing Exception.

CertificateParsingException
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in java.security.cert instead.

CertificateRevokedException

An exception that indicates an X.509 certificate is revoked.

CertPath

An immutable sequence of certificates (a certification path).

CertPath.CertPathRep

Alternate CertPath class for serialization.

CertPathBuilder

A class for building certification paths (also known as certificate chains).

CertPathBuilderException

An exception indicating one of a variety of problems encountered when
 building a certification path with a CertPathBuilder.

CertPathBuilderResult

A specification of the result of a certification path builder algorithm.

CertPathBuilderSpi

The Service Provider Interface (SPI)
 for the CertPathBuilder class.

CertPathChecker

Performs one or more checks on each Certificate of a
 CertPath.

CertPathParameters

A specification of certification path algorithm parameters.

CertPathTrustManagerParameters

A wrapper for CertPathParameters.

CertPathValidator

A class for validating certification paths (also known as certificate
 chains).

CertPathValidatorException

An exception indicating one of a variety of problems encountered when
 validating a certification path.

CertPathValidatorException.BasicReason

The BasicReason enumerates the potential reasons that a certification
 path of any type may be invalid.

CertPathValidatorException.Reason

The reason the validation algorithm failed.

CertPathValidatorResult

A specification of the result of a certification path validator algorithm.

CertPathValidatorSpi

The Service Provider Interface (SPI)
 for the CertPathValidator class.

CertSelector

A selector that defines a set of criteria for selecting
 Certificates.

CertStore

A class for retrieving Certificates and CRLs
 from a repository.

CertStoreException

An exception indicating one of a variety of problems retrieving
 certificates and CRLs from a CertStore.

CertStoreParameters

A specification of CertStore parameters.

CertStoreSpi

The Service Provider Interface (SPI)
 for the CertStore class.

ChaCha20ParameterSpec

This class specifies the parameters used with the
 ChaCha20
 algorithm.

ChainedCallSite

A relinkable call site that implements a polymorphic inline caching strategy.

ChangedCharSetException

ChangedCharSetException as the name indicates is an exception
 thrown when the charset is changed.

ChangeEvent

ChangeEvent is used to notify interested parties that
 state has changed in the event source.

ChangeListener

Defines an object which listens for ChangeEvents.

Channel

A nexus for I/O operations.

ChannelBinding

This class encapsulates the concept of caller-provided channel
 binding information.

Channels

Utility methods for channels and streams.

Channels

Defines static methods to create channels.

Channels.SelectableChannelCloser

An object used to coordinate the closing of a selectable channel created
 by readWriteSelectableChannel.

Character

The Character class wraps a value of the primitive
 type char in an object.

Character.Subset

Instances of this class represent particular subsets of the Unicode
 character set.

Character.UnicodeBlock

A family of character subsets representing the character blocks in the
 Unicode specification.

Character.UnicodeScript

A family of character subsets representing the character scripts
 defined in the 
 Unicode Standard Annex #24: Script Names.

CharacterCodingException

Checked exception thrown when a character encoding
 or decoding error occurs.

CharacterData

The CharacterData interface extends Node with a set of
 attributes and methods for accessing character data in the DOM.

CharacterIterator

This interface defines a protocol for bidirectional iteration over text.

Characters

This describes the interface to Characters events.

CharArrayReader

This class implements a character buffer that can be used as a
 character-input stream.

CharArrayWriter

This class implements a character buffer that can be used as an Writer.

CharBuffer

A char buffer.

CharConversionException

Base class for character conversion exceptions.

CharSequence

A CharSequence is a readable sequence of char values.

Charset

A named mapping between sequences of sixteen-bit Unicode code units and sequences of
 bytes.

CharsetDecoder

An engine that can transform a sequence of bytes in a specific charset into a sequence of
 sixteen-bit Unicode characters.

CharsetEncoder

An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of
 bytes in a specific charset.

CharsetProvider

Charset service-provider class.

CharType

The type of all primitive char values accessed in
 the target VM.

CharValue

Provides access to a primitive char value in
 the target VM.

Checkbox

A check box is a graphical component that can be in either an
 "on" (true) or "off" (false) state.

CheckboxGroup

The CheckboxGroup class is used to group together
 a set of Checkbox buttons.

CheckboxMenuItem

This class represents a check box that can be included in a menu.

CheckedInputStream

An input stream that also maintains a checksum of the data being read.

CheckedOutputStream

An output stream that also maintains a checksum of the data being
 written.

Checksum

An interface representing a data checksum.

Choice

The Choice class presents a pop-up menu of choices.

ChoiceCallback

 Underlying security services instantiate and pass a
 ChoiceCallback to the handle
 method of a CallbackHandler to display a list of choices
 and to retrieve the selected choice(s).

ChoiceFormat

A ChoiceFormat allows you to attach a format to a range of numbers.

Chromaticity

Class Chromaticity is a printing attribute class, an enumeration,
 that specifies monochrome or color printing.

ChronoField

A standard set of fields.

ChronoLocalDate

A date without time-of-day or time-zone in an arbitrary chronology, intended
 for advanced globalization use cases.

ChronoLocalDateTime<D extends ChronoLocalDate>

A date-time without a time-zone in an arbitrary chronology, intended
 for advanced globalization use cases.

Chronology

A calendar system, used to organize and identify dates.

ChronoPeriod

A date-based amount of time, such as '3 years, 4 months and 5 days' in an
 arbitrary chronology, intended for advanced globalization use cases.

ChronoUnit

A standard set of date periods units.

ChronoZonedDateTime<D extends ChronoLocalDate>

A date-time with a time-zone in an arbitrary chronology,
 intended for advanced globalization use cases.

Cipher

This class provides the functionality of a cryptographic cipher for
 encryption and decryption.

CipherInputStream

A CipherInputStream is composed of an InputStream and a Cipher so
 that read() methods return data that are read in from the
 underlying InputStream but have been additionally processed by the
 Cipher.

CipherOutputStream

A CipherOutputStream is composed of an OutputStream and a Cipher so
 that write() methods first process the data before writing them out
 to the underlying OutputStream.

CipherSpi

This class defines the Service Provider Interface (SPI)
 for the Cipher class.

Class<T>

Instances of the class Class represent classes and
 interfaces in a running Java application.

ClassCastException

Thrown to indicate that the code has attempted to cast an object
 to a subclass of which it is not an instance.

ClassCircularityError

Thrown when the Java Virtual Machine detects a circularity in the
 superclass hierarchy of a class being loaded.

ClassDefinition

This class serves as a parameter block to the Instrumentation.redefineClasses method.

ClassDesc

A nominal descriptor for a
 Class constant.

ClassFileTransformer

A transformer of class files.

ClassFormatError

Thrown when the Java Virtual Machine attempts to read a class
 file and determines that the file is malformed or otherwise cannot
 be interpreted as a class file.

ClassLoader

A class loader is an object that is responsible for loading classes.

ClassLoaderReference

A class loader object from the target VM.

ClassLoaderRepository

Instances of this interface are used to keep the list of ClassLoaders
 registered in an MBean Server.

ClassLoadingMXBean

The management interface for the class loading system of
 the Java virtual machine.

ClassNotFoundException

Thrown when an application tries to load in a class through its
 string name using:
 
 The forName method in class Class.

ClassNotLoadedException

Thrown to indicate that the requested class has
 not yet been loaded through the appropriate class loader.

ClassNotPreparedException

Thrown to indicate that the requested operation cannot be
 completed because the specified class has not yet been prepared.

ClassObjectReference

An instance of java.lang.Class from the target VM.

ClassPrepareEvent

Notification of a class prepare in the target VM.

ClassPrepareRequest

Request for notification when a class is prepared in the target VM.

ClassTree

A tree node for a class, interface, enum, record, or annotation
 type declaration.

ClassType

A mirror of a class in the target VM.

ClassUnloadEvent

Notification of a class unload in the target VM.

ClassUnloadRequest

Request for notification when a class is unloaded in the target VM.

ClassValue<T>

Lazily associate a computed value with (potentially) every type.

Cleaner

Cleaner manages a set of object references and corresponding cleaning actions.

Cleaner.Cleanable

Cleanable represents an object and a
 cleaning action registered in a Cleaner.

ClientInfoStatus

Enumeration for status of the reason that a property could not be set
 via a call to Connection.setClientInfo

CLinker

A C linker implements the C Application Binary Interface (ABI) calling conventions.

CLinker.TypeKind

A C type kind.

CLinker.VaList

An interface that models a C va_list.

CLinker.VaList.Builder

A builder interface used to construct a C va_list.

Clip

The Clip interface represents a special kind of data line whose audio
 data can be loaded prior to playback, instead of being streamed in real time.

Clipboard

A class that implements a mechanism to transfer data using cut/copy/paste
 operations.

ClipboardOwner

Defines the interface for classes that will provide data to a clipboard.

Clob

The mapping in the Java programming language
 for the SQL CLOB type.

Clock

A clock providing access to the current instant, date and time using a time-zone.

Cloneable

A class implements the Cloneable interface to
 indicate to the Object.clone() method that it
 is legal for that method to make a
 field-for-field copy of instances of that class.

CloneNotSupportedException

Thrown to indicate that the clone method in class
 Object has been called to clone an object, but that
 the object's class does not implement the Cloneable
 interface.

Closeable

A Closeable is a source or destination of data that can be closed.

ClosedByInterruptException

Checked exception received by a thread when another thread interrupts it
 while it is blocked in an I/O operation upon a channel.

ClosedChannelException

Checked exception thrown when an attempt is made to invoke or complete an
 I/O operation upon channel that is closed, or at least closed to that
 operation.

ClosedConnectionException

This exception may be thrown as a result of an asynchronous
 close of a Connection while an I/O operation is
 in progress.

ClosedDirectoryStreamException

Unchecked exception thrown when an attempt is made to invoke an operation on
 a directory stream that is closed.

ClosedFileSystemException

Unchecked exception thrown when an attempt is made to invoke an operation on
 a file and the file system is closed.

ClosedSelectorException

Unchecked exception thrown when an attempt is made to invoke an I/O
 operation upon a closed selector.

ClosedWatchServiceException

Unchecked exception thrown when an attempt is made to invoke an operation on
 a watch service that is closed.

CMMException

This exception is thrown if the native CMM returns an error.

CoderMalfunctionError

Error thrown when the decodeLoop method of
 a CharsetDecoder, or the encodeLoop method of a CharsetEncoder, throws an unexpected
 exception.

CoderResult

A description of the result state of a coder.

CodeSigner

This class encapsulates information about a code signer.

CodeSource

This class extends the concept of a codebase to
 encapsulate not only the location (URL) but also the certificate chains
 that were used to verify signed code originating from that location.

CodingErrorAction

A typesafe enumeration for coding-error actions.

CollationElementIterator

The CollationElementIterator class is used as an iterator
 to walk through each character of an international string.

CollationKey

A CollationKey represents a String under the
 rules of a specific Collator object.

Collator

The Collator class performs locale-sensitive
 String comparison.

CollatorProvider

An abstract class for service providers that
 provide concrete implementations of the
 Collator class.

Collection<E>

The root interface in the collection hierarchy.

CollectionCertStoreParameters

Parameters used as input for the Collection CertStore
 algorithm.

Collections

This class consists exclusively of static methods that operate on or return
 collections.

Collector<T,A,R>

A mutable reduction operation that
 accumulates input elements into a mutable result container, optionally transforming
 the accumulated result into a final representation after all input elements
 have been processed.

Collector.Characteristics

Characteristics indicating properties of a Collector, which can
 be used to optimize reduction implementations.

Collectors

Implementations of Collector that implement various useful reduction
 operations, such as accumulating elements into collections, summarizing
 elements according to various criteria, etc.

Color

The Color class is used to encapsulate colors in the default
 sRGB color space or colors in arbitrary color spaces identified by a
 ColorSpace.

ColorChooserComponentFactory

A class designed to produce preconfigured "accessory" objects to
 insert into color choosers.

ColorChooserUI

Pluggable look and feel interface for JColorChooser.

ColorConvertOp

This class performs a pixel-by-pixel color conversion of the data in
 the source image.

ColorModel

The ColorModel abstract class encapsulates the
 methods for translating a pixel value to color components
 (for example, red, green, and blue) and an alpha component.

ColorSelectionModel

A model that supports selecting a Color.

ColorSpace

This abstract class is used to serve as a color space tag to identify the
 specific color space of a Color object or, via a ColorModel
 object, of an Image, a BufferedImage, or a
 GraphicsDevice.

ColorSupported

Class ColorSupported is a printing attribute class, an enumeration,
 that identifies whether the device is capable of any type of color printing
 at all, including highlight color as well as full process color.

ColorType

A typesafe enumeration of colors that can be fetched from a style.

ColorUIResource

A subclass of Color that implements UIResource.

ComboBoxEditor

The editor component used for JComboBox components.

ComboBoxModel<E>

A data model for a combo box.

ComboBoxUI

Pluggable look and feel interface for JComboBox.

ComboPopup

The interface which defines the methods required for the implementation of the popup
 portion of a combo box.

CommandAPDU

A command APDU following the structure defined in ISO/IEC 7816-4.

Comment

An interface for comment events

Comment

This interface inherits from CharacterData and represents the
 content of a comment, i.e., all the characters between the starting
 '<!--' and ending '-->'.

CommentTree

An embedded HTML comment.

CommonDataSource

Interface that defines the methods which are common between DataSource,
 XADataSource and ConnectionPoolDataSource.

CommunicationException

This exception is thrown when the client is
 unable to communicate with the directory or naming service.

CompactNumberFormat


 CompactNumberFormat is a concrete subclass of NumberFormat
 that formats a decimal number in its compact form.

Comparable<T>

This interface imposes a total ordering on the objects of each class that
 implements it.

Comparator<T>

A comparison function, which imposes a total ordering on
 some collection of objects.

Compilable

The optional interface implemented by ScriptEngines whose methods compile scripts
 to a form that can be executed repeatedly without recompilation.

CompilationMXBean

The management interface for the compilation system of
 the Java virtual machine.

CompilationUnitTree

Represents the abstract syntax tree for ordinary compilation units
 and modular compilation units.

CompiledScript

Extended by classes that store results of compilations.

Compiler
Deprecated, for removal: This API element is subject to removal in a future version.
JIT compilers and their technologies vary too widely to
 be controlled effectively by a standardized interface.

CompletableFuture<T>

A Future that may be explicitly completed (setting its
 value and status), and may be used as a CompletionStage,
 supporting dependent functions and actions that trigger upon its
 completion.

CompletableFuture.AsynchronousCompletionTask

A marker interface identifying asynchronous tasks produced by
 async methods.

Completion

A suggested completion for an
 annotation.

CompletionException

Exception thrown when an error or other exception is encountered
 in the course of completing a result or task.

CompletionHandler<V,A>

A handler for consuming the result of an asynchronous I/O operation.

Completions

Utility class for assembling Completion objects.

CompletionService<V>

A service that decouples the production of new asynchronous tasks
 from the consumption of the results of completed tasks.

CompletionStage<T>

A stage of a possibly asynchronous computation, that performs an
 action or computes a value when another CompletionStage completes.

Component

A component is an object having a graphical representation
 that can be displayed on the screen and that can interact with the
 user.

Component.BaselineResizeBehavior

Enumeration of the common ways the baseline of a component can
 change as the size changes.

ComponentAdapter

An abstract adapter class for receiving component events.

ComponentColorModel

A ColorModel class that works with pixel values that
 represent color and alpha information as separate samples and that
 store each sample in a separate data element.

ComponentEvent

A low-level event which indicates that a component moved, changed
 size, or changed visibility (also, the root class for the other
 component-level events).

ComponentInputMap

A ComponentInputMap is an InputMap
 associated with a particular JComponent.

ComponentInputMapUIResource

A subclass of javax.swing.ComponentInputMap that implements UIResource.

ComponentListener

The listener interface for receiving component events.

ComponentOrientation

The ComponentOrientation class encapsulates the language-sensitive
 orientation that is to be used to order the elements of a component
 or of text.

ComponentSampleModel

This class represents image data which is stored such that each sample
  of a pixel occupies one data element of the DataBuffer.

ComponentUI

The base class for all UI delegate objects in the Swing pluggable
 look and feel architecture.

ComponentView

Component decorator that implements the view interface.

Composite

The Composite interface, along with
 CompositeContext, defines the methods to compose a draw
 primitive with the underlying graphics area.

CompositeContext

The CompositeContext interface defines the encapsulated
 and optimized environment for a compositing operation.

CompositeData

The CompositeData interface specifies
 the behavior of a specific type of complex open data objects
 which represent composite data structures.

CompositeDataInvocationHandler

An InvocationHandler that forwards getter methods to a
   CompositeData.

CompositeDataSupport

The CompositeDataSupport class is the open data class which
 implements the CompositeData interface.

CompositeDataView

A Java class can implement this interface to indicate how it is
 to be converted into a CompositeData by the MXBean framework.

CompositeGuardingDynamicLinker

A GuardingDynamicLinker that delegates sequentially to a list of
 other guarding dynamic linkers in its
 CompositeGuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices).

CompositeName

This class represents a composite name -- a sequence of
 component names spanning multiple namespaces.

CompositeType

The CompositeType class is the open type class
 whose instances describe the types of CompositeData values.

CompositeTypeBasedGuardingDynamicLinker

A composite type-based guarding dynamic linker.

CompositeView

CompositeView is an abstract View
 implementation which manages one or more child views.

CompoundAssignmentTree

A tree node for compound assignment operator.

CompoundBorder

A composite Border class used to compose two Border objects
 into a single border by nesting an inside Border object within
 the insets of an outside Border object.

CompoundControl

A CompoundControl, such as a graphic equalizer, provides control over
 two or more related properties, each of which is itself represented as a
 Control.

CompoundControl.Type

An instance of the CompoundControl.Type inner class identifies
 one kind of compound control.

CompoundEdit

A concrete subclass of AbstractUndoableEdit, used to assemble little
 UndoableEdits into great big ones.

CompoundName

This class represents a compound name -- a name from
 a hierarchical name space.

Compression

Class Compression is a printing attribute class, an enumeration, that
 specifies how print data is compressed.

ConcurrentHashMap<K,V>

A hash table supporting full concurrency of retrievals and
 high expected concurrency for updates.

ConcurrentHashMap.KeySetView<K,V>

A view of a ConcurrentHashMap as a Set of keys, in
 which additions may optionally be enabled by mapping to a
 common value.

ConcurrentLinkedDeque<E>

An unbounded concurrent deque based on linked nodes.

ConcurrentLinkedQueue<E>

An unbounded thread-safe queue based on linked nodes.

ConcurrentMap<K,V>

A Map providing thread safety and atomicity guarantees.

ConcurrentModificationException

This exception may be thrown by methods that have detected concurrent
 modification of an object when such modification is not permissible.

ConcurrentNavigableMap<K,V>

A ConcurrentMap supporting NavigableMap operations,
 and recursively so for its navigable sub-maps.

ConcurrentSkipListMap<K,V>

A scalable concurrent ConcurrentNavigableMap implementation.

ConcurrentSkipListSet<E>

A scalable concurrent NavigableSet implementation based on
 a ConcurrentSkipListMap.

Condition

Condition factors out the Object monitor
 methods (wait, notify
 and notifyAll) into distinct objects to
 give the effect of having multiple wait-sets per object, by
 combining them with the use of arbitrary Lock implementations.

ConditionalExpressionTree

A tree node for the conditional operator ? :.

ConfigFile

This class represents a default implementation for
 javax.security.auth.login.Configuration.

Configuration

A configuration that is the result of 
 resolution or resolution with
 service binding.

Configuration

A Configuration object is responsible for specifying which LoginModules
 should be used for a particular application, and in what order the
 LoginModules should be invoked.

Configuration

A collection of settings and metadata describing the configuration.

Configuration.Parameters

This represents a marker interface for Configuration parameters.

ConfigurationException

This exception is thrown when there is a configuration problem.

ConfigurationInfo

Management representation of a Configuration.

ConfigurationSpi

This class defines the Service Provider Interface (SPI)
 for the Configuration class.

ConfirmationCallback

 Underlying security services instantiate and pass a
 ConfirmationCallback to the handle
 method of a CallbackHandler to ask for YES/NO,
 OK/CANCEL, YES/NO/CANCEL or other similar confirmations.

ConnectException

Signals that an error occurred while attempting to connect a
 socket to a remote address and port.

ConnectException

A ConnectException is thrown if a connection is refused
 to the remote host for a remote method call.

ConnectIOException

A ConnectIOException is thrown if an
 IOException occurs while making a connection
 to the remote host for a remote method call.

Connection

A connection between a debugger and a target VM which it debugs.

Connection

A connection (session) with a specific
 database.

ConnectionBuilder

A builder created from a DataSource object,
 used to establish a connection to the database that the
 data source object represents.

ConnectionEvent

An Event object that provides information about the
 source of a connection-related event.

ConnectionEventListener


 An object that registers to be notified of events generated by a
 PooledConnection object.

ConnectionPendingException

Unchecked exception thrown when an attempt is made to connect a SocketChannel for which a non-blocking connection operation is already in
 progress.

ConnectionPoolDataSource

A factory for PooledConnection
 objects.

Connector

A method of connection between a debugger and a target VM.

Connector.Argument

Specification for and value of a Connector argument.

Connector.BooleanArgument

Specification for and value of a Connector argument,
 whose value is Boolean.

Connector.IntegerArgument

Specification for and value of a Connector argument,
 whose value is an integer.

Connector.SelectedArgument

Specification for and value of a Connector argument,
 whose value is a String selected from a list of choices.

Connector.StringArgument

Specification for and value of a Connector argument,
 whose value is a String.

Console

Methods to access the character-based console device, if any, associated
 with the current Java virtual machine.

ConsoleHandler

This Handler publishes log records to System.err.

Constable

Represents a type which is constable.

ConstantBootstraps

Bootstrap methods for dynamically-computed constants.

ConstantCallSite

A ConstantCallSite is a CallSite whose target is permanent, and can never be changed.

ConstantDesc

A nominal descriptor for a loadable
 constant value, as defined in JVMS 4.4.

ConstantDescs

Predefined values of nominal descriptor
 for common constants, including descriptors for primitive class types and
 other common platform types, and descriptors for method handles for standard
 bootstrap methods.

Constructor<T>

Constructor provides information about, and access to, a single
 constructor for a class.

ConstructorParameters


 An annotation on a constructor that shows how the parameters of
 that constructor correspond to the constructed object's getter
 methods.

ConstructorProperties

An annotation on a constructor that shows how the parameters of
   that constructor correspond to the constructed object's getter
   methods.

Consumer<T>

Represents an operation that accepts a single input argument and returns no
 result.

Container

A generic Abstract Window Toolkit(AWT) container object is a component
 that can contain other AWT components.

ContainerAdapter

An abstract adapter class for receiving container events.

ContainerEvent

A low-level event which indicates that a container's contents
 changed because a component was added or removed.

ContainerListener

The listener interface for receiving container events.

ContainerOrderFocusTraversalPolicy

A FocusTraversalPolicy that determines traversal order based on the order
 of child Components in a Container.

ContentHandler

The abstract class ContentHandler is the superclass
 of all classes that read an Object from a
 URLConnection.

ContentHandler

Receive notification of the logical content of a document.

ContentHandlerFactory

This interface defines a factory for content handlers.

ContentModel

A representation of a content model.

ContentSigner
Deprecated, for removal: This API element is subject to removal in a future version.
This class has been deprecated.

ContentSignerParameters
Deprecated, for removal: This API element is subject to removal in a future version.
This class has been deprecated.

ContentType

Meta annotation, specifies that an annotation represents a content type, such
 as a time span or a frequency.

Context

This interface represents a naming context, which
 consists of a set of name-to-object bindings.

ContextNotEmptyException

This exception is thrown when attempting to destroy a context that
 is not empty.

ContextualRenderedImageFactory

ContextualRenderedImageFactory provides an interface for the
 functionality that may differ between instances of
 RenderableImageOp.

ContinueTree

A tree node for a continue statement.

Control

This interface represents an LDAPv3 control as defined in
 RFC 2251.

Control

Lines often have a set of controls, such as gain and pan, that
 affect the audio signal passing through the line.

Control.Type

An instance of the Type class represents the type of the control.

ControlFactory

This abstract class represents a factory for creating LDAPv3 controls.

ControllerEventListener

The ControllerEventListener interface should be implemented by
 classes whose instances need to be notified when a Sequencer has
 processed a requested type of MIDI control-change event.

ConversionComparator

Optional interface to be implemented by GuardingTypeConverterFactory
 implementers.

ConversionComparator.Comparison

Enumeration of possible outcomes of comparing one conversion to another.

ConvolveOp

This class implements a convolution from the source
 to the destination.

CookieHandler

A CookieHandler object provides a callback mechanism to hook up a
 HTTP state management policy implementation into the HTTP protocol
 handler.

CookieManager

CookieManager provides a concrete implementation of CookieHandler,
 which separates the storage of cookies from the policy surrounding accepting
 and rejecting cookies.

CookiePolicy

CookiePolicy implementations decide which cookies should be accepted
 and which should be rejected.

CookieStore

A CookieStore object represents a storage for cookie.

Copies

Class Copies is an integer valued printing attribute class that
 specifies the number of copies to be printed.

CopiesSupported

Class CopiesSupported is a printing attribute class, a set of
 integers, that gives the supported values for a Copies
 attribute.

CopyOnWriteArrayList<E>

A thread-safe variant of ArrayList in which all mutative
 operations (add, set, and so on) are implemented by
 making a fresh copy of the underlying array.

CopyOnWriteArraySet<E>

A Set that uses an internal CopyOnWriteArrayList
 for all of its operations.

CopyOption

An object that configures how to copy or move a file.

CountDownLatch

A synchronization aid that allows one or more threads to wait until
 a set of operations being performed in other threads completes.

CountedCompleter<T>

A ForkJoinTask with a completion action performed when
 triggered and there are no remaining pending actions.

Counter

The Counter interface is used to represent any counter or
 counters function value.

CounterMonitor

Defines a monitor MBean designed to observe the values of a counter
 attribute.

CounterMonitorMBean

Exposes the remote management interface of the counter monitor MBean.

CRC32

A class that can be used to compute the CRC-32 of a data stream.

CRC32C

A class that can be used to compute the CRC-32C of a data stream.

CredentialException

A generic credential exception.

CredentialExpiredException

Signals that a Credential has expired.

CredentialNotFoundException

Signals that a credential was not found.

CRL

This class is an abstraction of certificate revocation lists (CRLs) that
 have different formats but important common uses.

CRLException

CRL (Certificate Revocation List) Exception.

CRLReason

The CRLReason enumeration specifies the reason that a certificate
 is revoked, as defined in 
 RFC 5280: Internet X.509 Public Key Infrastructure Certificate and CRL
 Profile.

CRLSelector

A selector that defines a set of criteria for selecting CRLs.

CropImageFilter

An ImageFilter class for cropping images.

CryptoPrimitive

An enumeration of cryptographic primitives.

CSS

Defines a set of
 CSS attributes
 as a typesafe enumeration.

CSS.Attribute

Definitions to be used as a key on AttributeSet's
 that might hold CSS attributes.

CSS2Properties

The CSS2Properties interface represents a convenience
 mechanism for retrieving and setting properties within a
 CSSStyleDeclaration.

CSSCharsetRule

The CSSCharsetRule interface represents a @charset rule in a
 CSS style sheet.

CSSFontFaceRule

The CSSFontFaceRule interface represents a @font-face rule in
 a CSS style sheet.

CSSImportRule

The CSSImportRule interface represents a @import rule within
 a CSS style sheet.

CSSMediaRule

The CSSMediaRule interface represents a @media rule in a CSS
 style sheet.

CSSPageRule

The CSSPageRule interface represents a @page rule within a
 CSS style sheet.

CSSPrimitiveValue

The CSSPrimitiveValue interface represents a single CSS value
 .

CSSRule

The CSSRule interface is the abstract base interface for any
 type of CSS statement.

CSSRuleList

The CSSRuleList interface provides the abstraction of an
 ordered collection of CSS rules.

CSSStyleDeclaration

The CSSStyleDeclaration interface represents a single CSS
 declaration block.

CSSStyleRule

The CSSStyleRule interface represents a single rule set in a
 CSS style sheet.

CSSStyleSheet

The CSSStyleSheet interface is a concrete interface used to
 represent a CSS style sheet i.e., a style sheet whose content type is
 "text/css".

CSSUnknownRule

The CSSUnknownRule interface represents an at-rule not
 supported by this user agent.

CSSValue

The CSSValue interface represents a simple or a complex
 value.

CSSValueList

The CSSValueList interface provides the abstraction of an
 ordered collection of CSS values.

CubicCurve2D

The CubicCurve2D class defines a cubic parametric curve
 segment in (x,y) coordinate space.

CubicCurve2D.Double

A cubic parametric curve segment specified with
 double coordinates.

CubicCurve2D.Float

A cubic parametric curve segment specified with
 float coordinates.

Currency

Represents a currency.

CurrencyNameProvider

An abstract class for service providers that
 provide localized currency symbols and display names for the
 Currency class.

Cursor

A class to encapsulate the bitmap representation of the mouse cursor.

Customizer

A customizer class provides a complete custom GUI for customizing
 a target Java Bean.

CyclicBarrier

A synchronization aid that allows a set of threads to all wait for
 each other to reach a common barrier point.

Data

An abstract representation of the result of dereferencing a
 URIReference or the input/output of subsequent Transforms.

DataAmount

Event field annotation, specifies that a value represents an amount of data (for example, bytes).

DatabaseMetaData

Comprehensive information about the database as a whole.

DataBuffer

This class exists to wrap one or more data arrays.

DataBufferByte

This class extends DataBuffer and stores data internally as bytes.

DataBufferDouble

This class extends DataBuffer and stores data internally
 in double form.

DataBufferFloat

This class extends DataBuffer and stores data internally
 in float form.

DataBufferInt

This class extends DataBuffer and stores data internally
 as integers.

DataBufferShort

This class extends DataBuffer and stores data internally as shorts.

DataBufferUShort

This class extends DataBuffer and stores data internally as
 shorts.

DataFlavor

A DataFlavor provides meta information about data.

DataFormatException

Signals that a data format error has occurred.

DatagramChannel

A selectable channel for datagram-oriented sockets.

DatagramPacket

This class represents a datagram packet.

DatagramSocket

This class represents a socket for sending and receiving datagram packets.

DatagramSocketImpl

Abstract datagram and multicast socket implementation base class.

DatagramSocketImplFactory

This interface defines a factory for datagram socket implementations.

DataInput

The DataInput interface provides
 for reading bytes from a binary stream and
 reconstructing from them data in any of
 the Java primitive types.

DataInputStream

A data input stream lets an application read primitive Java data
 types from an underlying input stream in a machine-independent
 way.

DataLine

DataLine adds media-related functionality to its superinterface,
 Line.

DataLine.Info

Besides the class information inherited from its superclass,
 DataLine.Info provides additional information specific to data
 lines.

DataOutput

The DataOutput interface provides
 for converting data from any of the Java
 primitive types to a series of bytes and
 writing these bytes to a binary stream.

DataOutputStream

A data output stream lets an application write primitive Java data
 types to an output stream in a portable way.

DataSource

A factory for connections to the physical data source that this
 DataSource object represents.

DataTruncation

An exception  thrown as a DataTruncation exception
 (on writes) or reported as a
 DataTruncation warning (on reads)
  when a data values is unexpectedly truncated for reasons other than its having
  exceeded MaxFieldSize.

DatatypeConfigurationException

Indicates a serious configuration error.

DatatypeConstants

Utility class to contain basic Datatype values as constants.

DatatypeConstants.Field

Type-safe enum class that represents six fields
 of the Duration class.

DatatypeFactory

Factory that creates new javax.xml.datatype Objects that map XML to/from Java Objects.

Date

A thin wrapper around a millisecond value that allows
 JDBC to identify this as an SQL DATE value.

Date

The class Date represents a specific instant
 in time, with millisecond precision.

DateFormat

DateFormat is an abstract class for date/time formatting subclasses which
 formats and parses dates or time in a language-independent manner.

DateFormat.Field

Defines constants that are used as attribute keys in the
 AttributedCharacterIterator returned
 from DateFormat.formatToCharacterIterator and as
 field identifiers in FieldPosition.

DateFormatProvider

An abstract class for service providers that
 provide concrete implementations of the
 DateFormat class.

DateFormatSymbols

DateFormatSymbols is a public class for encapsulating
 localizable date-time formatting data, such as the names of the
 months, the names of the days of the week, and the time zone data.

DateFormatSymbolsProvider

An abstract class for service providers that
 provide instances of the
 DateFormatSymbols class.

DateFormatter

DateFormatter is an InternationalFormatter that does its
 formatting by way of an instance of java.text.DateFormat.

DateTimeAtCompleted

Class DateTimeAtCompleted is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job completed
 (or was canceled or aborted).

DateTimeAtCreation

Class DateTimeAtCreation is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job was
 created.

DateTimeAtProcessing

Class DateTimeAtProcessing is a printing attribute class, a date-time
 attribute, that indicates the date and time at which the Print Job first
 began processing.

DateTimeException

Exception used to indicate a problem while calculating a date-time.

DateTimeFormatter

Formatter for printing and parsing date-time objects.

DateTimeFormatterBuilder

Builder to create date-time formatters.

DateTimeParseException

An exception thrown when an error occurs during parsing.

DateTimeSyntax

Class DateTimeSyntax is an abstract base class providing the common
 implementation of all attributes whose value is a date and time.

DayOfWeek

A day-of-week, such as 'Tuesday'.

DebugGraphics

Graphics subclass supporting graphics debugging.

DecimalFormat

DecimalFormat is a concrete subclass of
 NumberFormat that formats decimal numbers.

DecimalFormatSymbols

This class represents the set of symbols (such as the decimal separator,
 the grouping separator, and so on) needed by DecimalFormat
 to format numbers.

DecimalFormatSymbolsProvider

An abstract class for service providers that
 provide instances of the
 DecimalFormatSymbols class.

DecimalStyle

Localized decimal style used in date and time formatting.

DeclarationSnippet

Grouping for all declaration Snippets: variable declarations
 (VarSnippet), method declarations
 (MethodSnippet), and type declarations
 (TypeDeclSnippet).

DeclaredType

Represents a declared type, either a class type or an interface type.

DeclHandler

SAX2 extension handler for DTD declaration events.

DefaultBoundedRangeModel

A generic implementation of BoundedRangeModel.

DefaultButtonModel

The default implementation of a Button component's data model.

DefaultCaret

A default implementation of Caret.

DefaultCaseLabelTreePREVIEW
Preview.
A case label that marks default in case null, default.

DefaultCellEditor

The default editor for table and tree cells.

DefaultColorSelectionModel

A generic implementation of ColorSelectionModel.

DefaultComboBoxModel<E>

The default model for combo boxes.

DefaultDesktopManager

This is an implementation of the DesktopManager.

DefaultEditorKit

This is the set of things needed by a text component
 to be a reasonably functioning editor for some type
 of text document.

DefaultEditorKit.BeepAction

Creates a beep.

DefaultEditorKit.CopyAction

Copies the selected region and place its contents
 into the system clipboard.

DefaultEditorKit.CutAction

Cuts the selected region and place its contents
 into the system clipboard.

DefaultEditorKit.DefaultKeyTypedAction

The action that is executed by default if
 a key typed event is received and there
 is no keymap entry.

DefaultEditorKit.InsertBreakAction

Places a line/paragraph break into the document.

DefaultEditorKit.InsertContentAction

Places content into the associated document.

DefaultEditorKit.InsertTabAction

Places a tab character into the document.

DefaultEditorKit.PasteAction

Pastes the contents of the system clipboard into the
 selected region, or before the caret if nothing is
 selected.

DefaultFocusManager

This class has been obsoleted by the 1.4 focus APIs.

DefaultFocusTraversalPolicy

A FocusTraversalPolicy that determines traversal order based on the order
 of child Components in a Container.

DefaultFormatter

DefaultFormatter formats arbitrary objects.

DefaultFormatterFactory

An implementation of
 JFormattedTextField.AbstractFormatterFactory.

DefaultHandler

Default base class for SAX2 event handlers.

DefaultHandler2

This class extends the SAX2 base handler class to support the
 SAX2 LexicalHandler, DeclHandler, and
 EntityResolver2 extensions.

DefaultHighlighter

Implements the Highlighter interfaces.

DefaultHighlighter.DefaultHighlightPainter

Simple highlight painter that fills a highlighted area with
 a solid color.

DefaultInternalObjectFilter

Default implementation for a
 DynamicLinkerFactory.setInternalObjectsFilter(MethodHandleTransformer)
 that delegates to a pair of filtering method handles.

DefaultKeyboardFocusManager

The default KeyboardFocusManager for AWT applications.

DefaultListCellRenderer

Renders an item in a list.

DefaultListCellRenderer.UIResource

A subclass of DefaultListCellRenderer that implements UIResource.

DefaultListModel<E>

This class loosely implements the java.util.Vector
 API, in that it implements the 1.1.x version of
 java.util.Vector, has no collection class support,
 and notifies the ListDataListeners when changes occur.

DefaultListSelectionModel

Default data model for list selections.

DefaultLoaderRepository
Deprecated.
Use
 MBeanServer.getClassLoaderRepository()
 instead.

DefaultLoaderRepository
Deprecated.
Use
 MBeanServer.getClassLoaderRepository()
 instead.

DefaultMenuLayout

The default layout manager for Popup menus and menubars.

DefaultMetalTheme

A concrete implementation of MetalTheme providing
 the original look of the Java Look and Feel, code-named "Steel".

DefaultMutableTreeNode

A DefaultMutableTreeNode is a general-purpose node in a tree data
 structure.

DefaultPersistenceDelegate

The DefaultPersistenceDelegate is a concrete implementation of
 the abstract PersistenceDelegate class and
 is the delegate used by default for classes about
 which no information is available.

DefaultRowSorter<M,I>

An implementation of RowSorter that provides sorting and
 filtering around a grid-based data model.

DefaultRowSorter.ModelWrapper<M,I>

DefaultRowSorter.ModelWrapper is responsible for providing
 the data that gets sorted by DefaultRowSorter.

DefaultSingleSelectionModel

A generic implementation of SingleSelectionModel.

DefaultStyledDocument

A document that can be marked up with character and paragraph
 styles in a manner similar to the Rich Text Format.

DefaultStyledDocument.AttributeUndoableEdit

An UndoableEdit used to remember AttributeSet changes to an
 Element.

DefaultStyledDocument.ElementSpec

Specification for building elements.

DefaultTableCellRenderer

The standard class for rendering (displaying) individual cells
 in a JTable.

DefaultTableCellRenderer.UIResource

A subclass of DefaultTableCellRenderer that
 implements UIResource.

DefaultTableColumnModel

The standard column-handler for a JTable.

DefaultTableModel

This is an implementation of TableModel that
 uses a Vector of Vectors to store the
 cell value objects.

DefaultTextUI
Deprecated. 
DefaultTreeCellEditor

A TreeCellEditor.

DefaultTreeCellRenderer

Displays an entry in a tree.

DefaultTreeModel

A simple tree data model that uses TreeNodes.

DefaultTreeSelectionModel

Default implementation of TreeSelectionModel.

Deflater

This class provides support for general purpose compression using the
 popular ZLIB compression library.

DeflaterInputStream

Implements an input stream filter for compressing data in the "deflate"
 compression format.

DeflaterOutputStream

This class implements an output stream filter for compressing data in
 the "deflate" compression format.

Delayed

A mix-in style interface for marking objects that should be
 acted upon after a given delay.

DelayQueue<E extends Delayed>

An unbounded blocking queue of
 Delayed elements, in which an element can only be taken
 when its delay has expired.

DelegationPermission

This class is used to restrict the usage of the Kerberos
 delegation model, ie: forwardable and proxiable tickets.

Deprecated

A program element annotated @Deprecated is one that programmers
 are discouraged from using.

DeprecatedTree

A tree node for an @deprecated block tag.

Deque<E>

A linear collection that supports element insertion and removal at
 both ends.

Description

Annotation that describes an element by using a sentence or two.

Descriptor

Additional metadata for a JMX element.

DescriptorAccess

This interface is used to gain access to descriptors of the Descriptor class
 which are associated with a JMX component, i.e.

DescriptorKey

Meta-annotation that describes how an annotation element relates
 to a field in a Descriptor.

DescriptorRead

Interface to read the Descriptor of a management interface element
 such as an MBeanInfo.

DescriptorSupport

This class represents the metadata set for a ModelMBean element.

DESedeKeySpec

This class specifies a DES-EDE ("triple-DES") key.

DesignMode


 This interface is intended to be implemented by, or delegated from, instances
 of java.beans.beancontext.BeanContext, in order to propagate to its nested hierarchy
 of java.beans.beancontext.BeanContextChild instances, the current "designTime" property.

DESKeySpec

This class specifies a DES key.

Desktop

The Desktop class allows interact with various desktop capabilities.

Desktop.Action

Represents an action type.

DesktopIconUI

Pluggable look and feel interface for JDesktopIcon.

DesktopManager

DesktopManager objects are owned by a JDesktopPane object.

DesktopPaneUI

Pluggable look and feel interface for JDesktopPane.

Destination

Class Destination is a printing attribute class, a URI, that
 is used to indicate an alternate destination for the spooled printer
 formatted data.

Destroyable

Objects such as credentials may optionally implement this interface
 to provide the capability to destroy its contents.

DestroyFailedException

Signals that a destroy operation failed.

DGC

The DGC abstraction is used for the server side of the distributed
 garbage collection algorithm.

DHGenParameterSpec

This class specifies the set of parameters used for generating
 Diffie-Hellman (system) parameters for use in Diffie-Hellman key
 agreement.

DHKey

The interface to a Diffie-Hellman key.

DHParameterSpec

This class specifies the set of parameters used with the Diffie-Hellman
 algorithm, as specified in PKCS #3: Diffie-Hellman Key-Agreement
 Standard.

DHPrivateKey

The interface to a Diffie-Hellman private key.

DHPrivateKeySpec

This class specifies a Diffie-Hellman private key with its associated
 parameters.

DHPublicKey

The interface to a Diffie-Hellman public key.

DHPublicKeySpec

This class specifies a Diffie-Hellman public key with its associated
 parameters.

Diag

Diagnostic information for a Snippet.

Diagnostic<S>

Interface for diagnostics from tools.

Diagnostic.Kind

Kinds of diagnostics, for example, error or warning.

DiagnosticCollector<S>

Provides an easy way to collect diagnostics in a list.

DiagnosticCommandMBean

Management interface for the diagnostic commands for the HotSpot Virtual Machine.

DiagnosticListener<S>

Interface for receiving diagnostics from tools.

Dialog

A Dialog is a top-level window with a title and a border
 that is typically used to take some form of input from the user.

Dialog.ModalExclusionType

Any top-level window can be marked not to be blocked by modal
 dialogs.

Dialog.ModalityType

Modal dialogs block all input to some top-level windows.

DialogOwner

An attribute class used to support requesting a print or page setup dialog
 be kept displayed on top of all windows or some specific window.

DialogTypeSelection

Class DialogTypeSelection is a printing attribute class, an
 enumeration, that indicates the user dialog type to be used for specifying
 printing options.

Dictionary<K,V>

The Dictionary class is the abstract parent of any
 class, such as Hashtable, which maps keys to values.

DigestException

This is the generic Message Digest exception.

DigestInputStream

A transparent stream that updates the associated message digest using
 the bits going through the stream.

DigestMethod

A representation of the XML DigestMethod element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

DigestMethodParameterSpec

A specification of algorithm parameters for a DigestMethod
 algorithm.

DigestOutputStream

A transparent stream that updates the associated message digest using
 the bits going through the stream.

Dimension

The Dimension class encapsulates the width and
 height of a component (in integer precision) in a single object.

Dimension2D

The Dimension2D class is to encapsulate a width
 and a height dimension.

DimensionUIResource

A subclass of Dimension that implements
 UIResource.

DirContext

The directory service interface, containing
 methods for examining and updating attributes
 associated with objects, and for searching the directory.

DirectColorModel

The DirectColorModel class is a ColorModel
 class that works with pixel values that represent RGB
 color and alpha information as separate samples and that pack all
 samples for a single pixel into a single int, short, or byte quantity.

DirectExecutionControl

An ExecutionControl implementation that runs in the current process.

DirectiveTree

A super-type for all the directives in a ModuleTree.

DirectMethodHandleDesc

A nominal descriptor for a direct
 MethodHandle.

DirectMethodHandleDesc.Kind

Kinds of method handles that can be described with DirectMethodHandleDesc.

DirectoryIteratorException

Runtime exception thrown if an I/O error is encountered when iterating over
 the entries in a directory.

DirectoryManager

This class contains methods for supporting DirContext
 implementations.

DirectoryNotEmptyException

Checked exception thrown when a file system operation fails because a
 directory is not empty.

DirectoryStream<T>

An object to iterate over the entries in a directory.

DirectoryStream.Filter<T>

An interface that is implemented by objects that decide if a directory
 entry should be accepted or filtered.

DirObjectFactory

This interface represents a factory for creating an object given
 an object and attributes about the object.

DirStateFactory

This interface represents a factory for obtaining the state of an
 object and corresponding attributes for binding.

DirStateFactory.Result

An object/attributes pair for returning the result of
 DirStateFactory.getStateToBind().

DisplayMode

The DisplayMode class encapsulates the bit depth, height,
 width, and refresh rate of a GraphicsDevice.

DnDConstants

This class contains constant values representing
 the type of action(s) to be performed by a Drag and Drop operation.

Doc

Interface Doc specifies the interface for an object that supplies one
 piece of print data for a Print Job.

DocAttribute

Interface DocAttribute is a tagging interface which a printing
 attribute class implements to indicate the attribute denotes a setting for a
 doc.

DocAttributeSet

Interface DocAttributeSet specifies the interface for a set of doc
 attributes, i.e. printing attributes that implement interface
 DocAttribute.

DocCommentTree

The top-level representation of a documentation comment.

DocFlavor

Class DocFlavor encapsulates an object that specifies the format in
 which print data is supplied to a DocPrintJob.

DocFlavor.BYTE_ARRAY

Class DocFlavor.BYTE_ARRAY provides predefined static constant
 DocFlavor objects for example doc flavors using a byte array
 (byte[]) as the print data representation class.

DocFlavor.CHAR_ARRAY

Class DocFlavor.CHAR_ARRAY provides predefined static constant
 DocFlavor objects for example doc flavors using a character array
 (char[]) as the print data representation class.

DocFlavor.INPUT_STREAM

Class DocFlavor.INPUT_STREAM provides predefined static constant
 DocFlavor objects for example doc flavors using a byte stream
 (java.io.InputStream) as the print data
 representation class.

DocFlavor.READER

Class DocFlavor.READER provides predefined static constant
 DocFlavor objects for example doc flavors using a character
 stream (java.io.Reader) as the print data
 representation class.

DocFlavor.SERVICE_FORMATTED

Class DocFlavor.SERVICE_FORMATTED provides predefined static
 constant DocFlavor objects for example doc flavors for service
 formatted print data.

DocFlavor.STRING

Class DocFlavor.STRING provides predefined static constant
 DocFlavor objects for example doc flavors using a string
 (java.lang.String) as the print data representation class.

DocFlavor.URL

Class DocFlavor.URL provides predefined static constant
 DocFlavor objects.

Doclet

The user doclet must implement this interface, as described in the
 package description.

Doclet.Option

An encapsulation of option name, aliases, parameters and descriptions
 as used by the Doclet.

Doclet.Option.Kind

The kind of an option.

DocletEnvironment

Represents the operating environment of a single invocation
 of the doclet.

DocletEnvironment.ModuleMode

The mode specifying the level of detail of module documentation.

DocPrintJob

This interface represents a print job that can print a specified document
 with a set of job attributes.

DocRootTree

A tree node for an @docRoot inline tag.

DocSourcePositions

Provides methods to obtain the position of a DocTree within a javadoc comment.

DocTree

Common interface for all nodes in a documentation syntax tree.

DocTree.Kind

Enumerates all kinds of trees.

DocTreeFactory

Factory for creating DocTree nodes.

DocTreePath

A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level DocCommentTree node.

DocTreePathScanner<R,P>

A DocTreeVisitor that visits all the child tree nodes, and provides
 support for maintaining a path for the parent nodes.

DocTrees

Provides access to syntax trees for doc comments.

DocTreeScanner<R,P>

A DocTreeVisitor that visits all the child tree nodes.

DocTreeVisitor<R,P>

A visitor of trees, in the style of the visitor design pattern.

DocTypeTree

A tree node for a doctype declaration.

Document


 The Document is a container for text that serves
 as the model for swing text components.

Document

The Document interface represents the entire HTML or XML
 document.

DocumentationTool

Interface to invoke Java programming language documentation tools from
 programs.

DocumentationTool.DocumentationTask

Interface representing a future for a documentation task.

DocumentationTool.Location

Locations specific to DocumentationTool.

DocumentBuilder

Defines the API to obtain DOM Document instances from an XML
 document.

DocumentBuilderFactory

Defines a factory API that enables applications to obtain a
 parser that produces DOM object trees from XML documents.

DocumentCSS

This interface represents a document with a CSS view.

Documented

If the annotation @Documented is present on the declaration
 of an annotation interface A, then any @A annotation on
 an element is considered part of the element's public contract.

DocumentEvent

Interface for document change notifications.

DocumentEvent

The DocumentEvent interface provides a mechanism by which the
 user can create an Event of a type supported by the implementation.

DocumentEvent.ElementChange

Describes changes made to a specific element.

DocumentEvent.EventType

Enumeration for document event types

DocumentFilter

DocumentFilter, as the name implies, is a filter for the
 Document mutation methods.

DocumentFilter.FilterBypass

Used as a way to circumvent calling back into the Document to
 change it.

DocumentFragment

DocumentFragment is a "lightweight" or "minimal"
 Document object.

DocumentHandler
Deprecated.
This interface has been replaced by the SAX2
             ContentHandler
             interface, which includes Namespace support.

DocumentListener

Interface for an observer to register to receive notifications
 of changes to a text document.

DocumentName

Class DocumentName is a printing attribute class, a text attribute,
 that specifies the name of a document.

DocumentParser

A Parser for HTML Documents (actually, you can specify a DTD, but
 you should really only use this class with the html dtd in swing).

DocumentRange

See also the Document Object Model (DOM) Level 2 Traversal and Range Specification.

DocumentStyle

The DocumentStyle interface provides a mechanism by which the
 style sheets embedded in a document can be retrieved.

DocumentTraversal

DocumentTraversal contains methods that create
 NodeIterators and TreeWalkers to traverse a
 node and its children in document order (depth first, pre-order
 traversal, which is equivalent to the order in which the start tags occur
 in the text representation of the document).

DocumentType

Each Document has a doctype attribute whose value
 is either null or a DocumentType object.

DocumentView

The DocumentView interface is implemented by
 Document objects in DOM implementations supporting DOM
 Views.

DomainCombiner
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

DomainLoadStoreParameter

Configuration data that specifies the keystores in a keystore domain.

DOMConfiguration

The DOMConfiguration interface represents the configuration
 of a document and maintains a table of recognized parameters.

DOMCryptoContext

This class provides a DOM-specific implementation of the
 XMLCryptoContext interface.

DOMError

DOMError is an interface that describes an error.

DOMErrorHandler

DOMErrorHandler is a callback interface that the DOM
 implementation can call when reporting errors that happens while
 processing XML data, or when doing some other processing (e.g. validating
 a document).

DOMException

DOM operations only raise exceptions in "exceptional" circumstances, i.e.,
 when an operation is impossible to perform (either for logical reasons,
 because data is lost, or because the implementation has become unstable).

DOMImplementation

The DOMImplementation interface provides a number of methods
 for performing operations that are independent of any particular instance
 of the document object model.

DOMImplementationCSS

This interface allows the DOM user to create a CSSStyleSheet
 outside the context of a document.

DOMImplementationList

The DOMImplementationList interface provides the abstraction
 of an ordered collection of DOM implementations, without defining or
 constraining how this collection is implemented.

DOMImplementationLS

DOMImplementationLS contains the factory methods for creating
 Load and Save objects.

DOMImplementationRegistry

A factory that enables applications to obtain instances of
 DOMImplementation.

DOMImplementationSource

This interface permits a DOM implementer to supply one or more
 implementations, based upon requested features and versions, as specified
 in DOM
 Features.

DOMLocator

Indicates the position of a node in a source DOM, intended
 primarily for error reporting.

DOMLocator

DOMLocator is an interface that describes a location (e.g.

DOMResult

Acts as a holder for a transformation result tree
 in the form of a Document Object Model (DOM) tree.

DOMSignContext

A DOM-specific XMLSignContext.

DOMSource

Acts as a holder for a transformation Source tree in the
 form of a Document Object Model (DOM) tree.

DOMStringList

The DOMStringList interface provides the abstraction of an
 ordered collection of DOMString values, without defining or
 constraining how this collection is implemented.

DOMStructure

A DOM-specific XMLStructure.

DOMURIReference

A DOM-specific URIReference.

DOMValidateContext

A DOM-specific XMLValidateContext.

DosFileAttributes

File attributes associated with a file in a file system that supports
 legacy "DOS" attributes.

DosFileAttributeView

A file attribute view that provides a view of the legacy "DOS" file attributes.

Double

The Double class wraps a value of the primitive type
 double in an object.

DoubleAccumulator

One or more variables that together maintain a running double
 value updated using a supplied function.

DoubleAdder

One or more variables that together maintain an initially zero
 double sum.

DoubleBinaryOperator

Represents an operation upon two double-valued operands and producing a
 double-valued result.

DoubleBuffer

A double buffer.

DoubleConsumer

Represents an operation that accepts a single double-valued argument and
 returns no result.

DoubleFunction<R>

Represents a function that accepts a double-valued argument and produces a
 result.

DoublePredicate

Represents a predicate (boolean-valued function) of one double-valued
 argument.

DoubleStream

A sequence of primitive double-valued elements supporting sequential and parallel
 aggregate operations.

DoubleStream.Builder

A mutable builder for a DoubleStream.

DoubleStream.DoubleMapMultiConsumer

Represents an operation that accepts a double-valued argument
 and a DoubleConsumer, and returns no result.

DoubleSummaryStatistics

A state object for collecting statistics such as count, min, max, sum, and
 average.

DoubleSupplier

Represents a supplier of double-valued results.

DoubleToIntFunction

Represents a function that accepts a double-valued argument and produces an
 int-valued result.

DoubleToLongFunction

Represents a function that accepts a double-valued argument and produces a
 long-valued result.

DoubleType

The type of all primitive double values accessed in
 the target VM.

DoubleUnaryOperator

Represents an operation on a single double-valued operand that produces
 a double-valued result.

DoubleValue

Provides access to a primitive double value in
 the target VM.

DoubleVector

A specialized Vector representing an ordered immutable sequence of
 double values.

DoWhileLoopTree

A tree node for a do statement.

DragGestureEvent

A DragGestureEvent is passed
 to DragGestureListener's
 dragGestureRecognized() method
 when a particular DragGestureRecognizer detects that a
 platform dependent drag initiating gesture has occurred
 on the Component that it is tracking.

DragGestureListener

The listener interface for receiving drag gesture events.

DragGestureRecognizer

The DragGestureRecognizer is an
 abstract base class for the specification
 of a platform-dependent listener that can be associated with a particular
 Component in order to
 identify platform-dependent drag initiating gestures.

DragSource

The DragSource is the entity responsible
 for the initiation of the Drag
 and Drop operation, and may be used in a number of scenarios:
 
 1 default instance per JVM for the lifetime of that JVM.

DragSourceAdapter

An abstract adapter class for receiving drag source events.

DragSourceContext

The DragSourceContext class is responsible for managing the
 initiator side of the Drag and Drop protocol.

DragSourceDragEvent

The DragSourceDragEvent is
 delivered from the DragSourceContextPeer,
 via the DragSourceContext, to the DragSourceListener
 registered with that DragSourceContext and with its associated
 DragSource.

DragSourceDropEvent

The DragSourceDropEvent is delivered
 from the DragSourceContextPeer,
 via the DragSourceContext, to the dragDropEnd
 method of DragSourceListeners registered with that
 DragSourceContext and with its associated
 DragSource.

DragSourceEvent

This class is the base class for
 DragSourceDragEvent and
 DragSourceDropEvent.

DragSourceListener

The DragSourceListener defines the
 event interface for originators of
 Drag and Drop operations to track the state of the user's gesture, and to
 provide appropriate "drag over"
 feedback to the user throughout the
 Drag and Drop operation.

DragSourceMotionListener

A listener interface for receiving mouse motion events during a drag
 operation.

DrbgParameters

This class specifies the parameters used by a DRBG (Deterministic
 Random Bit Generator).

DrbgParameters.Capability

The reseedable and prediction resistance capabilities of a DRBG.

DrbgParameters.Instantiation

DRBG parameters for instantiation.

DrbgParameters.NextBytes

DRBG parameters for random bits generation.

DrbgParameters.Reseed

DRBG parameters for reseed.

Driver

The interface that every driver class must implement.

DriverAction

An interface that must be implemented when a Driver wants to be
 notified by DriverManager.

DriverManager

The basic service for managing a set of JDBC drivers.

DriverPropertyInfo

Driver properties for making a connection.

DropMode

Drop modes, used to determine the method by which a component
 tracks and indicates a drop location during drag and drop.

DropTarget

The DropTarget is associated
 with a Component when that Component
 wishes
 to accept drops during Drag and Drop operations.

DropTarget.DropTargetAutoScroller

this protected nested class implements autoscrolling

DropTargetAdapter

An abstract adapter class for receiving drop target events.

DropTargetContext

A DropTargetContext is created
 whenever the logical cursor associated
 with a Drag and Drop operation coincides with the visible geometry of
 a Component associated with a DropTarget.

DropTargetDragEvent

The DropTargetDragEvent is delivered to a
 DropTargetListener via its
 dragEnter() and dragOver() methods.

DropTargetDropEvent

The DropTargetDropEvent is delivered
 via the DropTargetListener drop() method.

DropTargetEvent

The DropTargetEvent is the base
 class for both the DropTargetDragEvent
 and the DropTargetDropEvent.

DropTargetListener

The DropTargetListener interface
 is the callback interface used by the
 DropTarget class to provide
 notification of DnD operations that involve
 the subject DropTarget.

DSAGenParameterSpec

This immutable class specifies the set of parameters used for
 generating DSA parameters as specified in
 FIPS 186-3 Digital Signature Standard (DSS).

DSAKey

The interface to a DSA public or private key.

DSAKeyPairGenerator

An interface to an object capable of generating DSA key pairs.

DSAParameterSpec

This class specifies the set of parameters used with the DSA algorithm.

DSAParams

Interface to a DSA-specific set of key parameters, which defines a
 DSA key family.

DSAPrivateKey

The standard interface to a DSA private key.

DSAPrivateKeySpec

This class specifies a DSA private key with its associated parameters.

DSAPublicKey

The interface to a DSA public key.

DSAPublicKeySpec

This class specifies a DSA public key with its associated parameters.

DTD

The representation of an SGML DTD.

DTD

This is the top level interface for events dealing with DTDs

DTDConstants

SGML constants used in a DTD.

DTDHandler

Receive notification of basic DTD-related events.

DuplicateFormatFlagsException

Unchecked exception thrown when duplicate flags are provided in the format
 specifier.

DuplicateRequestException

Thrown to indicate a duplicate event request.

Duration

A time-based amount of time, such as '34.5 seconds'.

Duration

Immutable representation of a time span as defined in
 the W3C XML Schema 1.0 specification.

DynamicCallSiteDesc

A nominal descriptor for an
 invokedynamic call site.

DynamicConstantDesc<T>

A nominal descriptor for a
 dynamic constant (one described in the constant pool with
 Constant_Dynamic_info.)

DynamicLinker

The linker for RelinkableCallSite objects.

DynamicLinkerFactory

A factory class for creating DynamicLinker objects.

DynamicMBean

Defines the methods that should be implemented by
 a Dynamic MBean (MBean that exposes a dynamic management interface).

ECField

This interface represents an elliptic curve (EC) finite field.

ECFieldF2m

This immutable class defines an elliptic curve (EC)
 characteristic 2 finite field.

ECFieldFp

This immutable class defines an elliptic curve (EC) prime
 finite field.

ECGenParameterSpec

This immutable class specifies the set of parameters used for
 generating elliptic curve (EC) domain parameters.

ECKey

The interface to an elliptic curve (EC) key.

ECParameterSpec

This immutable class specifies the set of domain parameters
 used with elliptic curve cryptography (ECC).

ECPoint

This immutable class represents a point on an elliptic curve (EC)
 in affine coordinates.

ECPrivateKey

The interface to an elliptic curve (EC) private key.

ECPrivateKeySpec

This immutable class specifies an elliptic curve private key with
 its associated parameters.

ECPublicKey

The interface to an elliptic curve (EC) public key.

ECPublicKeySpec

This immutable class specifies an elliptic curve public key with
 its associated parameters.

EdDSAParameterSpec

A class used to specify EdDSA signature and verification parameters.

EdECKey

An interface for an elliptic curve public/private key as defined by
 RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA).

EdECPoint

An elliptic curve point used to specify keys as defined by
 RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA).

EdECPrivateKey

An interface for an elliptic curve private key as defined by
 RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA).

EdECPrivateKeySpec

A class representing elliptic curve private keys as defined in
 RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA), including the curve and other
 algorithm parameters.

EdECPublicKey

An interface for an elliptic curve public key as defined by
 RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA).

EdECPublicKeySpec

A class representing elliptic curve public keys as defined in
 RFC 8032: Edwards-Curve
 Digital Signature Algorithm (EdDSA), including the curve and other
 algorithm parameters.

EditorKit

Establishes the set of things needed by a text component
 to be a reasonably functioning editor for some type
 of text content.

Element

Represents a program element such as a module, package, class, or method.

Element

Interface to describe a structural piece of a document.

Element

An element as described in a DTD using the ELEMENT construct.

Element

The Element interface represents an element in an HTML or XML
 document.

ElementCSSInlineStyle

Inline style information attached to elements is exposed through the
 style attribute.

ElementFilter

Filters for selecting just the elements of interest from a
 collection of elements.

ElementIterator

ElementIterator, as the name suggests, iterates over the
 Element tree.

ElementKind

The kind of an element.

ElementKindVisitor14<R,P>

A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_14 source version.

ElementKindVisitor6<R,P>

A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_6 source version.

ElementKindVisitor7<R,P>

A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_7 source version.

ElementKindVisitor8<R,P>

A visitor of program elements based on their kind with default behavior appropriate for the RELEASE_8 source version.

ElementKindVisitor9<R,P>

A visitor of program elements based on their kind with default behavior appropriate for source
 versions RELEASE_9 through RELEASE_14.

Elements

Utility methods for operating on program elements.

Elements.Origin

The origin of an element or other language model
 item.

ElementScanner14<R,P>

A scanning visitor of program elements with default behavior
 appropriate for the RELEASE_14
 source version.

ElementScanner6<R,P>

A scanning visitor of program elements with default behavior
 appropriate for the RELEASE_6
 source version.

ElementScanner7<R,P>

A scanning visitor of program elements with default behavior
 appropriate for the RELEASE_7
 source version.

ElementScanner8<R,P>

A scanning visitor of program elements with default behavior
 appropriate for the RELEASE_8
 source version.

ElementScanner9<R,P>

A scanning visitor of program elements with default behavior
 appropriate for source versions RELEASE_9 through RELEASE_14.

ElementTraversal

The ElementTraversal interface is a set of read-only attributes
 which allow an author to easily navigate between elements in a document.

ElementType

The constants of this enumerated class provide a simple classification of the
 syntactic locations where annotations may appear in a Java program.

ElementVisitor<R,P>

A visitor of program elements, in the style of the visitor design
 pattern.

Ellipse2D

The Ellipse2D class describes an ellipse that is defined
 by a framing rectangle.

Ellipse2D.Double

The Double class defines an ellipse specified
 in double precision.

Ellipse2D.Float

The Float class defines an ellipse specified
 in float precision.

EllipticCurve

This immutable class holds the necessary values needed to represent
 an elliptic curve.

EmptyBorder

A class which provides an empty, transparent border which
 takes up space but does no drawing.

EmptyStackException

Thrown by methods in the Stack class to indicate
 that the stack is empty.

EmptyStatementTree

A tree node for an empty (skip) statement.

Enabled

Event annotation, determines if an event should be enabled by default.

EncodedKeySpec

This class represents a public or private key in encoded format.

Encoder

An Encoder is a class which can be used to create
 files or streams that encode the state of a collection of
 JavaBeans in terms of their public APIs.

EncryptedPrivateKeyInfo

This class implements the EncryptedPrivateKeyInfo type
 as defined in PKCS #8.

EncryptionKey

This class encapsulates an EncryptionKey used in Kerberos.

EndDocument

A marker interface for the end of the document

EndElement

An interface for the end element event.

EndElementTree

A tree node for the end of an HTML element.

EnhancedForLoopTree

A tree node for an "enhanced" for loop statement.

Entity

An entity is described in a DTD using the ENTITY construct.

Entity

This interface represents a known entity, either parsed or unparsed, in an
 XML document.

EntityDeclaration

An interface for handling Entity Declarations

 This interface is used to record and report unparsed entity declarations.

EntityReference

An interface for handling Entity events.

EntityReference

EntityReference nodes may be used to represent an entity
 reference in the tree.

EntityResolver

Basic interface for resolving entities.

EntityResolver2

Extended interface for mapping external entity references to input
 sources, or providing a missing external subset.

EntityTree

A tree node for an HTML entity.

Enum<E extends Enum<E>>

This is the common base class of all Java language enumeration classes.

Enum.EnumDesc<E extends Enum<E>>

A nominal descriptor for an
 enum constant.

EnumConstantNotPresentException

Thrown when an application tries to access an enum constant by name
 and the enum type contains no constant with the specified name.

EnumControl

An EnumControl provides control over a set of discrete possible
 values, each represented by an object.

EnumControl.Type

An instance of the EnumControl.Type inner class identifies one
 kind of enumerated control.

Enumeration<E>

An object that implements the Enumeration interface generates a
 series of elements, one at a time.

EnumMap<K extends Enum<K>,V>

A specialized Map implementation for use with enum type keys.

EnumSet<E extends Enum<E>>

A specialized Set implementation for use with enum types.

EnumSyntax

Class EnumSyntax is an abstract base class providing the common
 implementation of all "type safe enumeration" objects.

EOFException

Signals that an end of file or end of stream has been reached
 unexpectedly during input.

Era

An era of the time-line.

ErroneousSnippet

A snippet of code that is not valid Java programming language code.

ErroneousTree

A tree node to stand in for malformed text.

ErroneousTree

A tree node to stand in for a malformed expression.

Error

An Error is a subclass of Throwable
 that indicates serious problems that a reasonable application
 should not try to catch.

ErrorHandler

Basic interface for SAX error handlers.

ErrorListener

The listener interface used by a TransformerFactory or Transformer
 to notify callers of error messages that occur during a transformation process.

ErrorManager

ErrorManager objects can be attached to Handlers to process
 any error that occurs on a Handler during Logging.

ErrorType

Represents a class or interface type that cannot be properly modeled.

EtchedBorder

A class which implements a simple etched border which can
 either be etched-in or etched-out.

EvalException

Wraps an throwable thrown in the executing client.

Event

An occurrence in a target VM that is of interest to a debugger.

Event
Deprecated.
It is recommended that AWTEvent and its subclasses be
             used instead

Event

Base class for events, to be subclassed in order to define events and their
 fields.

Event

The Event interface is used to provide contextual information
 about an event to the handler processing the event.

EventContext

Contains methods for registering/deregistering listeners to be notified of
 events fired when objects named in a context changes.

EventDirContext

Contains methods for registering listeners to be notified
 of events fired when objects named in a directory context changes.

EventException

Event operations may throw an EventException as specified in
 their method descriptions.

EventFactory

Class for defining an event at runtime.

EventFilter

This interface declares a simple filter interface that one can
 create to filter XMLEventReaders

EventHandler

The EventHandler class provides
 support for dynamically generating event listeners whose methods
 execute a simple statement involving an incoming event object
 and a target object.

EventID

EventID contains integer constants that map to event support in
 AWT and Swing.

EventIterator

EventIterators are unmodifiable.

EventListener

A tagging interface that all event listener interfaces must extend.

EventListener

The EventListener interface is the primary method for
 handling events.

EventListenerList

A class that holds a list of EventListeners.

EventListenerProxy<T extends EventListener>

An abstract wrapper class for an EventListener class
 which associates a set of additional parameters with the listener.

EventObject


 The root class from which all event state objects shall be derived.

EventQueue

Manager of incoming debugger events for a target VM.

EventQueue

EventQueue is a platform-independent class
 that queues events, both from the underlying peer classes
 and from trusted application classes.

EventQueueMonitor

The EventQueueMonitor class provides key core functionality for Assistive
 Technologies (and other system-level technologies that need some of the same
 things that Assistive Technology needs).

EventReaderDelegate

This is the base class for deriving an XMLEventReader
 filter.

EventRequest

Represents a request for notification of an event.

EventRequestManager

Manages the creation and deletion of EventRequests.

EventSet

Several Event objects may be created at a given time by
 the target VirtualMachine.

EventSetDescriptor

An EventSetDescriptor describes a group of events that a given Java
 bean fires.

EventSettings

Convenience class for applying event settings to a recording.

EventStream

Represents a stream of events.

EventTarget

The EventTarget interface is implemented by all
 Nodes in an implementation which supports the DOM Event
 Model.

EventType

Describes an event, its fields, settings and annotations.

EventTypeInfo

Management representation of an EventType.

ExcC14NParameterSpec

Parameters for the W3C Recommendation:
 
 Exclusive XML Canonicalization (C14N) algorithm.

Exception

The class Exception and its subclasses are a form of
 Throwable that indicates conditions that a reasonable
 application might want to catch.

ExceptionEvent

Notification of an exception in the target VM.

ExceptionInInitializerError

Signals that an unexpected exception has occurred in a static initializer.

ExceptionListener

An ExceptionListener is notified of internal exceptions.

ExceptionRequest

Request for notification when an exception occurs in the target VM.

Exchanger<V>

A synchronization point at which threads can pair and swap elements
 within pairs.

Executable

A shared superclass for the common functionality of Method
 and Constructor.

ExecutableElement

Represents a method, constructor, or initializer (static or
 instance) of a class or interface, including annotation type
 elements.

ExecutableType

Represents the type of an executable.

ExecutionControl

This interface specifies the functionality that must provided to implement a
 pluggable JShell execution engine.

ExecutionControl.ClassBytecodes

Bundles class name with class bytecodes.

ExecutionControl.ClassInstallException

A class install (load or redefine) encountered a problem.

ExecutionControl.EngineTerminationException

Unbidden execution engine termination has occurred.

ExecutionControl.ExecutionControlException

The abstract base of all ExecutionControl exceptions.

ExecutionControl.InternalException

An internal problem has occurred.

ExecutionControl.NotImplementedException

The command is not implemented.

ExecutionControl.ResolutionException

An exception indicating that a DeclarationSnippet with unresolved
 references has been encountered.

ExecutionControl.RunException

The abstract base of of exceptions specific to running user code.

ExecutionControl.StoppedException

An exception indicating that an
 ExecutionControl.invoke(java.lang.String, java.lang.String)
 (or theoretically a
 ExecutionControl.varValue(java.lang.String, java.lang.String))
 has been interrupted by a ExecutionControl.stop().

ExecutionControl.UserException

A 'normal' user exception occurred.

ExecutionControlProvider

The provider used by JShell to generate the execution engine needed to
 evaluate Snippets.

ExecutionEnv

Functionality made available to a pluggable JShell execution engine.

ExecutionException

Exception thrown when attempting to retrieve the result of a task
 that aborted by throwing an exception.

Executor

An object that executes submitted Runnable tasks.

ExecutorCompletionService<V>

A CompletionService that uses a supplied Executor
 to execute tasks.

Executors

Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this
 package.

ExecutorService

An Executor that provides methods to manage termination and
 methods that can produce a Future for tracking progress of
 one or more asynchronous tasks.

ExemptionMechanism

This class provides the functionality of an exemption mechanism, examples
 of which are key recovery, key weakening, and
 key escrow.

ExemptionMechanismException

This is the generic ExemptionMechanism exception.

ExemptionMechanismSpi

This class defines the Service Provider Interface (SPI)
 for the ExemptionMechanism class.

ExifGPSTagSet

A class representing the tags found in an Exif GPS Info IFD.

ExifInteroperabilityTagSet

A class representing the tags found in an Exif Interoperability IFD.

ExifParentTIFFTagSet

A class containing the TIFF tags used to reference the Exif and GPS IFDs.

ExifTIFFTagSet

A class representing the tags found in an Exif IFD.

ExpandVetoException

Exception used to stop an expand/collapse from happening.

Experimental

Annotation that specifies that an element is experimental and may change
 without notice.

ExportException

An ExportException is a RemoteException
 thrown if an attempt to export a remote object fails.

ExportsTree

A tree node for an 'exports' directive in a module declaration.

Expression

An Expression object represents a primitive expression
 in which a single method is applied to a target and a set of
 arguments to return a result - as in "a.getFoo()".

ExpressionSnippet

Snippet for an assignment or variable-value expression.

ExpressionStatementTree

A tree node for an expression statement.

ExpressionTree

A tree node used as the base class for the different types of
 expressions.

ExtendedGSSContext

The extended GSSContext interface for supporting additional
 functionalities not defined by org.ietf.jgss.GSSContext,
 such as querying context-specific attributes.

ExtendedGSSCredential

The extended GSSCredential interface for supporting additional
 functionalities not defined by org.ietf.jgss.GSSCredential.

ExtendedMapMode

JDK-specific map modes.

ExtendedRequest

This interface represents an LDAPv3 extended operation request as defined in
 RFC 2251.

ExtendedResponse

This interface represents an LDAP extended operation response as defined in
 RFC 2251.

ExtendedSocketOptions

Defines extended socket options, beyond those defined in
 StandardSocketOptions.

ExtendedSSLSession

Extends the SSLSession interface to support additional
 session attributes.

Extension

This interface represents an X.509 extension.

Externalizable

Only the identity of the class of an Externalizable instance is
 written in the serialization stream and it is the responsibility
 of the class to save and restore the contents of its instances.

FactoryConfigurationError

Thrown when a problem with configuration with the Parser Factories
 exists.

FactoryConfigurationError

An error class for reporting factory configuration errors.

FailedLoginException

Signals that user authentication failed.

FailOverExecutionControlProvider

Tries other providers in sequence until one works.

FaxTIFFTagSet

A class representing the extra tags found in a
 TIFF-F (RFC 2036) file.

FeatureDescriptor

The FeatureDescriptor class is the common baseclass for PropertyDescriptor,
 EventSetDescriptor, and MethodDescriptor, etc.

Fidelity

Class Fidelity is a printing attribute class, an enumeration, that
 indicates whether total fidelity to client supplied print request attributes
 is required.

Field

A class or instance variable in the target VM.

Field

A Field provides information about, and dynamic access to, a
 single field of a class or an interface.

FieldPosition

FieldPosition is a simple class used by Format
 and its subclasses to identify fields in formatted output.

FieldView

Extends the multi-line plain text view to be suitable
 for a single-line editor view.

File

An abstract representation of file and directory pathnames.

FileAlreadyExistsException

Checked exception thrown when an attempt is made to create a file or
 directory and a file of that name already exists.

FileAttribute<T>

An object that encapsulates the value of a file attribute that can be set
 atomically when creating a new file or directory by invoking the createFile or createDirectory methods.

FileAttributeView

An attribute view that is a read-only or updatable view of non-opaque
 values associated with a file in a filesystem.

FileCacheImageInputStream

An implementation of ImageInputStream that gets its
 input from a regular InputStream.

FileCacheImageOutputStream

An implementation of ImageOutputStream that writes its
 output to a regular OutputStream.

FileChannel

A channel for reading, writing, mapping, and manipulating a file.

FileChannel.MapMode

A file-mapping mode.

FileChooserUI

Pluggable look and feel interface for JFileChooser.

FileDescriptor

Instances of the file descriptor class serve as an opaque handle
 to the underlying machine-specific structure representing an open
 file, an open socket, or another source or sink of bytes.

FileDialog

The FileDialog class displays a dialog window
 from which the user can select a file.

FileFilter

A filter for abstract pathnames.

FileFilter

FileFilter is an abstract class used by JFileChooser
 for filtering the set of files shown to the user.

FileHandler

Simple file logging Handler.

FileImageInputStream

An implementation of ImageInputStream that gets its
 input from a File or RandomAccessFile.

FileImageOutputStream

An implementation of ImageOutputStream that writes its
 output directly to a File or
 RandomAccessFile.

FileInputStream

A FileInputStream obtains input bytes
 from a file in a file system.

FileLock

A token representing a lock on a region of a file.

FileLockInterruptionException

Checked exception received by a thread when another thread interrupts it
 while it is waiting to acquire a file lock.

FileNameExtensionFilter

An implementation of FileFilter that filters using a
 specified set of extensions.

FilenameFilter

Instances of classes that implement this interface are used to
 filter filenames.

FileNameMap

A simple interface which provides a mechanism to map
 between a file name and a MIME type string.

FileNotFoundException

Signals that an attempt to open the file denoted by a specified pathname
 has failed.

FileObject

File abstraction for tools.

FileOutputStream

A file output stream is an output stream for writing data to a
 File or to a FileDescriptor.

FileOwnerAttributeView

A file attribute view that supports reading or updating the owner of a file.

FilePermission

This class represents access to a file or directory.

Filer

This interface supports the creation of new files by an annotation
 processor.

FileReader

Reads text from character files using a default buffer size.

FilerException

Indicates a Filer detected an attempt to open a file that
 would violate the guarantees provided by the Filer.

Files

This class consists exclusively of static methods that operate on files,
 directories, or other types of files.

FilesEvent

Auxiliary event containing a list of files.

FileStore

Storage for files.

FileStoreAttributeView

An attribute view that is a read-only or updatable view of the attributes of
 a FileStore.

FileSystem

Provides an interface to a file system and is the factory for objects to
 access files and other objects in the file system.

FileSystemAlreadyExistsException

Runtime exception thrown when an attempt is made to create a file system that
 already exists.

FileSystemException

Thrown when a file system operation fails on one or two files.

FileSystemLoopException

Checked exception thrown when a file system loop, or cycle, is encountered.

FileSystemNotFoundException

Runtime exception thrown when a file system cannot be found.

FileSystemProvider

Service-provider class for file systems.

FileSystems

Factory methods for file systems.

FileSystemView

FileSystemView is JFileChooser's gateway to the
 file system.

FileTime

Represents the value of a file's time stamp attribute.

FileTypeDetector

A file type detector for probing a file to guess its file type.

FileView

FileView defines an abstract class that can be implemented
 to provide the filechooser with UI information for a File.

FileVisitOption

Defines the file tree traversal options.

FileVisitor<T>

A visitor of files.

FileVisitResult

The result type of a FileVisitor.

FileWriter

Writes text to character files using a default buffer size.

Filter

A filter used to pre- and post-process incoming requests.

Filter

A Filter can be used to provide fine grain control over
 what is logged, beyond the control provided by log levels.

Filter.Chain

A chain of filters associated with a HttpServer.

FilteredImageSource

This class is an implementation of the ImageProducer interface which
 takes an existing image and a filter object and uses them to produce
 image data for a new filtered version of the original image.

FilteredRowSet

The standard interface that all standard implementations of
 FilteredRowSet must implement.

FilterInputStream

A FilterInputStream contains
 some other input stream, which it uses as
 its  basic source of data, possibly transforming
 the data along the way or providing  additional
 functionality.

FilterOutputStream

This class is the superclass of all classes that filter output
 streams.

FilterReader

Abstract class for reading filtered character streams.

FilterWriter

Abstract class for writing filtered character streams.

FindException

Thrown by a ModuleFinder when an error occurs finding
 a module.

Finishings

Class Finishings is a printing attribute class, an enumeration, that
 identifies whether the printer applies a finishing operation of some kind of
 binding to each copy of each printed document in the job.

FixedHeightLayoutCache

NOTE: This will become more open in a future release.

FlatteningPathIterator

The FlatteningPathIterator class returns a flattened view of
 another PathIterator object.

FlavorEvent

FlavorEvent is used to notify interested parties that available
 DataFlavors have changed in the Clipboard (the event source).

FlavorException

Interface FlavorException is a mixin interface which a subclass of
 PrintException can implement to report an error
 condition involving a doc flavor or flavors (class DocFlavor).

FlavorListener

Defines an object which listens for FlavorEvents.

FlavorMap

A two-way Map between "natives" (Strings), which correspond to
 platform-specific data formats, and "flavors" (DataFlavors), which correspond
 to platform-independent MIME types.

FlavorTable

A FlavorMap which relaxes the traditional 1-to-1 restriction of a Map.

FlightRecorder

Class for accessing, controlling, and managing Flight Recorder.

FlightRecorderListener

Callback interface to monitor Flight Recorder's life cycle.

FlightRecorderMXBean

Management interface for controlling Flight Recorder.

FlightRecorderPermission

Permission for controlling access to Flight Recorder.

Float

The Float class wraps a value of primitive type
 float in an object.

FloatBuffer

A float buffer.

FloatControl

A FloatControl object provides control over a range of floating-point
 values.

FloatControl.Type

An instance of the FloatControl.Type inner class identifies one
 kind of float control.

FloatType

The type of all primitive float values accessed in
 the target VM.

FloatValue

Provides access to a primitive float value in
 the target VM.

FloatVector

A specialized Vector representing an ordered immutable sequence of
 float values.

Flow

Interrelated interfaces and static methods for establishing
 flow-controlled components in which Publishers
 produce items consumed by one or more Subscribers, each managed by a Subscription.

Flow.Processor<T,R>

A component that acts as both a Subscriber and Publisher.

Flow.Publisher<T>

A producer of items (and related control messages) received by
 Subscribers.

Flow.Subscriber<T>

A receiver of messages.

Flow.Subscription

Message control linking a Flow.Publisher and Flow.Subscriber.

FlowLayout

A flow layout arranges components in a directional flow, much
 like lines of text in a paragraph.

FlowView

A View that tries to flow it's children into some
 partially constrained space.

FlowView.FlowStrategy

Strategy for maintaining the physical form
 of the flow.

Flushable

A Flushable is a destination of data that can be flushed.

FocusAdapter

An abstract adapter class for receiving keyboard focus events.

FocusEvent

A low-level event which indicates that a Component has gained or lost the
 input focus.

FocusEvent.Cause

This enum represents the cause of a FocusEvent- the reason why it
 occurred.

FocusListener

The listener interface for receiving keyboard focus events on
 a component.

FocusManager

This class has been obsoleted by the 1.4 focus APIs.

FocusTraversalPolicy

A FocusTraversalPolicy defines the order in which Components with a
 particular focus cycle root are traversed.

Font

The Font class represents fonts, which are used to
 render text in a visible way.

FontFormatException

Thrown by method createFont in the Font class to indicate
 that the specified font is bad.

FontMetrics

The FontMetrics class defines a font metrics object, which
 encapsulates information about the rendering of a particular font on a
 particular screen.

FontRenderContext

The FontRenderContext class is a container for the
   information needed to correctly measure text.

FontUIResource

A subclass of java.awt.Font that implements UIResource.

ForkJoinPool

An ExecutorService for running ForkJoinTasks.

ForkJoinPool.ForkJoinWorkerThreadFactory

Factory for creating new ForkJoinWorkerThreads.

ForkJoinPool.ManagedBlocker

Interface for extending managed parallelism for tasks running
 in ForkJoinPools.

ForkJoinTask<V>

Abstract base class for tasks that run within a ForkJoinPool.

ForkJoinWorkerThread

A thread managed by a ForkJoinPool, which executes
 ForkJoinTasks.

ForLoopTree

A tree node for a basic for loop statement.

Format

Format is an abstract base class for formatting locale-sensitive
 information such as dates, messages, and numbers.

Format.Field

Defines constants that are used as attribute keys in the
 AttributedCharacterIterator returned
 from Format.formatToCharacterIterator and as
 field identifiers in FieldPosition.

FormatConversionProvider

A format conversion provider provides format conversion services from one or
 more input formats to one or more output formats.

FormatFlagsConversionMismatchException

Unchecked exception thrown when a conversion and flag are incompatible.

FormatStyle

Enumeration of the style of a localized date, time or date-time formatter.

Formattable

The Formattable interface must be implemented by any class that
 needs to perform custom formatting using the 's' conversion
 specifier of Formatter.

FormattableFlags

FormattableFlags are passed to the Formattable.formatTo() method and modify the output format for Formattables.

Formatter

An interpreter for printf-style format strings.

Formatter

A Formatter provides support for formatting LogRecords.

Formatter.BigDecimalLayoutForm

Enum for BigDecimal formatting.

FormatterClosedException

Unchecked exception thrown when the formatter has been closed.

FormSubmitEvent

FormSubmitEvent is used to notify interested
 parties that a form was submitted.

FormSubmitEvent.MethodType

Represents an HTML form method type.

FormView

Component decorator that implements the view interface
 for form elements, <input>, <textarea>,
 and <select>.

ForwardingFileObject<F extends FileObject>

Forwards calls to a given file object.

ForwardingJavaFileManager<M extends JavaFileManager>

Forwards calls to a given file manager.

ForwardingJavaFileObject<F extends JavaFileObject>

Forwards calls to a given file object.

Frame

A Frame is a top-level window with a title and a border.

Frequency

Event field annotation, specifies that the value is a frequency, measured in Hz.

Function<T,R>

Represents a function that accepts one argument and produces a result.

FunctionalInterface

An informative annotation type used to indicate that an interface
 type declaration is intended to be a functional interface as
 defined by the Java Language Specification.

FunctionDescriptor

A function descriptor is made up of zero or more argument layouts and zero or one return layout.

Future<V>

A Future represents the result of an asynchronous
 computation.

FutureTask<V>

A cancellable asynchronous computation.

GapContent

An implementation of the AbstractDocument.Content interface
 implemented using a gapped buffer similar to that used by emacs.

GarbageCollectionNotificationInfo

The information about a garbage collection

GarbageCollectorMXBean

Platform-specific management interface for a garbage collector
 which performs collections in cycles.

GarbageCollectorMXBean

The management interface for the garbage collection of
 the Java virtual machine.

GatheringByteChannel

A channel that can write bytes from a sequence of buffers.

GaugeMonitor

Defines a monitor MBean designed to observe the values of a gauge attribute.

GaugeMonitorMBean

Exposes the remote management interface of the gauge monitor MBean.

GcInfo

Garbage collection information.

GCMParameterSpec

Specifies the set of parameters required by a Cipher using the Galois/Counter Mode (GCM) mode.

GeneralPath

The GeneralPath class represents a geometric path
 constructed from straight lines, and quadratic and cubic
 (Bézier) curves.

GeneralSecurityException

The GeneralSecurityException class is a generic
 security exception class that provides type safety for all the
 security-related exception classes that extend from it.

Generated

The Generated annotation is used to mark source code that has been generated.

GenericArrayType

GenericArrayType represents an array type whose component
 type is either a parameterized type or a type variable.

GenericDeclaration

A common interface for all entities that declare type variables.

GenericSignatureFormatError

Thrown when a syntactically malformed signature attribute is
 encountered by a reflective method that needs to interpret the generic
 signature information for a class or interface, method or constructor.

GeoTIFFTagSet

A class representing the tags found in a GeoTIFF IFD.

GlyphJustificationInfo

The GlyphJustificationInfo class represents information
 about the justification properties of a glyph.

GlyphMetrics

The GlyphMetrics class represents information for a
 single glyph.

GlyphVector

A GlyphVector object is a collection of glyphs
 containing geometric information for the placement of each glyph
 in a transformed coordinate space which corresponds to the
 device on which the GlyphVector is ultimately
 displayed.

GlyphView

A GlyphView is a styled chunk of text that represents a view
 mapped over an element in the text model.

GlyphView.GlyphPainter

A class to perform rendering of the glyphs.

GradientPaint

The GradientPaint class provides a way to fill
 a Shape with a linear color gradient pattern.

GraphicAttribute

This class is used with the CHAR_REPLACEMENT attribute.

Graphics

The Graphics class is the abstract base class for
 all graphics contexts that allow an application to draw onto
 components that are realized on various devices, as well as
 onto off-screen images.

Graphics2D

This Graphics2D class extends the
 Graphics class to provide more sophisticated
 control over geometry, coordinate transformations, color management,
 and text layout.

GraphicsConfigTemplate

The GraphicsConfigTemplate class is used to obtain a valid
 GraphicsConfiguration.

GraphicsConfiguration

The GraphicsConfiguration class describes the
 characteristics of a graphics destination such as a printer or monitor.

GraphicsDevice

The GraphicsDevice class describes the graphics devices
 that might be available in a particular graphics environment.

GraphicsDevice.WindowTranslucency

Kinds of translucency supported by the underlying system.

GraphicsEnvironment

The GraphicsEnvironment class describes the collection
 of GraphicsDevice objects and Font objects
 available to a Java(tm) application on a particular platform.

GrayFilter

An image filter that "disables" an image by turning
 it into a grayscale image, and brightening the pixels
 in the image.

GregorianCalendar

GregorianCalendar is a concrete subclass of
 Calendar and provides the standard calendar system
 used by most of the world.

GridBagConstraints

The GridBagConstraints class specifies constraints
 for components that are laid out using the
 GridBagLayout class.

GridBagLayout

The GridBagLayout class is a flexible layout
 manager that aligns components vertically, horizontally or along their
 baseline without requiring that the components be of the same size.

GridBagLayoutInfo

The GridBagLayoutInfo is an utility class for
 GridBagLayout layout manager.

GridLayout

The GridLayout class is a layout manager that
 lays out a container's components in a rectangular grid.

GroupLayout

GroupLayout is a LayoutManager that hierarchically
 groups components in order to position them in a Container.

GroupLayout

A group layout is used to combine together multiple member layouts.

GroupLayout.Alignment

Enumeration of the possible ways ParallelGroup can align
 its children.

GroupPrincipal

A UserPrincipal representing a group identity, used to
 determine access rights to objects in a file system.

GSSContext

This interface encapsulates the GSS-API security context and provides
 the security services that are available over the context.

GSSCredential

This interface encapsulates the GSS-API credentials for an entity.

GSSException

This exception is thrown whenever a GSS-API error occurs, including
 any mechanism specific error.

GSSManager

This class serves as a factory for other important
 GSS-API classes and also provides information about the mechanisms that
 are supported.

GSSName

This interface encapsulates a single GSS-API principal entity.

GSSUtil

GSS-API Utilities for using in conjunction with Sun Microsystem's
 implementation of Java GSS-API.

Guard

 This interface represents a guard, which is an object that is used
 to protect access to another object.

GuardedInvocation

Represents a conditionally valid method handle.

GuardedInvocationTransformer

Interface for objects that are used to transform one guarded invocation into
 another one.

GuardedObject

A GuardedObject is an object that is used to protect access to
 another object.

GuardedPatternTreePREVIEW
Preview.
A guard pattern tree.

GuardingDynamicLinker

The base interface for language-specific dynamic linkers.

GuardingDynamicLinkerExporter

A class acting as a supplier of guarding dynamic linkers that can be
 automatically loaded by other language runtimes.

GuardingTypeConverterFactory

Optional interface that can be implemented by GuardingDynamicLinker
 implementations to provide language-specific type conversion capabilities.

Guards

Utility methods for creating typical guards for
 MethodHandles.guardWithTest(MethodHandle, MethodHandle, MethodHandle)
 and for adjusting their method types.

GUIInitializedListener

The GUIInitializedListener interface is used by the EventQueueMonitor
 class to notify an interested party when the GUI subsystem has been
 initialized.

GZIPInputStream

This class implements a stream filter for reading compressed data in
 the GZIP file format.

GZIPOutputStream

This class implements a stream filter for writing compressed data in
 the GZIP file format.

Handler

A Handler object takes log messages from a Logger and
 exports them.

HandlerBase
Deprecated.
This class works with the deprecated
             DocumentHandler
             interface.

HandlerResult

Defines notification handler results.

HandshakeCompletedEvent

This event indicates that an SSL handshake completed on a given
 SSL connection.

HandshakeCompletedListener

This interface is implemented by any class which wants to receive
 notifications about the completion of an SSL protocol handshake
 on a given SSL connection.

HasControls

This interface is for returning controls with objects returned
 in NamingEnumerations.

HashAttributeSet

Class HashAttributeSet provides an AttributeSet
 implementation with characteristics of a hash map.

HashDocAttributeSet

Class HashDocAttributeSet provides an attribute set which inherits
 its implementation from class HashAttributeSet and
 enforces the semantic restrictions of interface
 DocAttributeSet.

HashMap<K,V>

Hash table based implementation of the Map interface.

HashPrintJobAttributeSet

Class HashPrintJobAttributeSet provides an attribute set which
 inherits its implementation from class
 HashAttributeSet and enforces the semantic
 restrictions of interface PrintJobAttributeSet.

HashPrintRequestAttributeSet

Class HashPrintRequestAttributeSet inherits its implementation from
 class HashAttributeSet and enforces the semantic
 restrictions of interface
 PrintRequestAttributeSet.

HashPrintServiceAttributeSet

Class HashPrintServiceAttributeSet provides an attribute set which
 inherits its implementation from class
 HashAttributeSet and enforces the semantic
 restrictions of interface
 PrintServiceAttributeSet.

HashSet<E>

This class implements the Set interface, backed by a hash table
 (actually a HashMap instance).

Hashtable<K,V>

This class implements a hash table, which maps keys to values.

Headers

HTTP request and response headers are represented by this class which
 implements the interface
 Map<String,
 List <String>>.

HeadlessException

Thrown when code that is dependent on a keyboard, display, or mouse
 is called in an environment that does not support a keyboard, display,
 or mouse.

HexFormat

HexFormat converts between bytes and chars and hex-encoded strings which may include
 additional formatting markup such as prefixes, suffixes, and delimiters.

HiddenTree

A tree node for an @hidden block tag.

HierarchyBoundsAdapter

An abstract adapter class for receiving ancestor moved and resized events.

HierarchyBoundsListener

The listener interface for receiving ancestor moved and resized events.

HierarchyEvent

An event which indicates a change to the Component
 hierarchy to which Component belongs.

HierarchyListener

The listener interface for receiving hierarchy changed events.

Highlighter

An interface for an object that allows one to mark up the background
 with colored areas.

Highlighter.Highlight

A highlight.

Highlighter.HighlightPainter

Highlight renderer.

HijrahChronology

The Hijrah calendar is a lunar calendar supporting Islamic calendars.

HijrahDate

A date in the Hijrah calendar system.

HijrahEra

An era in the Hijrah calendar system.

HMACParameterSpec

Parameters for the 
 XML Signature HMAC Algorithm.

HostnameVerifier

This class is the base interface for hostname verification.

HotSpotDiagnosticMXBean

Diagnostic management interface for the HotSpot Virtual Machine.

HTML

Constants used in the HTMLDocument.

HTML.Attribute

Typesafe enumeration representing an HTML
 attribute.

HTML.Tag

Typesafe enumeration for an HTML tag.

HTML.UnknownTag

Class represents unknown HTML tag.

HTMLAnchorElement

The anchor element.

HTMLAppletElement

An embedded Java applet.

HTMLAreaElement

Client-side image map area definition.

HTMLBaseElement

Document base URI.

HTMLBaseFontElement

Base font.

HTMLBodyElement

The HTML document body.

HTMLBRElement

Force a line break.

HTMLButtonElement

Push button.

HTMLCollection

An HTMLCollection is a list of nodes.

HTMLDirectoryElement

Directory list.

HTMLDivElement

Generic block container.

HTMLDListElement

Definition list.

HTMLDocument

A document that models HTML.

HTMLDocument

An HTMLDocument is the root of the HTML hierarchy and holds
 the entire content.

HTMLDocument.Iterator

An iterator to iterate over a particular type of
 tag.

HTMLDOMImplementation

The HTMLDOMImplementation interface extends the
 DOMImplementation interface with a method for creating an
 HTML document instance.

HTMLEditorKit

The Swing JEditorPane text component supports different kinds
 of content via a plug-in mechanism called an EditorKit.

HTMLEditorKit.HTMLFactory

A factory to build views for HTML.

HTMLEditorKit.HTMLTextAction

An abstract Action providing some convenience methods that may
 be useful in inserting HTML into an existing document.

HTMLEditorKit.InsertHTMLTextAction

InsertHTMLTextAction can be used to insert an arbitrary string of HTML
 into an existing HTML document.

HTMLEditorKit.LinkController

Class to watch the associated component and fire
 hyperlink events on it when appropriate.

HTMLEditorKit.Parser

Interface to be supported by the parser.

HTMLEditorKit.ParserCallback

The result of parsing drives these callback methods.

HTMLElement

All HTML element interfaces derive from this class.

HTMLFieldSetElement

Organizes form controls into logical groups.

HTMLFontElement

Local change to font.

HTMLFormElement

The FORM element encompasses behavior similar to a collection
 and an element.

HTMLFrameElement

Create a frame.

HTMLFrameHyperlinkEvent

HTMLFrameHyperlinkEvent is used to notify interested
 parties that link was activated in a frame.

HTMLFrameSetElement

Create a grid of frames.

HTMLHeadElement

Document head information.

HTMLHeadingElement

For the H1 to H6 elements.

HTMLHRElement

Create a horizontal rule.

HTMLHtmlElement

Root of an HTML document.

HTMLIFrameElement

Inline subwindows.

HTMLImageElement

Embedded image.

HTMLInputElement

Form control.

HTMLIsIndexElement

This element is used for single-line text input.

HTMLLabelElement

Form field label text.

HTMLLegendElement

Provides a caption for a FIELDSET grouping.

HTMLLIElement

List item.

HTMLLinkElement

The LINK element specifies a link to an external resource,
 and defines this document's relationship to that resource (or vice versa).

HTMLMapElement

Client-side image map.

HTMLMenuElement

Menu list.

HTMLMetaElement

This contains generic meta-information about the document.

HTMLModElement

Notice of modification to part of a document.

HTMLObjectElement

Generic embedded object.

HTMLOListElement

Ordered list.

HTMLOptGroupElement

Group options together in logical subdivisions.

HTMLOptionElement

A selectable choice.

HTMLParagraphElement

Paragraphs.

HTMLParamElement

Parameters fed to the OBJECT element.

HTMLPreElement

Preformatted text.

HTMLQuoteElement

For the Q and BLOCKQUOTE elements.

HTMLScriptElement

Script statements.

HTMLSelectElement

The select element allows the selection of an option.

HTMLStyleElement

Style information.

HTMLTableCaptionElement

Table caption See the  CAPTION element definition in HTML 4.0.

HTMLTableCellElement

The object used to represent the TH and TD
 elements.

HTMLTableColElement

Regroups the COL and COLGROUP elements.

HTMLTableElement

The create* and delete* methods on the table allow authors to construct
 and modify tables.

HTMLTableRowElement

A row in a table.

HTMLTableSectionElement

The THEAD , TFOOT , and TBODY
 elements.

HTMLTextAreaElement

Multi-line text field.

HTMLTitleElement

The document title.

HTMLUListElement

Unordered list.

HTMLWriter

This is a writer for HTMLDocuments.

HttpClient

An HTTP Client.

HttpClient.Builder

A builder of HTTP Clients.

HttpClient.Redirect

Defines the automatic redirection policy.

HttpClient.Version

The HTTP protocol version.

HttpConnectTimeoutException

Thrown when a connection, over which an HttpRequest is intended to be
 sent, is not successfully established within a specified time period.

HttpContext

HttpContext represents a mapping between the root URI
 path of an application to a HttpHandler which is invoked to handle
 requests destined for that path on the associated HttpServer or
 HttpsServer.

HttpCookie

An HttpCookie object represents an HTTP cookie, which carries state
 information between server and user agent.

HttpExchange

This class encapsulates a HTTP request received and a
 response to be generated in one exchange.

HttpHandler

A handler which is invoked to process HTTP exchanges.

HttpHeaders

A read-only view of a set of HTTP headers.

HttpPrincipal

Represents a user authenticated by HTTP Basic or Digest
 authentication.

HttpRequest

An HTTP request.

HttpRequest.BodyPublisher

A BodyPublisher converts high-level Java objects into a flow of
 byte buffers suitable for sending as a request body.

HttpRequest.BodyPublishers

Implementations of BodyPublisher that implement
 various useful publishers, such as publishing the request body from a
 String, or from a file.

HttpRequest.Builder

A builder of HTTP requests.

HttpResponse<T>

An HTTP response.

HttpResponse.BodyHandler<T>

A handler for response bodies.

HttpResponse.BodyHandlers

Implementations of BodyHandler that implement various
 useful handlers, such as handling the response body as a String, or
 streaming the response body to a file.

HttpResponse.BodySubscriber<T>

A BodySubscriber consumes response body bytes and converts them
 into a higher-level Java type.

HttpResponse.BodySubscribers

Implementations of BodySubscriber that implement
 various useful subscribers, such as converting the response body bytes
 into a String, or streaming the bytes to a file.

HttpResponse.PushPromiseHandler<T>

A handler for push promises.

HttpResponse.ResponseInfo

Initial response information supplied to a BodyHandler
 when a response is initially received and before the body is processed.

HttpRetryException

Thrown to indicate that a HTTP request needs to be retried
 but cannot be retried automatically, due to streaming mode
 being enabled.

HttpsConfigurator

This class is used to configure the https parameters for each incoming
 https connection on a HttpsServer.

HttpServer

This class implements a simple HTTP server.

HttpServerProvider

Service provider class for HttpServer.

HttpsExchange

This class encapsulates a HTTPS request received and a response to be
 generated in one exchange and defines the extensions to HttpExchange
 that are specific to the HTTPS protocol.

HttpsParameters

Represents the set of parameters for each https connection negotiated with
 clients.

HttpsServer

This class is an extension of HttpServer which provides support for
 HTTPS.

HttpsURLConnection

HttpsURLConnection extends HttpURLConnection
 with support for https-specific features.

HttpTimeoutException

Thrown when a response is not received within a specified time period.

HttpURLConnection

A URLConnection with support for HTTP-specific features.

HyperlinkEvent

HyperlinkEvent is used to notify interested parties that
 something has happened with respect to a hypertext link.

HyperlinkEvent.EventType

Defines the ENTERED, EXITED, and ACTIVATED event types, along
 with their string representations, returned by toString().

HyperlinkListener

HyperlinkListener

ICC_ColorSpace

The ICC_ColorSpace class is an implementation of the abstract
 ColorSpace class.

ICC_Profile

A representation of color profile data for device independent and device
 dependent color spaces based on the International Color Consortium
 Specification ICC.1:2001-12, File Format for Color Profiles, (see
  http://www.color.org).

ICC_ProfileGray

The ICC_ProfileGray class is a subclass of the ICC_Profile
 class that represents profiles which meet the following criteria: the color
 space type of the profile is TYPE_GRAY and the profile includes the
 grayTRCTag and mediaWhitePointTag tags.

ICC_ProfileRGB

The ICC_ProfileRGB class is a subclass of the ICC_Profile
 class that represents profiles which meet the following criteria: the
 profile's color space type is RGB, and the profile includes the
 redColorantTag, greenColorantTag, blueColorantTag,
 redTRCTag, greenTRCTag, blueTRCTag,
 mediaWhitePointTag tags.

Icon

A small fixed size picture, typically used to decorate components.

IconUIResource

An Icon wrapper class which implements UIResource.

IconView

Icon decorator that implements the view interface.

IdentifierTree

An identifier in a documentation comment.

IdentifierTree

A tree node for an identifier expression.

Identity
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE.

IdentityHashMap<K,V>

This class implements the Map interface with a hash table, using
 reference-equality in place of object-equality when comparing keys (and
 values).

IdentityScope
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE.

IDN

Provides methods to convert internationalized domain names (IDNs) between
 a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.

IfTree

A tree node for an if statement.

IIOByteBuffer

A class representing a mutable reference to an array of bytes and
 an offset and length within that array.

IIOException

An exception class used for signaling run-time failure of reading
 and writing operations.

IIOImage

A simple container class to aggregate an image, a set of
 thumbnail (preview) images, and an object representing metadata
 associated with the image.

IIOInvalidTreeException

An IIOInvalidTreeException is thrown when an attempt
 by an IIOMetadata object to parse a tree of
 IIOMetadataNodes fails.

IIOMetadata

An abstract class to be extended by objects that represent metadata
 (non-image data) associated with images and streams.

IIOMetadataController

An interface to be implemented by objects that can determine the
 settings of an IIOMetadata object, either by putting
 up a GUI to obtain values from a user, or by other means.

IIOMetadataFormat

An object describing the structure of metadata documents returned
 from IIOMetadata.getAsTree and passed to
 IIOMetadata.setFromTree and mergeTree.

IIOMetadataFormatImpl

A concrete class providing a reusable implementation of the
 IIOMetadataFormat interface.

IIOMetadataNode

A class representing a node in a meta-data tree, which implements
 the org.w3c.dom.Element interface and additionally allows
 for the storage of non-textual objects via the
 getUserObject and setUserObject methods.

IIOParam

A superclass of all classes describing how streams should be
 decoded or encoded.

IIOParamController

An interface to be implemented by objects that can determine the
 settings of an IIOParam object, either by putting up a
 GUI to obtain values from a user, or by other means.

IIOReadProgressListener

An interface used by ImageReader implementations to
 notify callers of their image and thumbnail reading methods of
 progress.

IIOReadUpdateListener

An interface used by ImageReader implementations to
 notify callers of their image and thumbnail reading methods of
 pixel updates.

IIOReadWarningListener

An interface used by ImageReader implementations to
 notify callers of their image and thumbnail reading methods of
 warnings (non-fatal errors).

IIORegistry

A registry for Image I/O service provider instances.

IIOServiceProvider

A superinterface for functionality common to all Image I/O service
 provider interfaces (SPIs).

IIOWriteProgressListener

An interface used by ImageWriter implementations to notify
 callers of their image writing methods of progress.

IIOWriteWarningListener

An interface used by ImageWriter implementations to
 notify callers of their image and thumbnail reading methods of
 warnings (non-fatal errors).

IllegalAccessError

Thrown if an application attempts to access or modify a field, or
 to call a method that it does not have access to.

IllegalAccessException

An IllegalAccessException is thrown when an application tries
 to reflectively create an instance (other than an array),
 set or get a field, or invoke a method, but the currently
 executing method does not have access to the definition of
 the specified class, field, method or constructor.

IllegalArgumentException

Thrown to indicate that a method has been passed an illegal or
 inappropriate argument.

IllegalBlockingModeException

Unchecked exception thrown when a blocking-mode-specific operation
 is invoked upon a channel in the incorrect blocking mode.

IllegalBlockSizeException

This exception is thrown when the length of data provided to a block
 cipher is incorrect, i.e., does not match the block size of the cipher.

IllegalCallerException

Thrown to indicate that a method has been called by an inappropriate caller.

IllegalChannelGroupException

Unchecked exception thrown when an attempt is made to open a channel
 in a group that was not created by the same provider.

IllegalCharsetNameException

Unchecked exception thrown when a string that is not a
 legal charset name is used as such.

IllegalClassFormatException

Thrown by an implementation of
 ClassFileTransformer.transform
 when its input parameters are invalid.

IllegalComponentStateException

Signals that an AWT component is not in an appropriate state for
 the requested operation.

IllegalConnectorArgumentsException

Thrown to indicate an invalid argument or
 inconsistent passed to a Connector.

IllegalFormatCodePointException

Unchecked exception thrown when a character with an invalid Unicode code
 point as defined by Character.isValidCodePoint(int) is passed to the
 Formatter.

IllegalFormatConversionException

Unchecked exception thrown when the argument corresponding to the format
 specifier is of an incompatible type.

IllegalFormatException

Unchecked exception thrown when a format string contains an illegal syntax
 or a format specifier that is incompatible with the given arguments.

IllegalFormatFlagsException

Unchecked exception thrown when an illegal combination flags is given.

IllegalFormatPrecisionException

Unchecked exception thrown when the precision is a negative value other than
 -1, the conversion does not support a precision, or the value is
 otherwise unsupported.

IllegalFormatWidthException

Unchecked exception thrown when the format width is a negative value other
 than -1 or is otherwise unsupported.

IllegalMonitorStateException

Thrown to indicate that a thread has attempted to wait on an
 object's monitor or to notify other threads waiting on an object's
 monitor without owning the specified monitor.

IllegalPathStateException

The IllegalPathStateException represents an
 exception that is thrown if an operation is performed on a path
 that is in an illegal state with respect to the particular
 operation being performed, such as appending a path segment
 to a GeneralPath without an initial moveto.

IllegalReceiveException

Unchecked exception thrown when an attempt is made to invoke the
 receive method of SctpChannel or SctpMultiChannel
 from a notification handler.

IllegalSelectorException

Unchecked exception thrown when an attempt is made to register a channel
 with a selector that was not created by the provider that created the
 channel.

IllegalStateException

Signals that a method has been invoked at an illegal or
 inappropriate time.

IllegalThreadStateException

Thrown to indicate that a thread is not in an appropriate state
 for the requested operation.

IllegalUnbindException

Unchecked exception thrown when an attempt is made to remove an
 address that is not bound to the channel, or remove an address from a
 channel that has only one address bound to it.

IllformedLocaleException

Thrown by methods in Locale and Locale.Builder to
 indicate that an argument is not a well-formed BCP 47 tag.

Image

The abstract class Image is the superclass of all
 classes that represent graphical images.

ImageCapabilities

Capabilities and properties of images.

ImageConsumer

The interface for objects expressing interest in image data through
 the ImageProducer interfaces.

ImageFilter

This class implements a filter for the set of interface methods that
 are used to deliver data from an ImageProducer to an ImageConsumer.

ImageGraphicAttribute

The ImageGraphicAttribute class is an implementation of
 GraphicAttribute which draws images in
 a TextLayout.

ImageIcon

An implementation of the Icon interface that paints Icons
 from Images.

ImageInputStream

A seekable input stream interface for use by
 ImageReaders.

ImageInputStreamImpl

An abstract class implementing the ImageInputStream interface.

ImageInputStreamSpi

The service provider interface (SPI) for
 ImageInputStreams.

ImageIO

A class containing static convenience methods for locating
 ImageReaders and ImageWriters, and
 performing simple encoding and decoding.

ImageObserver

An asynchronous update interface for receiving notifications about
 Image information as the Image is constructed.

ImageOutputStream

A seekable output stream interface for use by
 ImageWriters.

ImageOutputStreamImpl

An abstract class implementing the ImageOutputStream interface.

ImageOutputStreamSpi

The service provider interface (SPI) for
 ImageOutputStreams.

ImageProducer

The interface for objects which can produce the image data for Images.

ImageReader

An abstract superclass for parsing and decoding of images.

ImageReaderSpi

The service provider interface (SPI) for ImageReaders.

ImageReaderWriterSpi

A superclass containing instance variables and methods common to
 ImageReaderSpi and ImageWriterSpi.

ImageReadParam

A class describing how a stream is to be decoded.

ImageTranscoder

An interface providing metadata transcoding capability.

ImageTranscoderSpi

The service provider interface (SPI) for ImageTranscoders.

ImageTypeSpecifier

A class that allows the format of an image (in particular, its
 SampleModel and ColorModel) to be
 specified in a convenient manner.

ImageView

View of an Image, intended to support the HTML <IMG> tag.

ImageWriteParam

A class describing how a stream is to be encoded.

ImageWriter

An abstract superclass for encoding and writing images.

ImageWriterSpi

The service provider interface (SPI) for ImageWriters.

ImagingOpException

The ImagingOpException is thrown if one of the
 BufferedImageOp or RasterOp filter methods cannot
 process the image.

ImmutableDescriptor

An immutable descriptor.

ImportSnippet

Snippet for an import declaration.

ImportTree

A tree node for an import declaration.

InaccessibleObjectException

Thrown when Java language access checks cannot be suppressed.

IncompatibleClassChangeError

Thrown when an incompatible class change has occurred to some class
 definition.

IncompatibleThreadStateException

Thrown to indicate that the requested operation cannot be
 completed while the specified thread is in its current state.

IncompleteAnnotationException

Thrown to indicate that a program has attempted to access an element of
 an annotation interface that was added to the annotation interface definition
 after the annotation was compiled (or serialized).

InconsistentDebugInfoException

Thrown to indicate that there is an inconistency in the debug
 information provided by the target VM.

IndexColorModel

The IndexColorModel class is a ColorModel
 class that works with pixel values consisting of a
 single sample that is an index into a fixed colormap in the default
 sRGB color space.

IndexedPropertyChangeEvent

An "IndexedPropertyChange" event gets delivered whenever a component that
 conforms to the JavaBeans specification (a "bean") changes a bound
 indexed property.

IndexedPropertyDescriptor

An IndexedPropertyDescriptor describes a property that acts like an
 array and has an indexed read and/or indexed write method to access
 specific elements of the array.

IndexOutOfBoundsException

Thrown to indicate that an index of some sort (such as to an array, to a
 string, or to a vector) is out of range.

IndexTree

A tree node for an @index inline tag.

Inet4Address

This class represents an Internet Protocol version 4 (IPv4) address.

Inet6Address

This class represents an Internet Protocol version 6 (IPv6) address.

InetAddress

This class represents an Internet Protocol (IP) address.

InetSocketAddress

This class implements an IP Socket Address (IP address + port number)
 It can also be a pair (hostname + port number), in which case an attempt
 will be made to resolve the hostname.

Inflater

This class provides support for general purpose decompression using the
 popular ZLIB compression library.

InflaterInputStream

This class implements a stream filter for uncompressing data in the
 "deflate" compression format.

InflaterOutputStream

Implements an output stream filter for uncompressing data stored in the
 "deflate" compression format.

InheritableThreadLocal<T>

This class extends ThreadLocal to provide inheritance of values
 from parent thread to child thread: when a child thread is created, the
 child receives initial values for all inheritable thread-local variables
 for which the parent has values.

InheritDocTree

A tree node for an @inheritDoc inline tag.

Inherited

Indicates that an annotation interface is automatically inherited.

InitialContext

This class is the starting context for performing naming operations.

InitialContextFactory

This interface represents a factory that creates an initial context.

InitialContextFactoryBuilder

This interface represents a builder that creates initial context factories.

InitialDirContext

This class is the starting context for performing
 directory operations.

InitialLdapContext

This class is the starting context for performing
 LDAPv3-style extended operations and controls.

InlineTagTree

A tree node used as the base class for the different types of
 inline tags.

InlineView

Displays the inline element styles
 based upon css attributes.

InputContext

Provides methods to control text input facilities such as input
 methods and keyboard layouts.

InputEvent

The root event class for all component-level input events.

InputMap

InputMap provides a binding between an input event (currently only
 KeyStrokes are used) and an Object.

InputMapUIResource

A subclass of javax.swing.InputMap that implements UIResource.

InputMethod

Defines the interface for an input method that supports complex text input.

InputMethodContext

Provides methods that input methods
 can use to communicate with their client components or to request
 other services.

InputMethodDescriptor

Defines methods that provide sufficient information about an input method
 to enable selection and loading of that input method.

InputMethodEvent

Input method events contain information about text that is being
 composed using an input method.

InputMethodHighlight

An InputMethodHighlight is used to describe the highlight
 attributes of text being composed.

InputMethodListener

The listener interface for receiving input method events.

InputMethodRequests

InputMethodRequests defines the requests that a text editing component
 has to handle in order to work with input methods.

InputMismatchException

Thrown by a Scanner to indicate that the token
 retrieved does not match the pattern for the expected type, or
 that the token is out of range for the expected type.

InputSource

A single input source for an XML entity.

InputStream

This abstract class is the superclass of all classes representing
 an input stream of bytes.

InputStreamReader

An InputStreamReader is a bridge from byte streams to character streams: It
 reads bytes and decodes them into characters using a specified charset.

InputSubset

Defines additional Unicode subsets for use by input methods.

InputVerifier

This class provides the validation mechanism for Swing components.

InquireSecContextPermission

This class is used to protect various attributes of an established
 GSS security context that can be accessed using the
 ExtendedGSSContext.inquireSecContext(com.sun.security.jgss.InquireType)
 method.

InquireType

Attribute types that can be specified as an argument of
 ExtendedGSSContext.inquireSecContext(com.sun.security.jgss.InquireType)

Insets

An Insets object is a representation of the borders
 of a container.

InsetsUIResource

A subclass of Insets that implements UIResource.

InstanceAlreadyExistsException

The MBean is already registered in the repository.

InstanceNotFoundException

The specified MBean does not exist in the repository.

InstanceOfTree

A tree node for an instanceof expression.

Instant

An instantaneous point on the time-line.

InstantiationError

Thrown when an application tries to use the Java new
 construct to instantiate an abstract class or an interface.

InstantiationException

Thrown when an application tries to create an instance of a class
 using the newInstance method in class
 Class, but the specified class object cannot be
 instantiated.

InstantSource

Provides access to the current instant.

Instrument

An instrument is a sound-synthesis algorithm with certain parameter settings,
 usually designed to emulate a specific real-world musical instrument or to
 achieve a specific sort of sound effect.

Instrumentation

This class provides services needed to instrument Java
 programming language code.

InsufficientResourcesException

This exception is thrown when resources are not available to complete
 the requested operation.

IntBinaryOperator

Represents an operation upon two int-valued operands and producing an
 int-valued result.

IntBuffer

An int buffer.

IntConsumer

Represents an operation that accepts a single int-valued argument and
 returns no result.

Integer

The Integer class wraps a value of the primitive type
 int in an object.

IntegerSyntax

Class IntegerSyntax is an abstract base class providing the common
 implementation of all attributes with integer values.

IntegerType

The type of all primitive int values
 accessed in the target VM.

IntegerValue

Provides access to a primitive int value in
 the target VM.

InterfaceAddress

This class represents a Network Interface address.

InterfaceType

A mirror of an interface in the target VM.

InternalError

Thrown to indicate some unexpected internal error has occurred in
 the Java Virtual Machine.

InternalException

Thrown to indicate that an unexpected internal error has
 occurred.

InternalFrameAdapter

An abstract adapter class for receiving internal frame events.

InternalFrameEvent

An AWTEvent that adds support for
 JInternalFrame objects as the event source.

InternalFrameFocusTraversalPolicy

A FocusTraversalPolicy which can optionally provide an algorithm for
 determining a JInternalFrame's initial Component.

InternalFrameListener

The listener interface for receiving internal frame events.

InternalFrameUI

Pluggable look and feel interface for JInternalFrame.

InternationalFormatter

InternationalFormatter extends DefaultFormatter,
 using an instance of java.text.Format to handle the
 conversion to a String, and the conversion from a String.

InterruptedByTimeoutException

Checked exception received by a thread when a timeout elapses before an
 asynchronous operation completes.

InterruptedException

Thrown when a thread is waiting, sleeping, or otherwise occupied,
 and the thread is interrupted, either before or during the activity.

InterruptedIOException

Signals that an I/O operation has been interrupted.

InterruptedNamingException

This exception is thrown when the naming operation
 being invoked has been interrupted.

InterruptibleChannel

A channel that can be asynchronously closed and interrupted.

IntersectionType

Represents an intersection type.

IntersectionTypeTree

A tree node for an intersection type in a cast expression.

IntFunction<R>

Represents a function that accepts an int-valued argument and produces a
 result.

IntPredicate

Represents a predicate (boolean-valued function) of one int-valued
 argument.

IntrospectionException

Thrown when an exception happens during Introspection.

IntrospectionException

An exception occurred during the introspection of an MBean.

Introspector

The Introspector class provides a standard way for tools to learn about
 the properties, events, and methods supported by a target Java Bean.

IntStream

A sequence of primitive int-valued elements supporting sequential and parallel
 aggregate operations.

IntStream.Builder

A mutable builder for an IntStream.

IntStream.IntMapMultiConsumer

Represents an operation that accepts an int-valued argument
 and an IntConsumer, and returns no result.

IntSummaryStatistics

A state object for collecting statistics such as count, min, max, sum, and
 average.

IntSupplier

Represents a supplier of int-valued results.

IntToDoubleFunction

Represents a function that accepts an int-valued argument and produces a
 double-valued result.

IntToLongFunction

Represents a function that accepts an int-valued argument and produces a
 long-valued result.

IntUnaryOperator

Represents an operation on a single int-valued operand that produces
 an int-valued result.

IntVector

A specialized Vector representing an ordered immutable sequence of
 int values.

InvalidAlgorithmParameterException

This is the exception for invalid or inappropriate algorithm parameters.

InvalidApplicationException

Thrown when an attempt is made to apply either of the following: A
 subquery expression to an MBean or a qualified attribute expression
 to an MBean of the wrong class.

InvalidAttributeIdentifierException

This exception is thrown when an attempt is
 made to add to create an attribute with an invalid attribute identifier.

InvalidAttributesException

This exception is thrown when an attempt is
 made to add or modify an attribute set that has been specified
 incompletely or incorrectly.

InvalidAttributeValueException

The value specified is not valid for the attribute.

InvalidAttributeValueException

This class is thrown when an attempt is
 made to add to an attribute a value that conflicts with the attribute's
 schema definition.

InvalidClassException

Thrown when the Serialization runtime detects one of the following
 problems with a Class.

InvalidCodeIndexException
Deprecated.
This exception is no longer thrown

InvalidDnDOperationException

This exception is thrown by various methods in the java.awt.dnd package.

InvalidKeyException

This is the exception for invalid Keys (invalid encoding, wrong
 length, uninitialized, etc).

InvalidKeyException

This runtime exception is thrown to indicate that a method parameter which was expected to be
 an item name of a composite data or a row index of a tabular data is not valid.

InvalidKeySpecException

This is the exception for invalid key specifications.

InvalidLineNumberException
Deprecated.
This exception is no longer thrown

InvalidMarkException

Unchecked exception thrown when an attempt is made to reset a buffer
 when its mark is not defined.

InvalidMidiDataException

An InvalidMidiDataException indicates that inappropriate MIDI data
 was encountered.

InvalidModuleDescriptorException

Thrown when reading a module descriptor and the module descriptor is found
 to be malformed or otherwise cannot be interpreted as a module descriptor.

InvalidModuleException

Thrown to indicate that the requested module is invalid
 or became invalid after the module was unloaded.

InvalidNameException

This exception indicates that the name being specified does
 not conform to the naming syntax of a naming system.

InvalidObjectException

Indicates that one or more deserialized objects failed validation
 tests.

InvalidOpenTypeException

This runtime exception is thrown to indicate that the open type of an open data value
 is not the one expected.

InvalidParameterException

This exception, designed for use by the JCA/JCE engine classes,
 is thrown when an invalid parameter is passed
 to a method.

InvalidParameterSpecException

This is the exception for invalid parameter specifications.

InvalidPathException

Unchecked exception thrown when path string cannot be converted into a
 Path because the path string contains invalid characters, or
 the path string is invalid for other file system specific reasons.

InvalidPreferencesFormatException

Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of preferences, as per the Preferences
 specification.

InvalidPropertiesFormatException

Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of properties, as per the Properties
 specification.

InvalidRelationIdException

This exception is raised when relation id provided for a relation is already
 used.

InvalidRelationServiceException

This exception is raised when an invalid Relation Service is provided.

InvalidRelationTypeException

Invalid relation type.

InvalidRequestStateException

Thrown to indicate that the requested event cannot be modified
 because it is enabled.

InvalidRoleInfoException

This exception is raised when, in a role info, its minimum degree is greater
 than its maximum degree.

InvalidRoleValueException

Role value is invalid.

InvalidSearchControlsException

This exception is thrown when the specification of
 the SearchControls for a search operation is invalid.

InvalidSearchFilterException

This exception is thrown when the specification of
 a search filter is invalid.

InvalidStackFrameException

Thrown to indicate that the requested operation cannot be
 completed because the specified stack frame is no longer valid.

InvalidStreamException

Unchecked exception thrown when an attempt is made to send a
 message to an invalid stream.

InvalidTargetObjectTypeException

Exception thrown when an invalid target object type is specified.

InvalidTypeException

Thrown to indicate a type mismatch in setting the value of a field
 or variable, or in specifying the return value of a method.

Invocable

The optional interface implemented by ScriptEngines whose methods allow the invocation of
 procedures in scripts that have previously been executed.

InvocationEvent

An event which executes the run() method on a Runnable
  when dispatched by the AWT event dispatcher thread.

InvocationException

Thrown to indicate an exception occurred in an invoked method within
 the target VM.

InvocationHandler

InvocationHandler is the interface implemented by
 the invocation handler of a proxy instance.

InvocationTargetException

InvocationTargetException is a checked exception that wraps
 an exception thrown by an invoked method or constructor.

IOError

Thrown when a serious I/O error has occurred.

IOException

Signals that an I/O exception of some sort has occurred.

IsoChronology

The ISO calendar system.

IsoEra

An era in the ISO calendar system.

IsoFields

Fields and units specific to the ISO-8601 calendar system,
 including quarter-of-year and week-based-year.

ItemEvent

A semantic event which indicates that an item was selected or deselected.

ItemListener

The listener interface for receiving item events.

ItemSelectable

The interface for objects which contain a set of items for
 which zero or more can be selected.

Iterable<T>

Implementing this interface allows an object to be the target of the enhanced
 for statement (sometimes called the "for-each loop" statement).

Iterator<E>

An iterator over a collection.

IvParameterSpec

This class specifies an initialization vector (IV).

JapaneseChronology

The Japanese Imperial calendar system.

JapaneseDate

A date in the Japanese Imperial calendar system.

JapaneseEra

An era in the Japanese Imperial calendar system.

JApplet
Deprecated, for removal: This API element is subject to removal in a future version.
The Applet API is deprecated, no replacement.

JarEntry

This class is used to represent a JAR file entry.

JarException

Signals that an error of some sort has occurred while reading from
 or writing to a JAR file.

JarFile

The JarFile class is used to read the contents of a jar file
 from any file that can be opened with java.io.RandomAccessFile.

JarInputStream

The JarInputStream class is used to read the contents of
 a JAR file from any input stream.

JarOutputStream

The JarOutputStream class is used to write the contents
 of a JAR file to any output stream.

JarSigner

An immutable utility class to sign a jar file.

JarSigner.Builder

A mutable builder class that can create an immutable JarSigner
 from various signing-related parameters.

JarSignerException

This exception is thrown when JarSigner.sign(java.util.zip.ZipFile, java.io.OutputStream) fails.

JarURLConnection

A URL Connection to a Java ARchive (JAR) file or an entry in a JAR
 file.

JavaBean

An annotation used to specify some class-related information
 for the automatically generated BeanInfo classes.

JavaCompiler

Interface to invoke Java programming language compilers from
 programs.

JavaCompiler.CompilationTask

Interface representing a future for a compilation task.

JavacTask

Provides access to functionality specific to the JDK Java Compiler, javac.

JavaFileManager

File manager for tools operating on Java programming language
 source and class files.

JavaFileManager.Location

Interface for locations of file objects.

JavaFileObject

File abstraction for tools operating on Java programming language
 source and class files.

JavaFileObject.Kind

Kinds of JavaFileObjects.

JavaShellToolBuilder

Interface to configure and run a Java shell tool instance.

JButton

An implementation of a "push" button.

JCheckBox

An implementation of a check box -- an item that can be selected or
 deselected, and which displays its state to the user.

JCheckBoxMenuItem

A menu item that can be selected or deselected.

JColorChooser

JColorChooser provides a pane of controls designed to allow
 a user to manipulate and select a color.

JComboBox<E>

A component that combines a button or editable field and a drop-down list.

JComboBox.KeySelectionManager

The interface that defines a KeySelectionManager.

JComponent

The base class for all Swing components except top-level containers.

JConsoleContext

JConsoleContext represents a JConsole connection to a target
 application.

JConsoleContext.ConnectionState

Values for the ConnectionState bound property.

JConsolePlugin

A JConsole plugin class.

JdbcRowSet

The standard interface that all standard implementations of
 JdbcRowSet must implement.

JDBCType

Defines the constants that are used to identify generic
 SQL types, called JDBC types.

JDesktopPane

A container used to create a multiple-document interface or a virtual desktop.

JDialog

The main class for creating a dialog window.

JdiDefaultExecutionControl

The implementation of ExecutionControl that the
 JShell-core uses by default.

JdiExecutionControl

Abstract JDI implementation of ExecutionControl.

JdiExecutionControlProvider

A provider of remote JDI-controlled execution engines.

JdiInitiator

Sets up a JDI connection, providing the resulting JDI VirtualMachine
 and the Process the remote agent is running in.

JDIPermission

The JDIPermission class represents access rights to
 the VirtualMachineManager.

JEditorPane

A text component to edit various kinds of content.

JFileChooser

JFileChooser provides a simple mechanism for the user to
 choose a file.

JFormattedTextField

JFormattedTextField extends JTextField adding
 support for formatting arbitrary values, as well as retrieving a particular
 object once the user has edited the text.

JFormattedTextField.AbstractFormatter

Instances of AbstractFormatter are used by
 JFormattedTextField to handle the conversion both
 from an Object to a String, and back from a String to an Object.

JFormattedTextField.AbstractFormatterFactory

Instances of AbstractFormatterFactory are used by
 JFormattedTextField to obtain instances of
 AbstractFormatter which in turn are used to format values.

JFrame

An extended version of java.awt.Frame that adds support for
 the JFC/Swing component architecture.

JInternalFrame

A lightweight object that provides many of the features of
 a native frame, including dragging, closing, becoming an icon,
 resizing, title display, and support for a menu bar.

JInternalFrame.JDesktopIcon

This component represents an iconified version of a
 JInternalFrame.

JLabel

A display area for a short text string or an image,
 or both.

JLayer<V extends Component>

JLayer is a universal decorator for Swing components
 which enables you to implement various advanced painting effects as well as
 receive notifications of all AWTEvents generated within its borders.

JLayeredPane

JLayeredPane adds depth to a JFC/Swing container,
 allowing components to overlap each other when needed.

JList<E>

A component that displays a list of objects and allows the user to select
 one or more items.

JList.DropLocation

A subclass of TransferHandler.DropLocation representing
 a drop location for a JList.

JMenu

An implementation of a menu -- a popup window containing
 JMenuItems that
 is displayed when the user selects an item on the JMenuBar.

JMenuBar

An implementation of a menu bar.

JMenuItem

An implementation of an item in a menu.

JMException

Exceptions thrown by JMX implementations.

JMRuntimeException

Runtime exceptions emitted by JMX implementations.

JMX

Static methods from the JMX API.

JMXAddressable

Implemented by objects that can have a JMXServiceURL address.

JMXAuthenticator

Interface to define how remote credentials are converted into a
 JAAS Subject.

JMXConnectionNotification

Notification emitted when a client connection is opened or
 closed or when notifications are lost.

JMXConnector

The client end of a JMX API connector.

JMXConnectorFactory

Factory to create JMX API connector clients.

JMXConnectorProvider

A provider for creating JMX API connector clients using a given
 protocol.

JMXConnectorServer

Superclass of every connector server.

JMXConnectorServerFactory

Factory to create JMX API connector servers.

JMXConnectorServerMBean

MBean interface for connector servers.

JMXConnectorServerProvider

A provider for creating JMX API connector servers using a given
 protocol.

JMXPrincipal

The identity of a remote client of the JMX Remote API.

JMXProviderException

Exception thrown by JMXConnectorFactory and
 JMXConnectorServerFactory when a provider exists for
 the required protocol but cannot be used for some reason.

JMXServerErrorException

Exception thrown as the result of a remote MBeanServer
 method invocation when an Error is thrown while
 processing the invocation in the remote MBean server.

JMXServiceURL

The address of a JMX API connector server.

JndiLoginModule

The module prompts for a username and password
 and then verifies the password against the password stored in
 a directory service configured under JNDI.

JobAttributes

A set of attributes which control a print job.

JobAttributes.DefaultSelectionType

A type-safe enumeration of possible default selection states.

JobAttributes.DestinationType

A type-safe enumeration of possible job destinations.

JobAttributes.DialogType

A type-safe enumeration of possible dialogs to display to the user.

JobAttributes.MultipleDocumentHandlingType

A type-safe enumeration of possible multiple copy handling states.

JobAttributes.SidesType

A type-safe enumeration of possible multi-page impositions.

JobHoldUntil

Class JobHoldUntil is a printing attribute class, a date-time
 attribute, that specifies the exact date and time at which the job must
 become a candidate for printing.

JobImpressions

Class JobImpressions is an integer valued printing attribute class
 that specifies the total size in number of impressions of the document(s)
 being submitted.

JobImpressionsCompleted

Class JobImpressionsCompleted is an integer valued printing attribute
 class that specifies the number of impressions completed for the job so far.

JobImpressionsSupported

Class JobImpressionsSupported is a printing attribute class, a set of
 integers, that gives the supported values for a
 JobImpressions attribute.

JobKOctets

Class JobKOctets is an integer valued printing attribute class that
 specifies the total size of the document(s) in K octets, i.e., in units of
 1024 octets requested to be processed in the job.

JobKOctetsProcessed

Class JobKOctetsProcessed is an integer valued printing attribute
 class that specifies the total number of print data octets processed so far
 in K octets, i.e., in units of 1024 octets.

JobKOctetsSupported

Class JobKOctetsSupported is a printing attribute class, a set of
 integers, that gives the supported values for a JobKOctets
 attribute.

JobMediaSheets

Class JobMediaSheets is an integer valued printing attribute class
 that specifies the total number of media sheets to be produced for this job.

JobMediaSheetsCompleted

Class JobMediaSheetsCompleted is an integer valued printing attribute
 class that specifies the number of media sheets which have completed marking
 and stacking for the entire job so far, whether those sheets have been
 processed on one side or on both.

JobMediaSheetsSupported

Class JobMediaSheetsSupported is a printing attribute class, a set of
 integers, that gives the supported values for a
 JobMediaSheets attribute.

JobMessageFromOperator

Class JobMessageFromOperator is a printing attribute class, a text
 attribute, that provides a message from an operator, system administrator, or
 "intelligent" process to indicate to the end user the reasons for
 modification or other management action taken on a job.

JobName

Class JobName is a printing attribute class, a text attribute, that
 specifies the name of a print job.

JobOriginatingUserName

Class JobOriginatingUserName is a printing attribute class, a text
 attribute, that contains the name of the end user that submitted the print
 job.

JobPriority

Class JobPriority is an integer valued printing attribute class that
 specifies a print job's priority.

JobPrioritySupported

Class JobPrioritySupported is an integer valued printing attribute
 class that specifies whether a Print Service instance supports the
 JobPriority attribute and the number of different job
 priority levels supported.

JobSheets

Class JobSheets is a printing attribute class, an enumeration, that
 determines which job start and end sheets, if any, must be printed with a
 job.

JobState

JobState is a printing attribute class, an enumeration, that
 identifies the current state of a print job.

JobStateReason

Class JobStateReason is a printing attribute class, an enumeration,
 that provides additional information about the job's current state, i.e.,
 information that augments the value of the job's JobState
 attribute.

JobStateReasons

Class JobStateReasons is a printing attribute class, a set of
 enumeration values, that provides additional information about the job's
 current state, i.e., information that augments the value of the job's
 JobState attribute.

Joinable

1.0 Background

JoinRowSet

The JoinRowSet interface provides a mechanism for combining related
 data from different RowSet objects into one JoinRowSet
 object, which represents an SQL JOIN.

JOptionPane

JOptionPane makes it easy to pop up a standard dialog box that
 prompts users for a value or informs them of something.

JPanel

JPanel is a generic lightweight container.

JPasswordField

JPasswordField is a lightweight component that allows
 the editing of a single line of text where the view indicates
 something was typed, but does not show the original characters.

JPEGHuffmanTable

A class encapsulating a single JPEG Huffman table.

JPEGImageReadParam

This class adds the ability to set JPEG quantization and Huffman
 tables when using the built-in JPEG reader plug-in.

JPEGImageWriteParam

This class adds the ability to set JPEG quantization and Huffman
 tables when using the built-in JPEG writer plug-in, and to request that
 optimized Huffman tables be computed for an image.

JPEGQTable

A class encapsulating a single JPEG quantization table.

JPopupMenu

An implementation of a popup menu -- a small window that pops up
 and displays a series of choices.

JPopupMenu.Separator

A popup menu-specific separator.

JProgressBar

A component that visually displays the progress of some task.

JRadioButton

An implementation of a radio button -- an item that can be selected or
 deselected, and which displays its state to the user.

JRadioButtonMenuItem

An implementation of a radio button menu item.

JRootPane

A lightweight container used behind the scenes by
 JFrame, JDialog, JWindow,
 JApplet, and JInternalFrame.

JScrollBar

An implementation of a scrollbar.

JScrollPane

Provides a scrollable view of a lightweight component.

JSeparator

JSeparator provides a general purpose component for
 implementing divider lines - most commonly used as a divider
 between menu items that breaks them up into logical groupings.

JSException

Thrown when an exception is raised in the JavaScript engine.

JShell

The JShell evaluation state engine.

JShell.Builder

Builder for JShell instances.

JShellException

The superclass of JShell generated exceptions

JSlider

A component that lets the user graphically select a value by sliding
 a knob within a bounded interval.

JSObject


 Allows Java code to manipulate JavaScript objects.

JSpinner

A single line input field that lets the user select a
 number or an object value from an ordered sequence.

JSpinner.DateEditor

An editor for a JSpinner whose model is a
 SpinnerDateModel.

JSpinner.DefaultEditor

A simple base class for more specialized editors
 that displays a read-only view of the model's current
 value with a JFormattedTextField.

JSpinner.ListEditor

An editor for a JSpinner whose model is a
 SpinnerListModel.

JSpinner.NumberEditor

An editor for a JSpinner whose model is a
 SpinnerNumberModel.

JSplitPane

JSplitPane is used to divide two (and only two)
 Components.

JTabbedPane

A component that lets the user switch between a group of components by
 clicking on a tab with a given title and/or icon.

JTable

The JTable is used to display and edit regular two-dimensional tables
 of cells.

JTable.DropLocation

A subclass of TransferHandler.DropLocation representing
 a drop location for a JTable.

JTable.PrintMode

Printing modes, used in printing JTables.

JTableHeader

This is the object which manages the header of the JTable.

JTextArea

A JTextArea is a multi-line area that displays plain text.

JTextComponent

JTextComponent is the base class for swing text
 components.

JTextComponent.DropLocation

Represents a drop location for JTextComponents.

JTextComponent.KeyBinding

Binding record for creating key bindings.

JTextField

JTextField is a lightweight component that allows the editing
 of a single line of text.

JTextPane

A text component that can be marked up with attributes that are
 represented graphically.

JToggleButton

An implementation of a two-state button.

JToggleButton.ToggleButtonModel

The ToggleButton model

JToolBar

JToolBar provides a component that is useful for
 displaying commonly used Actions or controls.

JToolBar.Separator

A toolbar-specific separator.

JToolTip

Used to display a "Tip" for a Component.

JTree

A control that displays a set of hierarchical data as an outline.

JTree.DropLocation

A subclass of TransferHandler.DropLocation representing
 a drop location for a JTree.

JTree.DynamicUtilTreeNode

DynamicUtilTreeNode can wrap
 vectors/hashtables/arrays/strings and
 create the appropriate children tree nodes as necessary.

JTree.EmptySelectionModel

EmptySelectionModel is a TreeSelectionModel
 that does not allow anything to be selected.

JulianFields

A set of date fields that provide access to Julian Days.

JViewport

The "viewport" or "porthole" through which you see the underlying
 information.

JWindow

A JWindow is a container that can be displayed anywhere on the
 user's desktop.

KerberosCredMessage

This class encapsulates a Kerberos 5 KRB_CRED message which can be used to
 send Kerberos credentials from one principal to another.

KerberosKey

This class encapsulates a long term secret key for a Kerberos
 principal.

KerberosPrincipal

This class encapsulates a Kerberos principal.

KerberosTicket

This class encapsulates a Kerberos ticket and associated
 information as viewed from the client's point of view.

Kernel

The Kernel class defines a matrix that describes how a
 specified pixel and its surrounding pixels affect the value
 computed for the pixel's position in the output image of a filtering
 operation.

Key

The Key interface is the top-level interface for all keys.

KeyAdapter

An abstract adapter class for receiving keyboard events.

KeyAgreement

This class provides the functionality of a key agreement (or key
 exchange) protocol.

KeyAgreementSpi

This class defines the Service Provider Interface (SPI)
 for the KeyAgreement class.

KeyAlreadyExistsException

This runtime exception is thrown to indicate that the index of a row to be added to a tabular data instance
 is already used to refer to another row in this tabular data instance.

KeyboardFocusManager

The KeyboardFocusManager is responsible for managing the active and focused
 Windows, and the current focus owner.

KeyEvent

An event which indicates that a keystroke occurred in a component.

KeyEventDispatcher

A KeyEventDispatcher cooperates with the current KeyboardFocusManager in the
 targeting and dispatching of all KeyEvents.

KeyEventPostProcessor

A KeyEventPostProcessor cooperates with the current KeyboardFocusManager
 in the final resolution of all unconsumed KeyEvents.

KeyException

This is the basic key exception.

KeyFactory

Key factories are used to convert keys (opaque
 cryptographic keys of type Key) into key specifications
 (transparent representations of the underlying key material), and vice
 versa.

KeyFactorySpi

This class defines the Service Provider Interface (SPI)
 for the KeyFactory class.

KeyGenerator

This class provides the functionality of a secret (symmetric) key generator.

KeyGeneratorSpi

This class defines the Service Provider Interface (SPI)
 for the KeyGenerator class.

KeyInfo

A representation of the XML KeyInfo element as defined in
 the 
 W3C Recommendation for XML-Signature Syntax and Processing.

KeyInfoFactory

A factory for creating KeyInfo objects from scratch or for
 unmarshalling a KeyInfo object from a corresponding XML
 representation.

KeyListener

The listener interface for receiving keyboard events (keystrokes).

KeyManagementException

This is the general key management exception for all operations
 dealing with key management.

KeyManager

This is the base interface for JSSE key managers.

KeyManagerFactory

This class acts as a factory for key managers based on a
 source of key material.

KeyManagerFactorySpi

This class defines the Service Provider Interface (SPI)
 for the KeyManagerFactory class.

Keymap

A collection of bindings of KeyStrokes to actions.

KeyName

A representation of the XML KeyName element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

KeyPair

This class is a simple holder for a key pair (a public key and a
 private key).

KeyPairGenerator

The KeyPairGenerator class is used to generate pairs of
 public and private keys.

KeyPairGeneratorSpi

 This class defines the Service Provider Interface (SPI)
 for the KeyPairGenerator class, which is used to generate
 pairs of public and private keys.

KeyRep

Standardized representation for serialized Key objects.

KeyRep.Type

Key type.

KeySelector

A selector that finds and returns a key using the data contained in a
 KeyInfo object.

KeySelector.Purpose

The purpose of the key that is to be selected.

KeySelectorException

Indicates an exceptional condition thrown by a KeySelector.

KeySelectorResult

The result returned by the KeySelector.select
 method.

KeySpec

A (transparent) specification of the key material
 that constitutes a cryptographic key.

KeyStore

This class represents a storage facility for cryptographic
 keys and certificates.

KeyStore.Builder

A description of a to-be-instantiated KeyStore object.

KeyStore.CallbackHandlerProtection

A ProtectionParameter encapsulating a CallbackHandler.

KeyStore.Entry

A marker interface for KeyStore entry types.

KeyStore.Entry.Attribute

An attribute associated with a keystore entry.

KeyStore.LoadStoreParameter

A marker interface for KeyStore
 load
 and
 store
 parameters.

KeyStore.PasswordProtection

A password-based implementation of ProtectionParameter.

KeyStore.PrivateKeyEntry

A KeyStore entry that holds a PrivateKey
 and corresponding certificate chain.

KeyStore.ProtectionParameter

A marker interface for keystore protection parameters.

KeyStore.SecretKeyEntry

A KeyStore entry that holds a SecretKey.

KeyStore.TrustedCertificateEntry

A KeyStore entry that holds a trusted
 Certificate.

KeyStoreBuilderParameters

A parameters object for X509KeyManagers that encapsulates a List
 of KeyStore.Builders.

KeyStoreException

This is the generic KeyStore exception.

KeyStoreLoginModule

Provides a JAAS login module that prompts for a key store alias and
 populates the subject with the alias's principal and credentials.

KeyStoreSpi

This class defines the Service Provider Interface (SPI)
 for the KeyStore class.

KeyStroke

A KeyStroke represents a key action on the keyboard, or equivalent input
 device.

KeyTab

This class encapsulates a keytab file.

KeyValue

A representation of the XML KeyValue element as defined
 in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

Krb5LoginModule

This LoginModule authenticates users using
 Kerberos protocols.

Label

A Label object is a component for placing text in a
 container.

Label

Annotation that sets a human-readable name for an element (for example,
 "Maximum Throughput").

LabeledStatementTree

A tree node for a labeled statement.

LabelUI

Pluggable look and feel interface for JLabel.

LabelView

A LabelView is a styled chunk of text
 that represents a view mapped over an element in the
 text model.

LambdaConversionException

LambdaConversionException

LambdaExpressionTree

A tree node for a lambda expression.

LambdaExpressionTree.BodyKind

Lambda expressions come in two forms:
 
  expression lambdas, whose body is an expression, and
  statement lambdas, whose body is a block
 

LambdaMetafactory

Methods to facilitate the creation of simple "function objects" that
 implement one or more interfaces by delegation to a provided MethodHandle,
 possibly after type adaptation and partial evaluation of arguments.

LanguageCallback

 Underlying security services instantiate and pass a
 LanguageCallback to the handle
 method of a CallbackHandler to retrieve the Locale
 used for localizing text.

LaunchingConnector

A connector which can launch a target VM before connecting to it.

LayeredHighlighter
 
LayeredHighlighter.LayerPainter

Layered highlight renderer.

LayerInstantiationException

Thrown when creating a module layer fails.

LayerUI<V extends Component>

The base class for all JLayer's UI delegates.

LayoutFocusTraversalPolicy

A SortingFocusTraversalPolicy which sorts Components based on their size,
 position, and orientation.

LayoutManager

Defines the interface for classes that know how to lay out
 Containers.

LayoutManager2

Defines an interface for classes that know how to layout Containers
 based on a layout constraints object.

LayoutPath

LayoutPath provides a mapping between locations relative to the
 baseline and points in user space.

LayoutQueue

A queue of text layout tasks.

LayoutStyle

LayoutStyle provides information about how to position
 components.

LayoutStyle.ComponentPlacement

ComponentPlacement is an enumeration of the
 possible ways two components can be placed relative to each
 other.

LDAPCertStoreParameters

Parameters used as input for the LDAP CertStore algorithm.

LdapContext

This interface represents a context in which you can perform
 operations with LDAPv3-style controls and perform LDAPv3-style
 extended operations.

LdapDnsProvider

Service-provider class for DNS lookups when performing LDAP operations.

LdapDnsProviderResult

The result of a DNS lookup for an LDAP URL.

LdapLoginModule

This LoginModule performs LDAP-based authentication.

LdapName

This class represents a distinguished name as specified by
 RFC 2253.

LdapPrincipal

A principal identified by a distinguished name as specified by
 RFC 2253.

LdapReferralException

This abstract class is used to represent an LDAP referral exception.

Lease

A lease contains a unique VM identifier and a lease duration.

Level

The Level class defines a set of standard logging levels that
 can be used to control logging output.

LexicalHandler

SAX2 extension handler for lexical events.

LimitExceededException

This exception is thrown when a method
 terminates abnormally due to a user or system specified limit.

Line

The Line interface represents a mono or multi-channel audio feed.

Line.Info

A Line.Info object contains information about a line.

Line2D

This Line2D represents a line segment in (x,y)
 coordinate space.

Line2D.Double

A line segment specified with double coordinates.

Line2D.Float

A line segment specified with float coordinates.

LinearGradientPaint

The LinearGradientPaint class provides a way to fill
 a Shape with a linear color gradient pattern.

LineBorder

A class which implements a line border of arbitrary thickness
 and of a single color.

LineBreakMeasurer

The LineBreakMeasurer class allows styled text to be
 broken into lines (or segments) that fit within a particular visual
 advance.

LineEvent

The LineEvent class encapsulates information that a line sends its
 listeners whenever the line opens, closes, starts, or stops.

LineEvent.Type

The LineEvent.Type inner class identifies what kind of event occurred on
 a line.

LineListener

Instances of classes that implement the LineListener interface can
 register to receive events when a line's status changes.

LineMap

Provides methods to convert between character positions and line numbers
 for a compilation unit.

LineMetrics

The LineMetrics class allows access to the
 metrics needed to layout characters along a line
 and to layout of a set of lines.

LineNumberInputStream
Deprecated.
This class incorrectly assumes that bytes adequately represent
             characters.

LineNumberReader

A buffered character-input stream that keeps track of line numbers.

LineUnavailableException

A LineUnavailableException is an exception indicating that a line
 cannot be opened because it is unavailable.

LinkageError

Subclasses of LinkageError indicate that a class has
 some dependency on another class; however, the latter class has
 incompatibly changed after the compilation of the former class.

LinkedBlockingDeque<E>

An optionally-bounded blocking deque based on
 linked nodes.

LinkedBlockingQueue<E>

An optionally-bounded blocking queue based on
 linked nodes.

LinkedHashMap<K,V>

Hash table and linked list implementation of the Map interface,
 with predictable iteration order.

LinkedHashSet<E>

Hash table and linked list implementation of the Set interface,
 with predictable iteration order.

LinkedList<E>

Doubly-linked list implementation of the List and Deque
 interfaces.

LinkedTransferQueue<E>

An unbounded TransferQueue based on linked nodes.

LinkerServices

Interface for services provided to GuardingDynamicLinker instances by
 the DynamicLinker that owns them.

LinkException

This exception is used to describe problems encountered while resolving links.

LinkLoopException

This exception is thrown when
 a loop was detected while attempting to resolve a link, or an implementation
 specific limit on link counts has been reached.

LinkOption

Defines the options as to how symbolic links are handled.

LinkPermission

The Permission class for link creation operations.

LinkRef

This class represents a Reference whose contents is a name, called the link name,
 that is bound to an atomic name in a context.

LinkRequest

Represents a request to link a particular invocation at a particular call
 site.

LinkStyle

The LinkStyle interface provides a mechanism by which a style
 sheet can be retrieved from the node responsible for linking it into a
 document.

LinkTree

A tree node for an @link or @linkplain inline tag.

List

The List component presents the user with a
 scrolling list of text items.

List<E>

An ordered collection (also known as a sequence).

ListCellRenderer<E>

Identifies components that can be used as "rubber stamps" to paint
 the cells in a JList.

ListDataEvent

Defines an event that encapsulates changes to a list.

ListDataListener

ListDataListener

ListenerNotFoundException

The specified MBean listener does not exist in the repository.

ListeningConnector

A connector which listens for a connection initiated by a target VM.

ListIterator<E>

An iterator for lists that allows the programmer
 to traverse the list in either direction, modify
 the list during iteration, and obtain the iterator's
 current position in the list.

ListModel<E>

This interface defines the methods components like JList use
 to get the value of each cell in a list and the length of the list.

ListResourceBundle

ListResourceBundle is an abstract subclass of
 ResourceBundle that manages resources for a locale
 in a convenient and easy to use list.

ListSelectionEvent

An event that characterizes a change in selection.

ListSelectionListener

The listener that's notified when a lists selection value
 changes.

ListSelectionModel

This interface represents the current state of the
 selection for any of the components that display a
 list of values with stable indices.

ListUI

The JList pluggable look and feel delegate.

ListView

A view implementation to display an html list

LiteralTree

A tree node for an @literal or @code inline tag.

LiteralTree

A tree node for a literal expression.

LoaderDelegate

This interface specifies the loading specific subset of
 ExecutionControl.

LoaderHandler
Deprecated.
no replacement

LocalDate

A date without a time-zone in the ISO-8601 calendar system,
 such as 2007-12-03.

LocalDateTime

A date-time without a time-zone in the ISO-8601 calendar system,
 such as 2007-12-03T10:15:30.

Locale

A Locale object represents a specific geographical, political,
 or cultural region.

Locale.Builder

Builder is used to build instances of Locale
 from values configured by the setters.

Locale.Category

Enum for locale categories.

Locale.FilteringMode

This enum provides constants to select a filtering mode for locale
 matching.

Locale.IsoCountryCode

Enum for specifying the type defined in ISO 3166.

Locale.LanguageRange

This class expresses a Language Range defined in
 RFC 4647 Matching of
 Language Tags.

LocaleNameProvider

An abstract class for service providers that
 provide localized names for the
 Locale class.

LocaleServiceProvider


 This is the super class of all the locale sensitive service provider
 interfaces (SPIs).

LocalExecutionControl

An implementation of ExecutionControl which executes
 in the same JVM as the JShell-core.

LocalExecutionControlProvider

A provider of execution engines which run in the same process as JShell.

LocalTime

A time without a time-zone in the ISO-8601 calendar system,
 such as 10:15:30.

LocalVariable

A local variable in the target VM.

Locatable

A mirror that has a Location.

LocatableEvent

Abstract superinterface of events which have both location
 and thread.

LocateRegistry

LocateRegistry is used to obtain a reference to a bootstrap
 remote object registry on a particular host (including the local host), or
 to create a remote object registry that accepts calls on a specific port.

Location

A point within the executing code of the target VM.

Location

Provides information on the location of an event.

Locator

Interface for associating a SAX event with a document location.

Locator2

SAX2 extension to augment the entity information provided
 through a Locator.

Locator2Impl

SAX2 extension helper for holding additional Entity information,
 implementing the Locator2 interface.

LocatorImpl

Provide an optional convenience implementation of Locator.

Lock

Lock implementations provide more extensive locking
 operations than can be obtained using synchronized methods
 and statements.

LockInfo

Information about a lock.

LockSupport

Basic thread blocking primitives for creating locks and other
 synchronization classes.

Logger

A Logger object is used to log messages for a specific
 system or application component.

LoggingMXBean
Deprecated.
LoggingMXBean is no longer a platform MXBean and is replaced
 with PlatformLoggingMXBean.

LoggingPermission

The permission which the SecurityManager will check when code
 that is running with a SecurityManager calls one of the logging
 control methods (such as Logger.setLevel).

LoginContext

 The LoginContext class describes the basic methods used
 to authenticate Subjects and provides a way to develop an
 application independent of the underlying authentication technology.

LoginException

This is the basic login exception.

LoginModule

 Service-provider interface for authentication technology providers.

LogManager

There is a single global LogManager object that is used to
 maintain a set of shared state about Loggers and log services.

LogRecord

LogRecord objects are used to pass logging requests between
 the logging framework and individual log Handlers.

LogStream
Deprecated.
no replacement

Long

The Long class wraps a value of the primitive type 
 long in an object.

LongAccumulator

One or more variables that together maintain a running long
 value updated using a supplied function.

LongAdder

One or more variables that together maintain an initially zero
 long sum.

LongBinaryOperator

Represents an operation upon two long-valued operands and producing a
 long-valued result.

LongBuffer

A long buffer.

LongConsumer

Represents an operation that accepts a single long-valued argument and
 returns no result.

LongFunction<R>

Represents a function that accepts a long-valued argument and produces a
 result.

LongPredicate

Represents a predicate (boolean-valued function) of one long-valued
 argument.

LongStream

A sequence of primitive long-valued elements supporting sequential and parallel
 aggregate operations.

LongStream.Builder

A mutable builder for a LongStream.

LongStream.LongMapMultiConsumer

Represents an operation that accepts a long-valued argument
 and a LongConsumer, and returns no result.

LongSummaryStatistics

A state object for collecting statistics such as count, min, max, sum, and
 average.

LongSupplier

Represents a supplier of long-valued results.

LongToDoubleFunction

Represents a function that accepts a long-valued argument and produces a
 double-valued result.

LongToIntFunction

Represents a function that accepts a long-valued argument and produces an
 int-valued result.

LongType

The type of all primitive long values
 accessed in the target VM.

LongUnaryOperator

Represents an operation on a single long-valued operand that produces
 a long-valued result.

LongValue

Provides access to a primitive long value in
 the target VM.

LongVector

A specialized Vector representing an ordered immutable sequence of
 long values.

LookAndFeel

LookAndFeel, as the name implies, encapsulates a look and
 feel.

Lookup

A wrapper around MethodHandles.Lookup that masks
 checked exceptions.

LookupOp

This class implements a lookup operation from the source
 to the destination.

LookupTable

This abstract class defines a lookup table object.

LSException

Parser or write operations may throw an LSException if the
 processing is stopped.

LSInput

This interface represents an input source for data.

LSLoadEvent

This interface represents a load event object that signals the completion
 of a document load.

LSOutput

This interface represents an output destination for data.

LSParser

An interface to an object that is able to build, or augment, a DOM tree
 from various input sources.

LSParserFilter

LSParserFilters provide applications the ability to examine
 nodes as they are being constructed while parsing.

LSProgressEvent

This interface represents a progress event object that notifies the
 application about progress as a document is parsed.

LSResourceResolver

LSResourceResolver provides a way for applications to
 redirect references to external resources.

LSSerializer

A LSSerializer provides an API for serializing (writing) a
 DOM document out into XML.

LSSerializerFilter

LSSerializerFilters provide applications the ability to
 examine nodes as they are being serialized and decide what nodes should
 be serialized or not.

Mac

This class provides the functionality of a "Message Authentication Code"
 (MAC) algorithm.

MacSpi

This class defines the Service Provider Interface (SPI)
 for the Mac class.

Main

A legacy programmatic interface for the Java Programming Language
 compiler, javac.

MalformedInputException

Checked exception thrown when an input byte sequence is not legal for given
 charset, or an input character sequence is not a legal sixteen-bit Unicode
 sequence.

MalformedLinkException

This exception is thrown when a malformed link was encountered while
 resolving or constructing a link.

MalformedObjectNameException

The format of the string does not correspond to a valid ObjectName.

MalformedParameterizedTypeException

Thrown when a semantically malformed parameterized type is
 encountered by a reflective method that needs to instantiate it.

MalformedParametersException

Thrown when the
 java.lang.reflect package attempts to read method parameters from
 a class file and determines that one or more parameters are
 malformed.

MalformedURLException

Thrown to indicate that a malformed URL has occurred.

ManagementFactory

The ManagementFactory class is a factory class for getting
 managed beans for the Java platform.

ManagementPermission

The permission which the SecurityManager will check when code
 that is running with a SecurityManager calls methods defined
 in the management interface for the Java platform.

ManageReferralControl

Requests that referral and other special LDAP objects be manipulated
 as normal LDAP objects.

ManagerFactoryParameters

This class is the base interface for providing
 algorithm-specific information to a KeyManagerFactory or
 TrustManagerFactory.

Manifest

The Manifest class is used to maintain Manifest entry names and their
 associated Attributes.

Manifest

A representation of the XML Manifest element as defined in
 the 
 W3C Recommendation for XML-Signature Syntax and Processing.

Map<K,V>

An object that maps keys to values.

Map.Entry<K,V>

A map entry (key-value pair).

MappedByteBuffer

A direct byte buffer whose content is a memory-mapped region of a file.

MarshalException

A MarshalException is thrown if a
 java.io.IOException occurs while marshalling the remote call
 header, arguments or return value for a remote method call.

MarshalException

Indicates an exceptional condition that occurred during the XML
 marshalling or unmarshalling process.

MarshalledObject<T>

A MarshalledObject contains a byte stream with the serialized
 representation of an object given to its constructor.

MaskFormatter

MaskFormatter is used to format and edit strings.

Matcher

An engine that performs match operations on a character sequence by interpreting a Pattern.

MatchResult

The result of a match operation.

Math

The class Math contains methods for performing basic
 numeric operations such as the elementary exponential, logarithm,
 square root, and trigonometric functions.

MathContext

Immutable objects which encapsulate the context settings which
 describe certain rules for numerical operators, such as those
 implemented by the BigDecimal class.

MatteBorder

A class which provides a matte-like border of either a solid color
 or a tiled icon.

MBeanAttributeInfo

Describes an MBean attribute exposed for management.

MBeanConstructorInfo

Describes a constructor exposed by an MBean.

MBeanException

Represents "user defined" exceptions thrown by MBean methods
 in the agent.

MBeanFeatureInfo

Provides general information for an MBean descriptor object.

MBeanInfo

Describes the management interface exposed by an MBean; that is,
 the set of attributes and operations which are available for
 management operations.

MBeanNotificationInfo

The MBeanNotificationInfo class is used to describe the
 characteristics of the different notification instances
 emitted by an MBean, for a given Java class of notification.

MBeanOperationInfo

Describes a management operation exposed by an MBean.

MBeanParameterInfo

Describes an argument of an operation exposed by an MBean.

MBeanPermission

Permission controlling access to MBeanServer operations.

MBeanRegistration

Can be implemented by an MBean in order to
 carry out operations before and after being registered or unregistered from
 the MBean Server.

MBeanRegistrationException

Wraps exceptions thrown by the preRegister(), preDeregister() methods
 of the MBeanRegistration interface.

MBeanServer

This is the interface for MBean manipulation on the agent
 side.

MBeanServerBuilder

This class represents a builder that creates a default
 MBeanServer implementation.

MBeanServerConnection

This interface represents a way to talk to an MBean server, whether
 local or remote.

MBeanServerDelegate

Represents  the MBean server from the management point of view.

MBeanServerDelegateMBean

Defines the management interface  of an object of class MBeanServerDelegate.

MBeanServerFactory

Provides MBean server references.

MBeanServerForwarder

An object of this class implements the MBeanServer interface and
 wraps another object that also implements that interface.

MBeanServerInvocationHandler

InvocationHandler that forwards methods in an MBean's
 management interface through the MBean server to the MBean.

MBeanServerNotification

Represents a notification emitted by the MBean Server through the MBeanServerDelegate MBean.

MBeanServerNotificationFilter

Filter for MBeanServerNotification.

MBeanServerPermission

A Permission to perform actions related to MBeanServers.

MBeanTrustPermission

This permission represents "trust" in a signer or codebase.

Media

Class Media is a printing attribute class that specifies the medium
 on which to print.

MediaList

The MediaList interface provides the abstraction of an
 ordered collection of media, without defining or constraining how this
 collection is implemented.

MediaName

Class MediaName is a subclass of Media, a printing attribute
 class (an enumeration) that specifies the media for a print job as a name.

MediaPrintableArea

Class MediaPrintableArea is a printing attribute used to distinguish
 the printable and non-printable areas of media.

MediaSize

Class MediaSize is a two-dimensional size valued printing attribute
 class that indicates the dimensions of the medium in a portrait orientation,
 with the X dimension running along the bottom edge and the Y
 dimension running along the left edge.

MediaSize.Engineering

Class MediaSize.Engineering includes MediaSize
 values for engineering media.

MediaSize.ISO

Class MediaSize.ISO includes MediaSize values
 for ISO media.

MediaSize.JIS

Class MediaSize.JIS includes MediaSize values
 for JIS (Japanese) media.

MediaSize.NA

Class MediaSize.NA includes MediaSize values
 for North American media.

MediaSize.Other

Class MediaSize.Other includes MediaSize values
 for miscellaneous media.

MediaSizeName

Class MediaSizeName is a subclass of Media.

MediaTracker

The MediaTracker class is a utility class to track
 the status of a number of media objects.

MediaTray

Class MediaTray is a subclass of Media.

Member

Member is an interface that reflects identifying information about
 a single member (a field or a method) or a constructor.

MemberReferenceTree

A tree node for a member reference expression.

MemberReferenceTree.ReferenceMode

There are two kinds of member references: (i) method references and
 (ii) constructor references

MemberSelectTree

A tree node for a member access expression.

MembershipKey

A token representing the membership of an Internet Protocol (IP) multicast
 group.

MemoryAccess

This class defines ready-made static accessors which can be used to dereference memory segments in many ways.

MemoryAddress

A memory address models a reference into a memory location.

MemoryAddress

Event field annotation, specifies that the value is a memory address.

MemoryCacheImageInputStream

An implementation of ImageInputStream that gets its
 input from a regular InputStream.

MemoryCacheImageOutputStream

An implementation of ImageOutputStream that writes its
 output to a regular OutputStream.

MemoryHandler

Handler that buffers requests in a circular buffer in memory.

MemoryHandles

This class defines several factory methods for constructing and combining memory access var handles.

MemoryImageSource

This class is an implementation of the ImageProducer interface which
 uses an array to produce pixel values for an Image.

MemoryLayout

A memory layout can be used to describe the contents of a memory segment in a language neutral fashion.

MemoryLayout.PathElement

Instances of this class are used to form layout paths.

MemoryLayouts

This class defines useful layout constants.

MemoryManagerMXBean

The management interface for a memory manager.

MemoryMXBean

The management interface for the memory system of
 the Java virtual machine.

MemoryNotificationInfo

The information about a memory notification.

MemoryPoolMXBean

The management interface for a memory pool.

MemorySegment

A memory segment models a contiguous region of memory.

MemoryType

Types of memory pools.

MemoryUsage

A MemoryUsage object represents a snapshot of memory usage.

Menu

A Menu object is a pull-down menu component
 that is deployed from a menu bar.

MenuBar

The MenuBar class encapsulates the platform's
 concept of a menu bar bound to a frame.

MenuBarUI

Pluggable look and feel interface for JMenuBar.

MenuComponent

The abstract class MenuComponent is the superclass
 of all menu-related components.

MenuContainer

The super class of all menu related containers.

MenuDragMouseEvent

MenuDragMouseEvent is used to notify interested parties that
 the menu element has received a MouseEvent forwarded to it
 under drag conditions.

MenuDragMouseListener

Defines a menu mouse-drag listener.

MenuElement

Any component that can be placed into a menu should implement this interface.

MenuEvent

MenuEvent is used to notify interested parties that
 the menu which is the event source has been posted,
 selected, or canceled.

MenuItem

All items in a menu must belong to the class
 MenuItem, or one of its subclasses.

MenuItemUI

Pluggable look and feel interface for JMenuItem.

MenuKeyEvent

MenuKeyEvent is used to notify interested parties that
 the menu element has received a KeyEvent forwarded to it
 in a menu tree.

MenuKeyListener

MenuKeyListener

MenuListener

Defines a listener for menu events.

MenuSelectionManager

A MenuSelectionManager owns the selection in menu hierarchy.

MenuShortcut

The MenuShortcut class represents a keyboard accelerator
 for a MenuItem.

MessageDigest

This MessageDigest class provides applications the functionality of a
 message digest algorithm, such as SHA-1 or SHA-256.

MessageDigestSpi

This class defines the Service Provider Interface (SPI)
 for the MessageDigest class, which provides the functionality
 of a message digest algorithm, such as MD5 or SHA.

MessageFormat

MessageFormat provides a means to produce concatenated
 messages in a language-neutral way.

MessageFormat.Field

Defines constants that are used as attribute keys in the
 AttributedCharacterIterator returned
 from MessageFormat.formatToCharacterIterator.

MessageInfo

The MessageInfo class provides additional ancillary information about
 messages.

MessageProp

This is a utility class used within the per-message GSSContext
 methods to convey per-message properties.

Messager

A Messager provides the way for an annotation processor to
 report error messages, warnings, and other notices.

MetadataDefinition

Meta annotation for defining new types of event metadata.

MetadataEvent

Event that contains information about event types and configurations.

MetaEventListener

The MetaEventListener interface should be implemented by classes
 whose instances need to be notified when a Sequencer has processed a
 MetaMessage.

MetalBorders

Factory object that can vend Borders appropriate for the metal L & F.

MetalBorders.ButtonBorder

The class represents the border of a JButton.

MetalBorders.Flush3DBorder

The class represents the 3D border.

MetalBorders.InternalFrameBorder

The class represents the border of a JInternalFrame.

MetalBorders.MenuBarBorder

The class represents the border of a JMenuBar.

MetalBorders.MenuItemBorder

The class represents the border of a JMenuItem.

MetalBorders.OptionDialogBorder

The class represents the border of an option dialog.

MetalBorders.PaletteBorder

Border for a Palette.

MetalBorders.PopupMenuBorder

The class represents the border of a JPopupMenu.

MetalBorders.RolloverButtonBorder

The class represents the border of a rollover Button.

MetalBorders.ScrollPaneBorder

The class represents the border of a JScrollPane.

MetalBorders.TableHeaderBorder

Border for a Table Header

MetalBorders.TextFieldBorder

The class represents the border of a JTestField.

MetalBorders.ToggleButtonBorder
 
MetalBorders.ToolBarBorder

The class represents the border of a JToolBar.

MetalButtonUI

MetalButtonUI implementation

MetalCheckBoxIcon

CheckboxIcon implementation for OrganicCheckBoxUI

MetalCheckBoxUI

CheckboxUI implementation for MetalCheckboxUI

MetalComboBoxButton

JButton subclass to help out MetalComboBoxUI

MetalComboBoxEditor

The default editor for Metal editable combo boxes

MetalComboBoxEditor.UIResource

A subclass of BasicComboBoxEditor that implements UIResource.

MetalComboBoxIcon

This utility class draws the horizontal bars which indicate a MetalComboBox

MetalComboBoxUI

Metal UI for JComboBox

MetalDesktopIconUI

Metal desktop icon.

MetalFileChooserUI

Metal L&F implementation of a FileChooser.

MetalIconFactory

Factory object that vends Icons for
 the Java look and feel (Metal).

MetalIconFactory.FileIcon16


 Warning:
 Serialized objects of this class will not be compatible with
 future Swing releases.

MetalIconFactory.FolderIcon16


 Warning:
 Serialized objects of this class will not be compatible with
 future Swing releases.

MetalIconFactory.PaletteCloseIcon

Defines an icon for Palette close

MetalIconFactory.TreeControlIcon


 Warning:
 Serialized objects of this class will not be compatible with
 future Swing releases.

MetalIconFactory.TreeFolderIcon


 Warning:
 Serialized objects of this class will not be compatible with
 future Swing releases.

MetalIconFactory.TreeLeafIcon

The class represents a tree leaf icon.

MetalInternalFrameTitlePane

Class that manages a JLF title bar

MetalInternalFrameUI

Metal implementation of JInternalFrame.

MetalLabelUI

A Windows L&F implementation of LabelUI.

MetalLookAndFeel

The Java Look and Feel, otherwise known as Metal.

MetalMenuBarUI

Metal implementation of MenuBarUI.

MetalPopupMenuSeparatorUI

A Metal L&F implementation of PopupMenuSeparatorUI.

MetalProgressBarUI

The Metal implementation of ProgressBarUI.

MetalRadioButtonUI

RadioButtonUI implementation for MetalRadioButtonUI

MetalRootPaneUI

Provides the metal look and feel implementation of RootPaneUI.

MetalScrollBarUI

Implementation of ScrollBarUI for the Metal Look and Feel

MetalScrollButton

JButton object for Metal scrollbar arrows.

MetalScrollPaneUI

A Metal L&F implementation of ScrollPaneUI.

MetalSeparatorUI

A Metal L&F implementation of SeparatorUI.

MetalSliderUI

A Java L&F implementation of SliderUI.

MetalSplitPaneUI

Metal split pane.

MetalTabbedPaneUI

The Metal subclass of BasicTabbedPaneUI.

MetalTextFieldUI

Basis of a look and feel for a JTextField.

MetalTheme

MetalTheme provides the color palette and fonts used by
 the Java Look and Feel.

MetalToggleButtonUI

MetalToggleButton implementation

MetalToolBarUI

A Metal Look and Feel implementation of ToolBarUI.

MetalToolTipUI

A Metal L&F extension of BasicToolTipUI.

MetalTreeUI

The metal look and feel implementation of TreeUI.

MetaMessage

A MetaMessage is a MidiMessage that is not meaningful to
 synthesizers, but that can be stored in a MIDI file and interpreted by a
 sequencer program.

Method

A static or instance method in the target VM.

Method

A Method provides information about, and access to, a single method
 on a class or interface.

MethodDescriptor

A MethodDescriptor describes a particular method that a Java Bean
 supports for external access from other components.

MethodEntryEvent

Notification of a method invocation in the target VM.

MethodEntryRequest

Request for notification when a method is invoked in the target VM.

MethodExitEvent

Notification of a method return in the target VM.

MethodExitRequest

Request for notification when a method returns in the target VM.

MethodHandle

A method handle is a typed, directly executable reference to an underlying method,
 constructor, field, or similar low-level operation, with optional
 transformations of arguments or return values.

MethodHandleDesc

A nominal descriptor for a
 MethodHandle constant.

MethodHandleInfo

A symbolic reference obtained by cracking a direct method handle
 into its constituent symbolic parts.

MethodHandleProxies

This class consists exclusively of static methods that help adapt
 method handles to other JVM types, such as interfaces.

MethodHandles

This class consists exclusively of static methods that operate on or return
 method handles.

MethodHandles.Lookup

A lookup object is a factory for creating method handles,
 when the creation requires access checking.

MethodHandles.Lookup.ClassOption

The set of class options that specify whether a hidden class created by
 Lookup::defineHiddenClass method is dynamically added as a new member
 to the nest of a lookup class and/or whether a hidden class has
 a strong relationship with the class loader marked as its defining loader.

MethodHandleTransformer

A generic interface describing operations that transform method handles.

MethodInvocationTree

A tree node for a method invocation expression.

MethodSnippet

Snippet for a method definition.

MethodTree

A tree node for a method or annotation type element declaration.

MethodType

A method type represents the arguments and return type accepted and
 returned by a method handle, or the arguments and return type passed
 and expected  by a method handle caller.

MethodTypeConversionStrategy

Interface for objects representing a strategy for converting a method handle
 to a new type.

MethodTypeDesc

A nominal descriptor for a
 MethodType constant.

MGF1ParameterSpec

This class specifies the set of parameters used with mask generation
 function MGF1 in OAEP Padding and RSASSA-PSS signature scheme, as
 defined in the
 PKCS#1 v2.2 standard.

MidiChannel

A MidiChannel object represents a single MIDI channel.

MidiDevice

MidiDevice is the base interface for all MIDI devices.

MidiDevice.Info

A MidiDevice.Info object contains assorted data about a
 MidiDevice, including its name, the company who created it, and
 descriptive text.

MidiDeviceProvider

A MidiDeviceProvider is a factory or provider for a particular type
 of MIDI device.

MidiDeviceReceiver

MidiDeviceReceiver is a Receiver which represents a MIDI
 input connector of a MidiDevice (see
 MidiDevice.getReceiver()).

MidiDeviceTransmitter

MidiDeviceTransmitter is a Transmitter which represents a
 MIDI input connector of a MidiDevice (see
 MidiDevice.getTransmitter()).

MidiEvent

MIDI events contain a MIDI message and a corresponding time-stamp expressed
 in ticks, and can represent the MIDI event information stored in a MIDI file
 or a Sequence object.

MidiFileFormat

A MidiFileFormat object encapsulates a MIDI file's type, as well as
 its length and timing information.

MidiFileReader

A MidiFileReader supplies MIDI file-reading services.

MidiFileWriter

A MidiFileWriter supplies MIDI file-writing services.

MidiMessage

MidiMessage is the base class for MIDI messages.

MidiSystem

The MidiSystem class provides access to the installed MIDI system
 resources, including devices such as synthesizers, sequencers, and MIDI input
 and output ports.

MidiUnavailableException

A MidiUnavailableException is thrown when a requested MIDI component
 cannot be opened or created because it is unavailable.

MimeTypeParseException

A class to encapsulate MimeType parsing related exceptions.

MinguoChronology

The Minguo calendar system.

MinguoDate

A date in the Minguo calendar system.

MinguoEra

An era in the Minguo calendar system.

MinimalHTMLWriter

MinimalHTMLWriter is a fallback writer used by the
 HTMLEditorKit to write out HTML for a document that
 is a not produced by the EditorKit.

Mirror

A proxy used by a debugger to examine or manipulate some entity
 in another virtual machine.

MirroredTypeException

Thrown when an application attempts to access the Class object
 corresponding to a TypeMirror.

MirroredTypesException

Thrown when an application attempts to access a sequence of Class objects each corresponding to a TypeMirror.

MissingFormatArgumentException

Unchecked exception thrown when there is a format specifier which does not
 have a corresponding argument or if an argument index refers to an argument
 that does not exist.

MissingFormatWidthException

Unchecked exception thrown when the format width is required.

MissingMemberHandlerFactory

A factory for creating method handles for linking missing member behavior
 in BeansLinker.

MissingResourceException

Signals that a resource is missing.

Mixer

A mixer is an audio device with one or more lines.

Mixer.Info

The Mixer.Info class represents information about an audio mixer,
 including the product's name, version, and vendor, along with a textual
 description.

MixerProvider

A provider or factory for a particular mixer type.

MLet

Allows you to instantiate and register one or several MBeans in the MBean server
 coming from a remote URL.

MLetContent

This class represents the contents of the MLET tag.

MLetMBean

Exposes the remote management interface of the MLet
 MBean.

ModelMBean

This interface must be implemented by the ModelMBeans.

ModelMBeanAttributeInfo

The ModelMBeanAttributeInfo object describes an attribute of the ModelMBean.

ModelMBeanConstructorInfo

The ModelMBeanConstructorInfo object describes a constructor of the ModelMBean.

ModelMBeanInfo

This interface is implemented by the ModelMBeanInfo for every ModelMBean.

ModelMBeanInfoSupport

This class represents the meta data for ModelMBeans.

ModelMBeanNotificationBroadcaster

This interface must be implemented by the ModelMBeans.

ModelMBeanNotificationInfo

The ModelMBeanNotificationInfo object describes a notification emitted
 by a ModelMBean.

ModelMBeanOperationInfo

The ModelMBeanOperationInfo object describes a management operation of
 the ModelMBean.

ModificationItem

This class represents a modification item.

ModificationWatchpointEvent

Notification of a field modification in the
 target VM.

ModificationWatchpointRequest

Request for notification when a field is set.

Modifier

The Modifier class provides static methods and
 constants to decode class and member access modifiers.

Modifier

Represents a modifier on a program element such
 as a class, method, or field.

ModifiersTree

A tree node for the modifiers, including annotations, for a declaration.

Module

Represents a run-time module, either named or unnamed.

ModuleDescriptor

A module descriptor.

ModuleDescriptor.Builder

A builder for building ModuleDescriptor objects.

ModuleDescriptor.Exports

 A package exported by a module, may be qualified or unqualified.

ModuleDescriptor.Exports.Modifier

A modifier on an exported package.

ModuleDescriptor.Modifier

A modifier on a module.

ModuleDescriptor.Opens

 A package opened by a module, may be qualified or unqualified.

ModuleDescriptor.Opens.Modifier

A modifier on an open package.

ModuleDescriptor.Provides

 A service that a module provides one or more implementations of.

ModuleDescriptor.Requires

 A dependence upon a module.

ModuleDescriptor.Requires.Modifier

A modifier on a module dependence.

ModuleDescriptor.Version

A module's version string.

ModuleElement

Represents a module program element.

ModuleElement.Directive

Represents a directive within the declaration of this
 module.

ModuleElement.DirectiveKind

The kind of a directive.

ModuleElement.DirectiveVisitor<R,P>

A visitor of module directives, in the style of the visitor design
 pattern.

ModuleElement.ExportsDirective

An exported package of a module.

ModuleElement.OpensDirective

An opened package of a module.

ModuleElement.ProvidesDirective

An implementation of a service provided by a module.

ModuleElement.RequiresDirective

A dependency of a module.

ModuleElement.UsesDirective

A reference to a service used by a module.

ModuleFinder

A finder of modules.

ModuleLayer

A layer of modules in the Java virtual machine.

ModuleLayer.Controller

Controls a module layer.

ModuleReader

Provides access to the content of a module.

ModuleReference

A module in the target VM.

ModuleReference

A reference to a module's content.

ModuleTree

A tree node for a module declaration.

ModuleTree.ModuleKind

The kind of the module.

Monitor

Defines the part common to all monitor MBeans.

MonitorContendedEnteredEvent

Notification that a thread in the target VM is entering a monitor
  after waiting for it to be released by another thread.

MonitorContendedEnteredRequest

Request for notification of a thread in the target VM entering a monitor
 after waiting for it to be released by another thread.

MonitorContendedEnterEvent

Notification that a thread in the target VM is attempting
 to enter a monitor that is already acquired by another thread.

MonitorContendedEnterRequest

Request for notification of a thread in the target VM
 attempting to enter a monitor already acquired by another thread.

MonitorInfo

Information about a monitor owned by a thread.

MonitorInfo

Information about an object monitor lock.

MonitorMBean

Exposes the remote management interface of monitor MBeans.

MonitorNotification

Provides definitions of the notifications sent by monitor MBeans.

MonitorSettingException

Exception thrown by the monitor when a monitor setting becomes invalid while the monitor is running.

MonitorWaitedEvent

Notification that a thread in the target VM has finished
 waiting on an monitor object.

MonitorWaitedRequest

Request for notification when a thread in the target VM has finished waiting on
 a monitor object.

MonitorWaitEvent

Notification that a thread in the target VM is about to
 wait on a monitor object.

MonitorWaitRequest

Request for notification when a thread in the target VM is about to
 wait on a monitor object.

Month

A month-of-year, such as 'July'.

MonthDay

A month-day in the ISO-8601 calendar system, such as --12-03.

MouseAdapter

An abstract adapter class for receiving mouse events.

MouseDragGestureRecognizer

This abstract subclass of DragGestureRecognizer
 defines a DragGestureRecognizer
 for mouse-based gestures.

MouseEvent

An event which indicates that a mouse action occurred in a component.

MouseEvent

The MouseEvent interface provides specific contextual
 information associated with Mouse events.

MouseInfo

MouseInfo  provides methods for getting information about the mouse,
 such as mouse pointer location and the number of mouse buttons.

MouseInputAdapter

An empty implementation of the MouseInputListener interface, provided
 as a convenience to simplify the task of creating listeners, by extending
 and implementing only the methods of interest.

MouseInputListener

A listener implementing all the methods in both the MouseListener and
 MouseMotionListener interfaces.

MouseListener

The listener interface for receiving "interesting" mouse events
 (press, release, click, enter, and exit) on a component.

MouseMotionAdapter

An abstract adapter class for receiving mouse motion events.

MouseMotionListener

The listener interface for receiving mouse motion events on a component.

MouseWheelEvent

An event which indicates that the mouse wheel was rotated in a component.

MouseWheelListener

The listener interface for receiving mouse wheel events on a component.

MultiButtonUI

A multiplexing UI used to combine ButtonUIs.

MulticastChannel

A network channel that supports Internet Protocol (IP) multicasting.

MulticastSocket

A MulticastSocket is a datagram socket that is
 convenient for sending and receiving IP multicast datagrams.

MultiColorChooserUI

A multiplexing UI used to combine ColorChooserUIs.

MultiComboBoxUI

A multiplexing UI used to combine ComboBoxUIs.

MultiDesktopIconUI

A multiplexing UI used to combine DesktopIconUIs.

MultiDesktopPaneUI

A multiplexing UI used to combine DesktopPaneUIs.

MultiDoc

Interface MultiDoc specifies the interface for an object that
 supplies more than one piece of print data for a Print Job.

MultiDocPrintJob

Obtained from a MultiDocPrintService, a MultiDocPrintJob can
 print a specified collection of documents as a single print job with a set of
 job attributes.

MultiDocPrintService

Interface MultiPrintService is the factory for a
 MultiDocPrintJob.

MultiFileChooserUI

A multiplexing UI used to combine FileChooserUIs.

MultiInternalFrameUI

A multiplexing UI used to combine InternalFrameUIs.

MultiLabelUI

A multiplexing UI used to combine LabelUIs.

MultiListUI

A multiplexing UI used to combine ListUIs.

MultiLookAndFeel

A multiplexing look and feel that allows more than one UI
 to be associated with a component at the same time.

MultiMenuBarUI

A multiplexing UI used to combine MenuBarUIs.

MultiMenuItemUI

A multiplexing UI used to combine MenuItemUIs.

MultiOptionPaneUI

A multiplexing UI used to combine OptionPaneUIs.

MultiPanelUI

A multiplexing UI used to combine PanelUIs.

MultiPixelPackedSampleModel

The MultiPixelPackedSampleModel class represents
 one-banded images and can pack multiple one-sample
 pixels into one data element.

MultipleDocumentHandling

Class MultipleDocumentHandling is a printing attribute class, an
 enumeration, that controls finishing operations and the placement of one or
 more print-stream pages into impressions and onto media sheets.

MultipleGradientPaint

This is the superclass for Paints which use a multiple color
 gradient to fill in their raster.

MultipleGradientPaint.ColorSpaceType

The color space in which to perform the gradient interpolation.

MultipleGradientPaint.CycleMethod

The method to use when painting outside the gradient bounds.

MultipleMaster

The MultipleMaster interface represents Type 1
 Multiple Master fonts.

MultiPopupMenuUI

A multiplexing UI used to combine PopupMenuUIs.

MultiProgressBarUI

A multiplexing UI used to combine ProgressBarUIs.

MultiResolutionImage

This interface is designed to be an optional additional API supported by
 some implementations of Image to allow them to provide
 alternate images for various rendering resolutions.

MultiRootPaneUI

A multiplexing UI used to combine RootPaneUIs.

MultiScrollBarUI

A multiplexing UI used to combine ScrollBarUIs.

MultiScrollPaneUI

A multiplexing UI used to combine ScrollPaneUIs.

MultiSeparatorUI

A multiplexing UI used to combine SeparatorUIs.

MultiSliderUI

A multiplexing UI used to combine SliderUIs.

MultiSpinnerUI

A multiplexing UI used to combine SpinnerUIs.

MultiSplitPaneUI

A multiplexing UI used to combine SplitPaneUIs.

MultiTabbedPaneUI

A multiplexing UI used to combine TabbedPaneUIs.

MultiTableHeaderUI

A multiplexing UI used to combine TableHeaderUIs.

MultiTableUI

A multiplexing UI used to combine TableUIs.

MultiTextUI

A multiplexing UI used to combine TextUIs.

MultiToolBarUI

A multiplexing UI used to combine ToolBarUIs.

MultiToolTipUI

A multiplexing UI used to combine ToolTipUIs.

MultiTreeUI

A multiplexing UI used to combine TreeUIs.

MultiViewportUI

A multiplexing UI used to combine ViewportUIs.

MutableAttributeSet

A generic interface for a mutable collection of unique attributes.

MutableCallSite

A MutableCallSite is a CallSite whose target variable
 behaves like an ordinary field.

MutableComboBoxModel<E>

A mutable version of ComboBoxModel.

MutableTreeNode

Defines the requirements for a tree node object that can change --
 by adding or removing child nodes, or by changing the contents
 of a user object stored in the node.

MutationEvent

The MutationEvent interface provides specific contextual
 information associated with Mutation events.

MXBean

Annotation to mark an interface explicitly as being an MXBean
    interface, or as not being an MXBean interface.

Name

An immutable sequence of characters.

Name

The Name interface represents a generic name -- an ordered
 sequence of components.

Name

Annotation that sets the default name for an element.

NameAlreadyBoundException

This exception is thrown by methods to indicate that
 a binding cannot be added because the name is already bound to
 another object.

NameCallback

 Underlying security services instantiate and pass a
 NameCallback to the handle
 method of a CallbackHandler to retrieve name information.

NameClassPair

This class represents the object name and class name pair of a binding
 found in a context.

NamedNodeMap

Objects implementing the NamedNodeMap interface are used to
 represent collections of nodes that can be accessed by name.

NamedOperation

Operation that associates a name with another operation.

NamedParameterSpec

This class is used to specify any algorithm parameters that are determined
 by a standard name.

NameList

The NameList interface provides the abstraction of an ordered
 collection of parallel pairs of name and namespace values (which could be
 null values), without defining or constraining how this collection is
 implemented.

NameNotFoundException

This exception is thrown when a component of the name cannot be resolved
 because it is not bound.

NameParser

This interface is used for parsing names from a hierarchical
 namespace.

Namespace

An interface that contains information about a namespace.

Namespace

An object that describes a namespace that is the target of a dynamic operation
 on an object.

NamespaceChangeListener

Specifies the methods that a listener interested in namespace changes
 must implement.

NamespaceContext

Interface for read only XML Namespace context processing.

NamespaceOperation

Describes an operation that operates on at least one Namespace of
 an object.

NamespaceSupport

Encapsulate Namespace logic for use by applications using SAX,
 or internally by SAX drivers.

Naming

The Naming class provides methods for storing and obtaining
 references to remote objects in a remote object registry.

NamingEnumeration<T>

This interface is for enumerating lists returned by
 methods in the javax.naming and javax.naming.directory packages.

NamingEvent

This class represents an event fired by a naming/directory service.

NamingException

This is the superclass of all exceptions thrown by
 operations in the Context and DirContext interfaces.

NamingExceptionEvent

This class represents an event fired when the procedures/processes
 used to collect information for notifying listeners of
 NamingEvents threw a NamingException.

NamingListener

This interface is the root of listener interfaces that
 handle NamingEvents.

NamingManager

This class contains methods for creating context objects
 and objects referred to by location information in the naming
 or directory service.

NamingSecurityException

This is the superclass of security-related exceptions
 thrown by operations in the Context and DirContext interfaces.

Native

Indicates that a field defining a constant value may be referenced
 from native code.

NativeMethodException

Thrown to indicate an operation cannot be completed because
 it is not valid for a native method.

NavigableMap<K,V>

A SortedMap extended with navigation methods returning the
 closest matches for given search targets.

NavigableSet<E>

A SortedSet extended with navigation methods reporting
 closest matches for given search targets.

NavigationFilter

NavigationFilter can be used to restrict where the cursor can
 be positioned.

NavigationFilter.FilterBypass

Used as a way to circumvent calling back into the caret to
 position the cursor.

NClob

The mapping in the Java programming language
 for the SQL NCLOB type.

NegativeArraySizeException

Thrown if an application tries to create an array with negative size.

NestingKind

The nesting kind of a type element.

NetPermission

This class is for various network permissions.

NetworkChannel

A channel to a network socket.

NetworkInterface

This class represents a Network Interface made up of a name,
 and a list of IP addresses assigned to this interface.

NetworkPermission

Represents permission to access the extended networking capabilities
 defined in the jdk.net package.

NewArrayTree

A tree node for an expression to create a new instance of an array.

NewClassTree

A tree node to declare a new instance of a class.

NimbusLookAndFeel

The NimbusLookAndFeel class.

NimbusStyle

A SynthStyle implementation used by Nimbus.

NoClassDefFoundError

Thrown if the Java Virtual Machine or a ClassLoader instance
 tries to load in the definition of a class (as part of a normal method call
 or as part of creating a new instance using the new expression)
 and no definition of the class could be found.

NoConnectionPendingException

Unchecked exception thrown when the finishConnect method of a SocketChannel is invoked without first
 successfully invoking its connect method.

Node

The Node interface is the primary datatype for the entire
 Document Object Model.

NodeChangeEvent

An event emitted by a Preferences node to indicate that
 a child of that node has been added or removed.

NodeChangeListener

A listener for receiving preference node change events.

NodeFilter

Filters are objects that know how to "filter out" nodes.

NodeIterator

NodeIterators are used to step through a set of nodes, e.g.

NodeList

The NodeList interface provides the abstraction of an ordered
 collection of nodes, without defining or constraining how this collection
 is implemented.

NodeSetData<T>

An abstract representation of a Data type containing a
 node-set.

NoInitialContextException

This exception is thrown when no initial context implementation
 can be created.

NoninvertibleTransformException

The NoninvertibleTransformException class represents
 an exception that is thrown if an operation is performed requiring
 the inverse of an AffineTransform object but the
 AffineTransform is in a non-invertible state.

NonReadableChannelException

Unchecked exception thrown when an attempt is made to read
 from a channel that was not originally opened for reading.

NonWritableChannelException

Unchecked exception thrown when an attempt is made to write
 to a channel that was not originally opened for writing.

NoPermissionException

This exception is thrown when attempting to perform an operation
 for which the client has no permission.

Normalizer

This class provides the method normalize which transforms Unicode
 text into an equivalent composed or decomposed form, allowing for easier
 sorting and searching of text.

Normalizer.Form

This enum provides constants of the four Unicode normalization forms
 that are described in
 
 Unicode Standard Annex #15 — Unicode Normalization Forms
 and two methods to access them.

NoRouteToHostException

Signals that an error occurred while attempting to connect a
 socket to a remote address and port.

NoSuchAlgorithmException

This exception is thrown when a particular cryptographic algorithm is
 requested but is not available in the environment.

NoSuchAttributeException

This exception is thrown when attempting to access
 an attribute that does not exist.

NoSuchDynamicMethodException

Thrown at the invocation if the call site can not be linked by any available GuardingDynamicLinker.

NoSuchElementException

Thrown by various accessor methods to indicate that the element being requested
 does not exist.

NoSuchFieldError

Thrown if an application tries to access or modify a specified
 field of an object, and that object no longer has that field.

NoSuchFieldException

Signals that the class doesn't have a field of a specified name.

NoSuchFileException

Checked exception thrown when an attempt is made to access a file that does
 not exist.

NoSuchMechanismException

This exception is thrown when a particular XML mechanism is requested but
 is not available in the environment.

NoSuchMethodError

Thrown if an application tries to call a specified method of a
 class (either static or instance), and that class no longer has a
 definition of that method.

NoSuchMethodException

Thrown when a particular method cannot be found.

NoSuchObjectException

A NoSuchObjectException is thrown if an attempt is made to
 invoke a method on an object that no longer exists in the remote virtual
 machine.

NoSuchPaddingException

This exception is thrown when a particular padding mechanism is
 requested but is not available in the environment.

NoSuchProviderException

This exception is thrown when a particular security provider is
 requested but is not available in the environment.

NotActiveException

Thrown when serialization or deserialization is not active.

Notation

This interface represents a notation declared in the DTD.

NotationDeclaration

An interface for handling Notation Declarations

 Receive notification of a notation declaration event.

NotBoundException

A NotBoundException is thrown if an attempt
 is made to lookup or unbind in the registry a name that has
 no associated binding.

NotCompliantMBeanException

Exception which occurs when trying to register an  object in the MBean server that is not a JMX compliant MBean.

NotContextException

This exception is thrown when a naming operation proceeds to a point
 where a context is required to continue the operation, but the
 resolved object is not a context.

NotDirectoryException

Checked exception thrown when a file system operation, intended for a
 directory, fails because the file is not a directory.

Notification

A notification from the SCTP stack.

Notification

The Notification class represents a notification emitted by an
 MBean.

NotificationBroadcaster

Interface implemented by an MBean that emits Notifications.

NotificationBroadcasterSupport

Provides an implementation of NotificationEmitter
 interface.

NotificationEmitter

Interface implemented by an MBean that emits Notifications.

NotificationFilter

To be implemented by a any class acting as a notification filter.

NotificationFilterSupport

Provides an implementation of the NotificationFilter interface.

NotificationHandler<T>

A handler for consuming notifications from the SCTP stack.

NotificationListener

Should be implemented by an object that wants to receive notifications.

NotificationResult

Result of a query for buffered notifications.

NotLinkException

Checked exception thrown when a file system operation fails because a file
 is not a symbolic link.

NotSerializableException

Thrown when an instance is required to have a Serializable interface.

NotYetBoundException

Unchecked exception thrown when an attempt is made to invoke an I/O
 operation upon a server socket channel that is not yet bound.

NotYetConnectedException

Unchecked exception thrown when an attempt is made to invoke an I/O
 operation upon a socket channel that is not yet connected.

NoType

A pseudo-type used where no actual type is appropriate.

NTDomainPrincipal

This class implements the Principal interface
 and represents the name of the Windows NT domain into which the
 user authenticated.

NTLoginModule

This LoginModule
 renders a user's NT security information as some number of
 Principals
 and associates them with a Subject.

NTNumericCredential

This class abstracts an NT security token
 and provides a mechanism to do same-process security impersonation.

NTSid

This class implements the Principal interface
 and represents information about a Windows NT user, group or realm.

NTSidDomainPrincipal

This class extends NTSid
 and represents a Windows NT user's domain SID.

NTSidGroupPrincipal

This class extends NTSid
 and represents one of the groups to which a Windows NT user belongs.

NTSidPrimaryGroupPrincipal

This class extends NTSid
 and represents a Windows NT user's primary group SID.

NTSidUserPrincipal

This class extends NTSid
 and represents a Windows NT user's SID.

NTSystem

This class implementation retrieves and makes available NT
 security information for the current user.

NTUserPrincipal

This class implements the Principal interface
 and represents a Windows NT user.

NullCipher

The NullCipher class is a class that provides an
 "identity cipher" -- one that does not transform the plain text.

NullPointerException

Thrown when an application attempts to use null in a
 case where an object is required.

NullType

Represents the null type.

Number

The abstract class Number is the superclass of platform
 classes representing numeric values that are convertible to the
 primitive types byte, double, float, 
 int, long, and short.

NumberFormat

NumberFormat is the abstract base class for all number
 formats.

NumberFormat.Field

Defines constants that are used as attribute keys in the
 AttributedCharacterIterator returned
 from NumberFormat.formatToCharacterIterator and as
 field identifiers in FieldPosition.

NumberFormat.Style

A number format style.

NumberFormatException

Thrown to indicate that the application has attempted to convert
 a string to one of the numeric types, but that the string does not
 have the appropriate format.

NumberFormatProvider

An abstract class for service providers that
 provide concrete implementations of the
 NumberFormat class.

NumberFormatter

NumberFormatter subclasses InternationalFormatter
 adding special behavior for numbers.

NumberOfDocuments

Class NumberOfDocuments is an integer valued printing attribute that
 indicates the number of individual docs the printer has accepted for this
 job, regardless of whether the docs' print data has reached the printer or
 not.

NumberOfInterveningJobs

Class NumberOfInterveningJobs is an integer valued printing attribute
 that indicates the number of jobs that are ahead of this job in the relative
 chronological order of expected time to complete (i.e., the current scheduled
 order).

NumberUp

Class NumberUp is an integer valued printing attribute class that
 specifies the number of print-stream pages to impose upon a single side of an
 instance of a selected medium.

NumberUpSupported

Class NumberUpSupported is a printing attribute class, a set of
 integers, that gives the supported values for a NumberUp
 attribute.

NumericShaper

The NumericShaper class is used to convert Latin-1 (European)
 digits to other Unicode decimal digits.

NumericShaper.Range

A NumericShaper.Range represents a Unicode range of a
 script having its own decimal digits.

OAEPParameterSpec

This class specifies the set of parameters used with OAEP Padding,
 as defined in the
 PKCS#1 v2.2 standard.

ObjDoubleConsumer<T>

Represents an operation that accepts an object-valued and a
 double-valued argument, and returns no result.

Object

Class Object is the root of the class hierarchy.

ObjectChangeListener

Specifies the method that a listener of a NamingEvent
 with event type of OBJECT_CHANGED must implement.

ObjectCollectedException

Thrown to indicate that the requested operation cannot be
 completed because the specified object has been garbage collected.

ObjectFactory

This interface represents a factory for creating an object.

ObjectFactoryBuilder

This interface represents a builder that creates object factories.

ObjectInput

ObjectInput extends the DataInput interface to include the reading of
 objects.

ObjectInputFilter

Filter classes, array lengths, and graph metrics during deserialization.

ObjectInputFilter.Config

A utility class to set and get the JVM-wide deserialization filter factory,
 the static JVM-wide filter, or to create a filter from a pattern string.

ObjectInputFilter.FilterInfo

FilterInfo provides access to information about the current object
 being deserialized and the status of the ObjectInputStream.

ObjectInputFilter.Status

The status of a check on the class, array length, number of references,
 depth, and stream size.

ObjectInputStream

An ObjectInputStream deserializes primitive data and objects previously
 written using an ObjectOutputStream.

ObjectInputStream.GetField

Provide access to the persistent fields read from the input stream.

ObjectInputValidation

Callback interface to allow validation of objects within a graph.

ObjectInstance

Used to represent the object name of an MBean and its class name.

ObjectMethods

Bootstrap methods for state-driven implementations of core methods,
 including Object.equals(Object), Object.hashCode(), and
 Object.toString().

ObjectName

Represents the object name of an MBean, or a pattern that can
 match the names of several MBeans.

ObjectOutput

ObjectOutput extends the DataOutput interface to include writing of objects.

ObjectOutputStream

An ObjectOutputStream writes primitive data types and graphs of Java objects
 to an OutputStream.

ObjectOutputStream.PutField

Provide programmatic access to the persistent fields to be written
 to ObjectOutput.

ObjectReference

An object that currently exists in the target VM.

Objects

This class consists of static utility methods for operating
 on objects, or checking certain conditions before operation.

ObjectStreamClass

Serialization's descriptor for classes.

ObjectStreamConstants

Constants written into the Object Serialization Stream.

ObjectStreamException

Superclass of all exceptions specific to Object Stream classes.

ObjectStreamField

A description of a Serializable field from a Serializable class.

ObjectView

Component decorator that implements the view interface
 for <object> elements.

ObjID

An ObjID is used to identify a remote object exported
 to an RMI runtime.

ObjIntConsumer<T>

Represents an operation that accepts an object-valued and a
 int-valued argument, and returns no result.

ObjLongConsumer<T>

Represents an operation that accepts an object-valued and a
 long-valued argument, and returns no result.

Observable
Deprecated.
This class and the Observer interface have been deprecated.

Observer
Deprecated.
This interface has been deprecated.

OceanTheme

The default theme for the MetalLookAndFeel.

OctetStreamData

A representation of a Data type containing an octet stream.

OffsetDateTime

A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
 such as 2007-12-03T10:15:30+01:00.

OffsetTime

A time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
 such as 10:15:30+01:00.

Oid

This class represents Universal Object Identifiers (Oids) and their
 associated operations.

OpenDataException

This checked exception is thrown when an open type, an open data  or an open MBean metadata info instance
 could not be constructed because one or more validity constraints were not met.

OpenFilesEvent

Event sent when the app is asked to open a list of files.

OpenFilesHandler

An implementor is notified when the application is asked to open a list of
 files.

OpenMBeanAttributeInfo

Describes an attribute of an open MBean.

OpenMBeanAttributeInfoSupport

Describes an attribute of an open MBean.

OpenMBeanConstructorInfo

Describes a constructor of an Open MBean.

OpenMBeanConstructorInfoSupport

Describes a constructor of an Open MBean.

OpenMBeanInfo

Describes an Open MBean: an Open MBean is recognized as such if
 its getMBeanInfo() method returns an instance of a class which
 implements the OpenMBeanInfo interface, typically OpenMBeanInfoSupport.

OpenMBeanInfoSupport

The OpenMBeanInfoSupport class describes the management
 information of an open MBean: it is a subclass of MBeanInfo, and it implements the OpenMBeanInfo interface.

OpenMBeanOperationInfo

Describes an operation of an Open MBean.

OpenMBeanOperationInfoSupport

Describes an operation of an Open MBean.

OpenMBeanParameterInfo

Describes a parameter used in one or more operations or
 constructors of an open MBean.

OpenMBeanParameterInfoSupport

Describes a parameter used in one or more operations or
 constructors of an open MBean.

OpenOption

An object that configures how to open or create a file.

OpensTree

A tree node for an 'opens' directive in a module declaration.

OpenType

The OpenType interface represents OpenType and
 TrueType fonts.

OpenType<T>

The OpenType class is the parent abstract class of all classes which describe the actual open type
 of open data values.

OpenURIEvent

Event sent when the app is asked to open a URI.

OpenURIHandler

An implementor is notified when the application is asked to open a URI.

OperatingSystemMXBean

Platform-specific management interface for the operating system
 on which the Java virtual machine is running.

OperatingSystemMXBean

The management interface for the operating system on which
 the Java virtual machine is running.

Operation
Deprecated.
no replacement

Operation

An object that describes a dynamic operation.

OperationNotSupportedException

This exception is thrown when a context implementation does not support
 the operation being invoked.

OperationsException

Represents exceptions thrown in the MBean server when performing operations
 on MBeans.

Option

Value for the ListModel used to represent
 <option> elements.

Optional<T>

A container object which may or may not contain a non-null value.

OptionalDataException

Exception indicating the failure of an object read operation due to
 unread primitive data, or the end of data belonging to a serialized
 object in the stream.

OptionalDouble

A container object which may or may not contain a double value.

OptionalInt

A container object which may or may not contain an int value.

OptionalLong

A container object which may or may not contain a long value.

OptionChecker

Interface for recognizing options.

OptionPaneUI

Pluggable look and feel interface for JOptionPane.

OrientationRequested

Class OrientationRequested is a printing attribute class, an
 enumeration, that indicates the desired orientation for printed print-stream
 pages; it does not describe the orientation of the client-supplied
 print-stream pages.

OutOfMemoryError

Thrown when the Java Virtual Machine cannot allocate an object
 because it is out of memory, and no more memory could be made
 available by the garbage collector.

OutputDeviceAssigned

Class OutputDeviceAssigned is a printing attribute class, a text
 attribute, that identifies the output device to which the service has
 assigned this job.

OutputKeys

Provides string constants that can be used to set
 output properties for a Transformer, or to retrieve
 output properties from a Transformer or Templates object.

OutputStream

This abstract class is the superclass of all classes representing
 an output stream of bytes.

OutputStreamWriter

An OutputStreamWriter is a bridge from character streams to byte streams:
 Characters written to it are encoded into bytes using a specified charset.

OverlappingFileLockException

Unchecked exception thrown when an attempt is made to acquire a lock on a
 region of a file that overlaps a region already locked by the same Java
 virtual machine, or when another thread is already waiting to lock an
 overlapping region of the same file.

OverlayLayout

A layout manager to arrange components over the top
 of each other.

Override

Indicates that a method declaration is intended to override a
 method declaration in a supertype.

Package

Represents metadata about a run-time package associated with a class loader.

PackageElement

Represents a package program element.

PackageTree

Represents the package declaration.

PackedColorModel

The PackedColorModel class is an abstract
 ColorModel class that works with pixel values which represent
 color and alpha information as separate samples and which pack all
 samples for a single pixel into a single int, short, or byte quantity.

Pageable

The Pageable implementation represents a set of
 pages to be printed.

PageAttributes

A set of attributes which control the output of a printed page.

PageAttributes.ColorType

A type-safe enumeration of possible color states.

PageAttributes.MediaType

A type-safe enumeration of possible paper sizes.

PageAttributes.OrientationRequestedType

A type-safe enumeration of possible orientations.

PageAttributes.OriginType

A type-safe enumeration of possible origins.

PageAttributes.PrintQualityType

A type-safe enumeration of possible print qualities.

PagedResultsControl

Requests that the results of a search operation be returned by the LDAP
 server in batches of a specified size.

PagedResultsResponseControl

Indicates the end of a batch of search results.

PageFormat

The PageFormat class describes the size and
 orientation of a page to be printed.

PageRanges

Class PageRanges is a printing attribute class, a set of integers,
 that identifies the range(s) of print-stream pages that the Printer object
 uses for each copy of each document which are to be printed.

PagesPerMinute

Class PagesPerMinute is an integer valued printing attribute that
 indicates the nominal number of pages per minute to the nearest whole number
 which may be generated by this printer (e.g., simplex, black-and-white).

PagesPerMinuteColor

Class PagesPerMinuteColor is an integer valued printing attribute
 that indicates the nominal number of pages per minute to the nearest whole
 number which may be generated by this printer when printing color (e.g.,
 simplex, color).

Paint

This Paint interface defines how color patterns
 can be generated for Graphics2D operations.

PaintContext

The PaintContext interface defines the encapsulated
 and optimized environment to generate color patterns in device
 space for fill or stroke operations on a
 Graphics2D.

Painter<T>

A painting delegate.

PaintEvent

The component-level paint event.

Panel

Panel is the simplest container class.

PanelUI

Pluggable look and feel interface for Panel.

Paper

The Paper class describes the physical characteristics of
 a piece of paper.

ParagraphView

Displays the a paragraph, and uses css attributes for its
 configuration.

ParagraphView

View of a simple line-wrapping paragraph that supports
 multiple fonts, colors, components, icons, etc.

Parameter

Information about method parameters.

ParameterBlock

A ParameterBlock encapsulates all the information about sources and
 parameters (Objects) required by a RenderableImageOp, or other
 classes that process images.

ParameterDescriptor

The ParameterDescriptor class allows bean implementors to provide
 additional information on each of their parameters, beyond the
 low level type information provided by the java.lang.reflect.Method
 class.

Parameterizable

A mixin interface for an element that has type parameters.

ParameterizedType

ParameterizedType represents a parameterized type such as
 Collection<String>.

ParameterizedTypeTree

A tree node for a type expression involving type parameters.

ParameterMetaData

An object that can be used to get information about the types
 and properties for each parameter marker in a
 PreparedStatement object.

ParameterNameProvider

A provider for parameter names when the parameter names are not determined from
 a reliable source, like a classfile.

ParamTree

A tree node for an @param block tag.

ParenthesizedPatternTreePREVIEW
Preview.
A tree node for a parenthesized pattern.

ParenthesizedTree

A tree node for a parenthesized expression.

ParseException

Signals that an error has been reached unexpectedly
 while parsing.

ParsePosition

ParsePosition is a simple class used by Format
 and its subclasses to keep track of the current position during parsing.

Parser

A simple DTD-driven HTML parser.

Parser
Deprecated.
This interface has been replaced by the SAX2
             XMLReader
             interface, which includes Namespace support.

ParserAdapter

Adapt a SAX1 Parser as a SAX2 XMLReader.

ParserConfigurationException

Indicates a serious configuration error.

ParserDelegator

Responsible for starting up a new DocumentParser
 each time its parse method is invoked.

ParserFactory
Deprecated.
This class works with the deprecated
             Parser
             interface.

PartialResultException

This exception is thrown to indicate that the result being returned
 or returned so far is partial, and that the operation cannot
 be completed.

PasswordAuthentication

The class PasswordAuthentication is a data holder that is used by
 Authenticator.

PasswordCallback

 Underlying security services instantiate and pass a
 PasswordCallback to the handle
 method of a CallbackHandler to retrieve password information.

PasswordView

Implements a View suitable for use in JPasswordField
 UI implementations.

Patch

A Patch object represents a location, on a MIDI synthesizer, into
 which a single instrument is stored (loaded).

Path

An object that may be used to locate a file in a file system.

Path2D

The Path2D class provides a simple, yet flexible
 shape which represents an arbitrary geometric path.

Path2D.Double

The Double class defines a geometric path with
 coordinates stored in double precision floating point.

Path2D.Float

The Float class defines a geometric path with
 coordinates stored in single precision floating point.

PathIterator

The PathIterator interface provides the mechanism
 for objects that implement the Shape
 interface to return the geometry of their boundary by allowing
 a caller to retrieve the path of that boundary a segment at a
 time.

PathMatcher

An interface that is implemented by objects that perform match operations on
 paths.

Paths

This class consists exclusively of static methods that return a Path
 by converting a path string or URI.

PathSearchingVirtualMachine

A virtual machine which searches for classes through paths

Pattern

A compiled representation of a regular expression.

PatternSyntaxException

Unchecked exception thrown to indicate a syntax error in a
 regular-expression pattern.

PatternTreePREVIEW
Preview.
A tree node used as the base class for the different kinds of
 patterns.

PBEKey

The interface to a PBE key.

PBEKeySpec

A user-chosen password that can be used with password-based encryption
 (PBE).

PBEParameterSpec

This class specifies the set of parameters used with password-based
 encryption (PBE), as defined in the
 PKCS #5
 standard.

PDLOverrideSupported

Class PDLOverrideSupported is a printing attribute class, an
 enumeration, that expresses the printer's ability to attempt to override
 processing instructions embedded in documents' print data with processing
 instructions specified as attributes outside the print data.

PeerAddressChangeNotification

Notification emitted when a destination address on a multi-homed peer
 encounters a change.

PeerAddressChangeNotification.AddressChangeEvent

Defines the type of address change event that occurred to the destination
 address on a multi-homed peer when it encounters a change of interface
 details.

Percentage

Event field annotation to use on fractions, typically between 0.0
 and 1.0, to specify that the value is a percentage.

Period

A date-based amount of time in the ISO-8601 calendar system,
 such as '2 years, 3 months and 4 days'.

Period

Event annotation, specifies the default setting value for a periodic event.

Permission

Abstract class for representing access to a system resource.

PermissionCollection

Abstract class representing a collection of Permission objects.

Permissions

This class represents a heterogeneous collection of Permissions.

PersistenceDelegate

The PersistenceDelegate class takes the responsibility
 for expressing the state of an instance of a given class
 in terms of the methods in the class's public API.

PersistentMBean

This class is the interface to be implemented by MBeans that are meant to be
  persistent.

PersistentSnippet

Grouping for Snippets which persist and influence future code.

PGPData

A representation of the XML PGPData element as defined in
 the 
 W3C Recommendation for XML-Signature Syntax and Processing.

PhantomReference<T>

Phantom reference objects, which are enqueued after the collector
 determines that their referents may otherwise be reclaimed.

Phaser

A reusable synchronization barrier, similar in functionality to
 CyclicBarrier and CountDownLatch but supporting
 more flexible usage.

Pipe

A pair of channels that implements a unidirectional pipe.

Pipe.SinkChannel

A channel representing the writable end of a Pipe.

Pipe.SourceChannel

A channel representing the readable end of a Pipe.

PipedInputStream

A piped input stream should be connected
 to a piped output stream; the piped  input
 stream then provides whatever data bytes
 are written to the piped output  stream.

PipedOutputStream

A piped output stream can be connected to a piped input stream
 to create a communications pipe.

PipedReader

Piped character-input streams.

PipedWriter

Piped character-output streams.

PixelGrabber

The PixelGrabber class implements an ImageConsumer which can be attached
 to an Image or ImageProducer object to retrieve a subset of the pixels
 in that image.

PixelInterleavedSampleModel

This class represents image data which is stored in a pixel interleaved
  fashion and for
  which each sample of a pixel occupies one data element of the DataBuffer.

PKCS12Attribute

An attribute associated with a PKCS12 keystore entry.

PKCS8EncodedKeySpec

This class represents the ASN.1 encoding of a private key,
 encoded according to the ASN.1 type PrivateKeyInfo.

PKIXBuilderParameters

Parameters used as input for the PKIX CertPathBuilder
 algorithm.

PKIXCertPathBuilderResult

This class represents the successful result of the PKIX certification
 path builder algorithm.

PKIXCertPathChecker

An abstract class that performs one or more checks on an
 X509Certificate.

PKIXCertPathValidatorResult

This class represents the successful result of the PKIX certification
 path validation algorithm.

PKIXParameters

Parameters used as input for the PKIX CertPathValidator
 algorithm.

PKIXReason

The PKIXReason enumerates the potential PKIX-specific reasons
 that an X.509 certification path may be invalid according to the PKIX
 (RFC 5280) standard.

PKIXRevocationChecker

A PKIXCertPathChecker for checking the revocation status of
 certificates with the PKIX algorithm.

PKIXRevocationChecker.Option

Various revocation options that can be specified for the revocation
 checking mechanism.

PlainDocument

A plain document that maintains no character attributes.

PlainView

Implements View interface for a simple multi-line text view
 that has text in one font and color.

PlatformLoggingMXBean

The management interface for the logging facility.

PlatformManagedObject

A platform managed object is a JMX MXBean
 for monitoring and managing a component in the Java platform.

Plugin

The interface for a javac plug-in.

Point

A point representing a location in (x,y) coordinate space,
 specified in integer precision.

Point2D

The Point2D class defines a point representing a location
 in (x,y) coordinate space.

Point2D.Double

The Double class defines a point specified in
 double precision.

Point2D.Float

The Float class defines a point specified in float
 precision.

PointerInfo

A class that describes the pointer position.

Policy
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

Policy.Parameters
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is
       deprecated and subject to removal in a future release.

PolicyNode

An immutable valid policy tree node as defined by the PKIX certification
 path validation algorithm.

PolicyQualifierInfo

An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo
 structure.

PolicySpi
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

Polygon

The Polygon class encapsulates a description of a
 closed, two-dimensional region within a coordinate space.

PooledConnection

An object that provides hooks for connection pool management.

PooledConnectionBuilder

A builder created from a ConnectionPoolDataSource object,
 used to establish a connection to the database that the
 data source object represents.

Popup

Popups are used to display a Component to the user, typically
 on top of all the other Components in a particular containment
 hierarchy.

PopupFactory

PopupFactory, as the name implies, is used to obtain
 instances of Popups.

PopupMenu

A class that implements a menu which can be dynamically popped up
 at a specified position within a component.

PopupMenuEvent

PopupMenuEvent only contains the source of the event which is the JPopupMenu
 sending the event

PopupMenuListener

A popup menu listener

PopupMenuUI

Pluggable look and feel interface for JPopupMenu.

Port

Ports are simple lines for input or output of audio to or from audio devices.

Port.Info

The Port.Info class extends Line.Info with additional
 information specific to ports, including the port's name and whether it
 is a source or a target for its mixer.

PortUnreachableException

Signals that an ICMP Port Unreachable message has been
 received on a connected datagram.

Position

Represents a location within a document.

Position.Bias

A typesafe enumeration to indicate bias to a position
 in the model.

PosixFileAttributes

File attributes associated with files on file systems used by operating systems
 that implement the Portable Operating System Interface (POSIX) family of
 standards.

PosixFileAttributeView

A file attribute view that provides a view of the file attributes commonly
 associated with files on file systems used by operating systems that implement
 the Portable Operating System Interface (POSIX) family of standards.

PosixFilePermission

Defines the bits for use with the permissions attribute.

PosixFilePermissions

This class consists exclusively of static methods that operate on sets of
 PosixFilePermission objects.

Predicate<T>

Represents a predicate (boolean-valued function) of one argument.

Predicate

The standard interface that provides the framework for all
 FilteredRowSet objects to describe their filters.

PreferenceChangeEvent

An event emitted by a Preferences node to indicate that
 a preference has been added, removed or has had its value changed.

PreferenceChangeListener

A listener for receiving preference change events.

Preferences

A node in a hierarchical collection of preference data.

PreferencesEvent

Event sent when the application is asked to open its preferences window.

PreferencesFactory

A factory object that generates Preferences objects.

PreferencesHandler

An implementor is notified when the app is asked to show its preferences UI.

PreparedStatement

An object that represents a precompiled SQL statement.

PresentationDirection

Class PresentationDirection is a printing attribute class, an
 enumeration, that is used in conjunction with the NumberUp
 attribute to indicate the layout of multiple print-stream pages to impose
 upon a single side of an instance of a selected medium.

PrimitiveIterator<T,T_CONS>

A base type for primitive specializations of Iterator.

PrimitiveIterator.OfDouble

An Iterator specialized for double values.

PrimitiveIterator.OfInt

An Iterator specialized for int values.

PrimitiveIterator.OfLong

An Iterator specialized for long values.

PrimitiveType

The type associated with non-object values in a target VM.

PrimitiveType

Represents a primitive type.

PrimitiveTypeTree

A tree node for a primitive type.

PrimitiveValue

The value assigned to a field or variable of primitive type in a
 target VM.

Principal

This interface represents the abstract notion of a principal, which
 can be used to represent any entity, such as an individual, a
 corporation, and a login id.

PrincipalComparator

An object that implements the java.security.Principal
 interface typically also implements this interface to provide
 a means for comparing that object to a specified Subject.

Printable

The Printable interface is implemented
 by the print methods of the current
 page painter, which is called by the printing
 system to render a page.

PrinterAbortException

The PrinterAbortException class is a subclass of
 PrinterException and is used to indicate that a user
 or application has terminated the print job while it was in
 the process of printing.

PrinterException

The PrinterException class and its subclasses are used
 to indicate that an exceptional condition has occurred in the print
 system.

PrinterGraphics

The PrinterGraphics interface is implemented by
 Graphics objects that are passed to
 Printable objects to render a page.

PrinterInfo

Class PrinterInfo is a printing attribute class, a text attribute,
 that provides descriptive information about a printer.

PrinterIOException

The PrinterIOException class is a subclass of
 PrinterException and is used to indicate that an IO error
 of some sort has occurred while printing.

PrinterIsAcceptingJobs

Class PrinterIsAcceptingJobs is a printing attribute class, an
 enumeration, that indicates whether the printer is currently able to accept
 jobs.

PrinterJob

The PrinterJob class is the principal class that controls
 printing.

PrinterLocation

Class PrinterLocation is a printing attribute class, a text
 attribute, that identifies the location of the device.

PrinterMakeAndModel

Class PrinterMakeAndModel is a printing attribute class, a text
 attribute, that the make and model of the printer.

PrinterMessageFromOperator

Class PrinterMessageFromOperator is a printing attribute class, a
 text attribute, that provides a message from an operator, system
 administrator, or "intelligent" process to indicate to the end user
 information about or status of the printer, such as why it is unavailable or
 when it is expected to be available.

PrinterMoreInfo

Class PrinterMoreInfo is a printing attribute class, a URI,
 that is used to obtain more information about this specific printer.

PrinterMoreInfoManufacturer

Class PrinterMoreInfoManufacturer is a printing attribute class, a
 URI, that is used to obtain more information about this type of
 device.

PrinterName

Class PrinterName is a printing attribute class, a text attribute,
 that specifies the name of a printer.

PrinterResolution

Class PrinterResolution is a printing attribute class that specifies
 an exact resolution supported by a printer or to be used for a print job.

PrinterState

Class PrinterState is a printing attribute class, an enumeration,
 that identifies the current state of a printer.

PrinterStateReason

Class PrinterStateReason is a printing attribute class, an
 enumeration, that provides additional information about the printer's current
 state, i.e., information that augments the value of the printer's
 PrinterState attribute.

PrinterStateReasons

Class PrinterStateReasons is a printing attribute class, a set of
 enumeration values, that provides additional information about the printer's
 current state, i.e., information that augments the value of the printer's
 PrinterState attribute.

PrinterURI

Class PrinterURI is a printing attribute class, a URI, that
 specifies the globally unique name of a printer.

PrintEvent

Class PrintEvent is the super class of all Print Service API events.

PrintException

Class PrintException encapsulates a printing-related error condition
 that occurred while using a Print Service instance.

PrintFilesEvent

Event sent when the app is asked to print a list of files.

PrintFilesHandler

An implementor can respond to requests to print documents that the app has
 been registered to handle.

PrintGraphics

An abstract class which provides a print graphics context for a page.

PrintJob

An abstract class which initiates and executes a print job.

PrintJobAdapter

An abstract adapter class for receiving print job events.

PrintJobAttribute

PrintJobAttribute is a tagging interface which a printing attribute
 class implements to indicate the attribute describes the status of a Print
 Job or some other characteristic of a Print Job.

PrintJobAttributeEvent

Class PrintJobAttributeEvent encapsulates an event a
 PrintService reports to let the client know that one or more printing
 attributes for a PrintJob have changed.

PrintJobAttributeListener

Implementations of this interface are attached to a
 DocPrintJob to monitor the status of
 attribute changes associated with the print job.

PrintJobAttributeSet

Interface PrintJobAttributeSet specifies the interface for a set of
 print job attributes, i.e. printing attributes that implement interface
 PrintJobAttribute.

PrintJobEvent

Class PrintJobEvent encapsulates common events a print job reports to
 let a listener know of progress in the processing of the DocPrintJob.

PrintJobListener

Implementations of this listener interface should be attached to a
 DocPrintJob to monitor the status of the
 printer job.

PrintQuality

Class PrintQuality is a printing attribute class, an enumeration,
 that specifies the print quality that the printer uses for the job.

PrintRequestAttribute

Interface PrintRequestAttribute is a tagging interface which a
 printing attribute class implements to indicate the attribute denotes a
 requested setting for a print job.

PrintRequestAttributeSet

Interface PrintRequestAttributeSet specifies the interface for a set
 of print request attributes, i.e. printing attributes that implement
 interface PrintRequestAttribute.

PrintService

Interface PrintService is the factory for a DocPrintJob.

PrintServiceAttribute

Interface PrintServiceAttribute is a tagging interface which a
 printing attribute class implements to indicate the attribute describes the
 status of a Print Service or some other characteristic of a Print Service.

PrintServiceAttributeEvent

Class PrintServiceAttributeEvent encapsulates an event a Print
 Service instance reports to let the client know of changes in the print
 service state.

PrintServiceAttributeListener

Implementations of this listener interface are attached to a
 PrintService to monitor the status of the
 print service.

PrintServiceAttributeSet

Interface PrintServiceAttributeSet specifies the interface for a set
 of print job attributes, i.e. printing attributes that implement interface
 PrintServiceAttribute.

PrintServiceLookup

Implementations of this class provide lookup services for print services
 (typically equivalent to printers) of a particular type.

PrintStream

A PrintStream adds functionality to another output stream,
 namely the ability to print representations of various data values
 conveniently.

PrintWriter

Prints formatted representations of objects to a text-output stream.

PriorityBlockingQueue<E>

An unbounded blocking queue that uses
 the same ordering rules as class PriorityQueue and supplies
 blocking retrieval operations.

PriorityQueue<E>

An unbounded priority queue based on a priority heap.

PrivateClassLoader

Marker interface indicating that a ClassLoader should not be added
 to the ClassLoaderRepository.

PrivateCredentialPermission

This class is used to protect access to private Credentials
 belonging to a particular Subject.

PrivateKey

A private key.

PrivateMLet

An MLet that is not added to the ClassLoaderRepository.

PrivilegedAction<T>

A computation to be performed with privileges enabled.

PrivilegedActionException

This exception is thrown by
 doPrivileged(PrivilegedExceptionAction) and
 doPrivileged(PrivilegedExceptionAction,
 AccessControlContext context) to indicate
 that the action being performed threw a checked exception.

PrivilegedExceptionAction<T>

A computation to be performed with privileges enabled, that throws one or
 more checked exceptions.

Process

Process provides control of native processes started by
 ProcessBuilder.start and Runtime.exec.

ProcessBuilder

This class is used to create operating system processes.

ProcessBuilder.Redirect

Represents a source of subprocess input or a destination of
 subprocess output.

ProcessBuilder.Redirect.Type

The type of a ProcessBuilder.Redirect.

ProcessHandle

ProcessHandle identifies and provides control of native processes.

ProcessHandle.Info

Information snapshot about the process.

ProcessingEnvironment

An annotation processing tool framework will provide an annotation processor with an object
 implementing this interface so the processor can use facilities
 provided by the framework to write new files, report error
 messages, and find other utilities.

ProcessingInstruction

An interface that describes the data found in processing instructions

ProcessingInstruction

The ProcessingInstruction interface represents a "processing
 instruction", used in XML as a way to keep processor-specific information
 in the text of the document.

Processor

The interface for an annotation processor.

ProfileDataException

This exception is thrown when an error occurs in accessing or processing an
 ICC_Profile object.

ProgressBarUI

Pluggable look and feel interface for JProgressBar.

ProgressMonitor

A class to monitor the progress of some operation.

ProgressMonitorInputStream

Monitors the progress of reading from some InputStream.

Properties

The Properties class represents a persistent set of
 properties.

PropertyChangeEvent

A "PropertyChange" event gets delivered whenever a bean changes a "bound"
 or "constrained" property.

PropertyChangeListener

A "PropertyChange" event gets fired whenever a bean changes a "bound"
 property.

PropertyChangeListenerProxy

A class which extends the EventListenerProxy
 specifically for adding a PropertyChangeListener
 with a "bound" property.

PropertyChangeSupport

This is a utility class that can be used by beans that support bound
 properties.

PropertyDescriptor

A PropertyDescriptor describes one property that a Java Bean
 exports via a pair of accessor methods.

PropertyEditor

A PropertyEditor class provides support for GUIs that want to
 allow users to edit a property value of a given type.

PropertyEditorManager

The PropertyEditorManager can be used to locate a property editor for
 any given type name.

PropertyEditorSupport

This is a support class to help build property editors.

PropertyPermission

This class is for property permissions.

PropertyResourceBundle

PropertyResourceBundle is a concrete subclass of
 ResourceBundle that manages resources for a locale
 using a set of static strings from a property file.

PropertyVetoException

A PropertyVetoException is thrown when a proposed change to a
 property represents an unacceptable value.

ProtectionDomain

The ProtectionDomain class encapsulates the characteristics of a domain,
 which encloses a set of classes whose instances are granted a set
 of permissions when being executed on behalf of a given set of Principals.

ProtocolException

Thrown to indicate that there is an error in the underlying
 protocol, such as a TCP error.

ProtocolFamily

Represents a family of communication protocols.

Provider

This class represents a "provider" for the
 Java Security API, where a provider implements some or all parts of
 Java Security.

Provider.Service

The description of a security service.

ProviderException

A runtime exception for Provider exceptions (such as
 misconfiguration errors or unrecoverable internal errors),
 which may be subclassed by Providers to
 throw specialized, provider-specific runtime errors.

ProviderMismatchException

Unchecked exception thrown when an attempt is made to invoke a method on an
 object created by one file system provider with a parameter created by a
 different file system provider.

ProviderNotFoundException

Runtime exception thrown when a provider of the required type cannot be found.

ProvidesTree

A tree node for a @provides block tag.

ProvidesTree

A tree node for a 'provides' directive in a module declaration.

Proxy

Proxy provides static methods for creating objects that act like instances
 of interfaces but allow for customized method invocation.

Proxy

This class represents a proxy setting, typically a type (http, socks) and
 a socket address.

Proxy.Type

Represents the proxy type.

ProxySelector

Selects the proxy server to use, if any, when connecting to the
 network resource referenced by a URL.

PseudoColumnUsage

Enumeration for pseudo/hidden column usage.

PSource

This class specifies the source for encoding input P in OAEP Padding,
 as defined in the
 PKCS#1 v2.2 standard.

PSource.PSpecified

This class is used to explicitly specify the value for
 encoding input P in OAEP Padding.

PSSParameterSpec

This class specifies a parameter spec for RSASSA-PSS signature scheme,
 as defined in the
 PKCS#1 v2.2 standard.

PublicKey

A public key.

PushbackInputStream

A PushbackInputStream adds
 functionality to another input stream, namely
 the  ability to "push back" or "unread" bytes,
 by storing pushed-back bytes in an internal buffer.

PushbackReader

A character-stream reader that allows characters to be pushed back into the
 stream.

QName

QName represents a qualified name
 as defined in the XML specifications: XML Schema Part2:
 Datatypes specification, Namespaces
 in XML.

QuadCurve2D

The QuadCurve2D class defines a quadratic parametric curve
 segment in (x,y) coordinate space.

QuadCurve2D.Double

A quadratic parametric curve segment specified with
 double coordinates.

QuadCurve2D.Float

A quadratic parametric curve segment specified with
 float coordinates.

QualifiedNameable

A mixin interface for an element that has a qualified name.

Query

Constructs query object constraints.

QueryEval

Allows a query to be performed in the context of a specific MBean server.

QueryExp

Represents relational constraints similar to database query "where
 clauses".

Queue<E>

A collection designed for holding elements prior to processing.

QueuedJobCount

Class QueuedJobCount is an integer valued printing attribute that
 indicates the number of jobs in the printer whose JobState
 is either PENDING, PENDING_HELD, PROCESSING, or
 PROCESSING_STOPPED.

QuitEvent

Event sent when the application is asked to quit.

QuitHandler

An implementor determines if requests to quit this application should proceed
 or cancel.

QuitResponse

Used to respond to a request to quit the application.

QuitStrategy

The strategy used to shut down the application, if Sudden Termination is not
 enabled.

RadialGradientPaint

The RadialGradientPaint class provides a way to fill a shape with
 a circular radial color gradient pattern.

Random

An instance of this class is used to generate a stream of
 pseudorandom numbers; its period is only 248.

RandomAccess

Marker interface used by List implementations to indicate that
 they support fast (generally constant time) random access.

RandomAccessFile

Instances of this class support both reading and writing to a
 random access file.

RandomGenerator

The RandomGenerator interface is designed to provide a common
 protocol for objects that generate random or (more typically) pseudorandom
 sequences of numbers (or Boolean values).

RandomGenerator.ArbitrarilyJumpableGenerator

This interface is designed to provide a common protocol for objects that
 generate sequences of pseudorandom values and can easily jump
 forward, by an arbitrary amount, to a distant point in the state cycle.

RandomGenerator.JumpableGenerator

This interface is designed to provide a common protocol for objects that
 generate pseudorandom values and can easily jump forward, by a
 moderate amount (ex. 264) to a distant point in the state cycle.

RandomGenerator.LeapableGenerator

This interface is designed to provide a common protocol for objects that
 generate sequences of pseudorandom values and can easily not only jump
 but also leap forward, by a large amount (ex. 2128), to
 a very distant point in the state cycle.

RandomGenerator.SplittableGenerator

This interface is designed to provide a common protocol for objects that
 generate sequences of pseudorandom values and can be split into
 two objects (the original one and a new one) each of which obey that same
 protocol (and therefore can be recursively split indefinitely).

RandomGenerator.StreamableGenerator

The RandomGenerator.StreamableGenerator interface augments the
 RandomGenerator interface to provide methods that return streams
 of RandomGenerator objects.

RandomGeneratorFactory<T extends RandomGenerator>

This is a factory class for generating multiple random number generators
 of a specific algorithm.

Range

See also the Document Object Model (DOM) Level 2 Traversal and Range Specification.

RangeException

Range operations may throw a RangeException as specified in
 their method descriptions.

Raster

A class representing a rectangular array of pixels.

RasterFormatException

The RasterFormatException is thrown if there is
 invalid layout information in the Raster.

RasterOp

This interface describes single-input/single-output
 operations performed on Raster objects.

RC2ParameterSpec

This class specifies the parameters used with the
 RC2
 algorithm.

RC5ParameterSpec

This class specifies the parameters used with the
 RC5
 algorithm.

Rdn

This class represents a relative distinguished name, or RDN, which is a
 component of a distinguished name as specified by
 RFC 2253.

Readable

A Readable is a source of characters.

ReadableByteChannel

A channel that can read bytes.

Reader

Abstract class for reading character streams.

ReadOnlyBufferException

Unchecked exception thrown when a content-mutation method such as
 put or compact is invoked upon a read-only buffer.

ReadOnlyFileSystemException

Unchecked exception thrown when an attempt is made to update an object
 associated with a read-only FileSystem.

ReadPendingException

Unchecked exception thrown when an attempt is made to read from an
 asynchronous socket channel and a previous read has not completed.

ReadWriteLock

A ReadWriteLock maintains a pair of associated locks, one for read-only operations and one for writing.

RealmCallback

This callback is used by SaslClient and SaslServer
 to retrieve realm information.

RealmChoiceCallback

This callback is used by SaslClient and SaslServer
 to obtain a realm given a list of realm choices.

Receiver

A Receiver receives MidiEvent objects and typically does
 something useful in response, such as interpreting them to generate sound or
 raw MIDI output.

Record

This is the common base class of all Java language record classes.

RecordComponent

A RecordComponent provides information about, and dynamic access to, a
 component of a record class.

RecordComponentElement

Represents a record component.

RecordedClass

A recorded Java type, such as a class or an interface.

RecordedClassLoader

A recorded Java class loader.

RecordedEvent

A recorded event.

RecordedFrame

A recorded frame in a stack trace.

RecordedMethod

A recorded method.

RecordedObject

A complex data type that consists of one or more fields.

RecordedStackTrace

A recorded stack trace.

RecordedThread

A recorded thread.

RecordedThreadGroup

A recorded Java thread group.

Recording

Provides means to configure, start, stop and dump recording data to disk.

RecordingFile

A recording file.

RecordingInfo

Management representation of a Recording.

RecordingState

Indicates a state in the life cycle of a recording.

RecordingStream

A recording stream produces events from the current JVM (Java Virtual
 Machine).

Rect

The Rect interface is used to represent any rect value.

Rectangle

A Rectangle specifies an area in a coordinate space that is
 enclosed by the Rectangle object's upper-left point
 (x,y)
 in the coordinate space, its width, and its height.

Rectangle2D

The Rectangle2D class describes a rectangle
 defined by a location (x,y) and dimension
 (w x h).

Rectangle2D.Double

The Double class defines a rectangle specified in
 double coordinates.

Rectangle2D.Float

The Float class defines a rectangle specified in float
 coordinates.

RectangularShape

RectangularShape is the base class for a number of
 Shape objects whose geometry is defined by a rectangular frame.

RecursiveAction

A recursive resultless ForkJoinTask.

RecursiveTask<V>

A recursive result-bearing ForkJoinTask.

ReentrantLock

A reentrant mutual exclusion Lock with the same basic
 behavior and semantics as the implicit monitor lock accessed using
 synchronized methods and statements, but with extended
 capabilities.

ReentrantReadWriteLock

An implementation of ReadWriteLock supporting similar
 semantics to ReentrantLock.

ReentrantReadWriteLock.ReadLock

The lock returned by method ReentrantReadWriteLock.readLock().

ReentrantReadWriteLock.WriteLock

The lock returned by method ReentrantReadWriteLock.writeLock().

Ref

The mapping in the Java programming language of an SQL REF
 value, which is a reference to an SQL structured type value in the database.

RefAddr

This class represents the address of a communications end-point.

Reference<T>

Abstract base class for reference objects.

Reference

This class represents a reference to an object that is found outside of
 the naming/directory system.

Reference

A representation of the Reference element as defined in the
 
 W3C Recommendation for XML-Signature Syntax and Processing.

Referenceable

This interface is implemented by an object that can provide a
 Reference to itself.

ReferenceQueue<T>

Reference queues, to which registered reference objects are appended by the
 garbage collector after the appropriate reachability changes are detected.

ReferenceTree

A tree node for a reference to a Java language element.

ReferenceType

The type of an object in a target VM.

ReferenceType

Represents a reference type.

ReferenceUriSchemesSupported

Class ReferenceUriSchemesSupported is a printing attribute class an
 enumeration, that indicates a "URI scheme," such as "http:" or "ftp:", that a
 printer can use to retrieve print data stored at a URI location.

ReferralException

This abstract class is used to represent a referral exception,
 which is generated in response to a referral
 such as that returned by LDAP v3 servers.

ReflectionException

Represents exceptions thrown in the MBean server when using the
 java.lang.reflect classes to invoke methods on MBeans.

ReflectiveOperationException

Common superclass of exceptions thrown by reflective operations in
 core reflection.

ReflectPermission

The Permission class for reflective operations.

Refreshable

Objects such as credentials may optionally implement this
 interface to provide the capability to refresh itself.

RefreshFailedException

Signals that a refresh operation failed.

Region

A distinct rendering area of a Swing component.

RegisterableService

An optional interface that may be provided by service provider
 objects that will be registered with a
 ServiceRegistry.

Registered

Event annotation, for programmatic event registration.

Registry

Registry is a remote interface to a simple remote
 object registry that provides methods for storing and retrieving
 remote object references bound with arbitrary string names.

RegistryHandler
Deprecated.
no replacement

RejectedExecutionException

Exception thrown by an Executor when a task cannot be
 accepted for execution.

RejectedExecutionHandler

A handler for tasks that cannot be executed by a ThreadPoolExecutor.

Relation

This interface has to be implemented by any MBean class expected to
 represent a relation managed using the Relation Service.

Relational

Meta annotation for relational annotations, to be used on an annotation.

RelationException

This class is the superclass of any exception which can be raised during
 relation management.

RelationNotFoundException

This exception is raised when there is no relation for a given relation id
 in a Relation Service.

RelationNotification

A notification of a change in the Relation Service.

RelationService

The Relation Service is in charge of creating and deleting relation types
 and relations, of handling the consistency and of providing query
 mechanisms.

RelationServiceMBean

The Relation Service is in charge of creating and deleting relation types
 and relations, of handling the consistency and of providing query
 mechanisms.

RelationServiceNotRegisteredException

This exception is raised when an access is done to the Relation Service and
 that one is not registered.

RelationSupport

A RelationSupport object is used internally by the Relation Service to
 represent simple relations (only roles, no properties or methods), with an
 unlimited number of roles, of any relation type.

RelationSupportMBean

A RelationSupport object is used internally by the Relation Service to
 represent simple relations (only roles, no properties or methods), with an
 unlimited number of roles, of any relation type.

RelationType

The RelationType interface has to be implemented by any class expected to
 represent a relation type.

RelationTypeNotFoundException

This exception is raised when there is no relation type with given name in
 Relation Service.

RelationTypeSupport

A RelationTypeSupport object implements the RelationType interface.

RelinkableCallSite

Interface for call sites managed by a DynamicLinker.

Remote

The Remote interface serves to identify interfaces whose
 methods may be invoked from a non-local virtual machine.

RemoteCall
Deprecated.
no replacement.

RemoteException

A RemoteException is the common superclass for a number of
 communication-related exceptions that may occur during the execution of a
 remote method call.

RemoteExecutionControl

The remote agent runs in the execution process (separate from the main JShell
 process).

RemoteObject

The RemoteObject class implements the
 java.lang.Object behavior for remote objects.

RemoteObjectInvocationHandler

An implementation of the InvocationHandler interface for
 use with Java Remote Method Invocation (Java RMI).

RemoteRecordingStream

An implementation of an EventStream that can serialize events over
 the network using an MBeanServerConnection.

RemoteRef

RemoteRef represents the handle for a remote object.

RemoteServer

The RemoteServer class is the common superclass to server
 implementations and provides the framework to support a wide range
 of remote reference semantics.

RemoteStub
Deprecated.
Statically generated stubs are deprecated, since
 stubs are generated dynamically.

RenderableImage

A RenderableImage is a common interface for rendering-independent
 images (a notion which subsumes resolution independence).

RenderableImageOp

This class handles the renderable aspects of an operation with help
 from its associated instance of a ContextualRenderedImageFactory.

RenderableImageProducer

An adapter class that implements ImageProducer to allow the
 asynchronous production of a RenderableImage.

RenderContext

A RenderContext encapsulates the information needed to produce a
 specific rendering from a RenderableImage.

RenderedImage

RenderedImage is a common interface for objects which contain
 or can produce image data in the form of Rasters.

RenderedImageFactory

The RenderedImageFactory interface (often abbreviated RIF) is
 intended to be implemented by classes that wish to act as factories
 to produce different renderings, for example by executing a series
 of BufferedImageOps on a set of sources, depending on a specific
 set of parameters, properties, and rendering hints.

Renderer

Defines the requirements for an object responsible for
 "rendering" (displaying) a value.

RenderingHints

The RenderingHints class defines and manages collections of
 keys and associated values which allow an application to provide input
 into the choice of algorithms used by other classes which perform
 rendering and image manipulation services.

RenderingHints.Key

Defines the base type of all keys used along with the
 RenderingHints class to control various
 algorithm choices in the rendering and imaging pipelines.

RepaintManager

This class manages repaint requests, allowing the number
 of repaints to be minimized, for example by collapsing multiple
 requests into a single repaint for members of a component tree.

Repeatable

The annotation interface java.lang.annotation.Repeatable is
 used to indicate that the annotation interface whose declaration it
 (meta-)annotates is repeatable.

ReplicateScaleFilter

An ImageFilter class for scaling images using the simplest algorithm.

Reporter

Interface for reporting diagnostics and other messages.

RequestingUserName

Class RequestingUserName is a printing attribute class, a text
 attribute, that specifies the name of the end user that submitted the print
 job.

RequiredModelMBean

This class is the implementation of a ModelMBean.

RequiresTree

A tree node for a 'requires' directive in a module declaration.

RescaleOp

This class performs a pixel-by-pixel rescaling of the data in the
 source image by multiplying the sample values for each pixel by a scale
 factor and then adding an offset.

ResolutionException

Thrown when resolving a set of modules, or resolving a set of modules with
 service binding, fails.

ResolutionSyntax

Class ResolutionSyntax is an abstract base class providing the common
 implementation of all attributes denoting a printer resolution.

ResolvedModule

A module in a graph of resolved modules.

Resolver

This interface represents an "intermediate context" for name resolution.

ResolveResult

This class represents the result of resolution of a name.

ResolverStyle

Enumeration of different ways to resolve dates and times.

ResourceBundle

Resource bundles contain locale-specific objects.

ResourceBundle.Control

ResourceBundle.Control defines a set of callback methods
 that are invoked by the ResourceBundle.getBundle factory
 methods during the bundle loading process.

ResourceBundleControlProvider

An interface for service providers that provide implementations of ResourceBundle.Control.

ResourceBundleProvider

ResourceBundleProvider is a service provider interface for
 resource bundles.

ResourceScope

A resource scope manages the lifecycle of one or more resources.

ResourceScope.Handle

An abstraction modelling a resource scope handle.

ResponseAPDU

A response APDU as defined in ISO/IEC 7816-4.

ResponseCache

Represents implementations of URLConnection caches.

Result

An object that implements this interface contains the information
 needed to build a transformation result tree.

ResultSet

A table of data representing a database result set, which
 is usually generated by executing a statement that queries the database.

ResultSetMetaData

An object that can be used to get information about the types
 and properties of the columns in a ResultSet object.

Retention

Indicates how long annotations with the annotated interface are to
 be retained.

RetentionPolicy

Annotation retention policy.

RetrievalMethod

A representation of the XML RetrievalMethod element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

ReturnTree

A tree node for an @return block tag.

ReturnTree

A tree node for a return statement.

ReverbType

The ReverbType class provides methods for accessing various
 reverberation settings to be applied to an audio signal.

RGBColor

The RGBColor interface is used to represent any RGB color
 value.

RGBImageFilter

This class provides an easy way to create an ImageFilter which modifies
 the pixels of an image in the default RGB ColorModel.

RMIClassLoader

RMIClassLoader comprises static methods to support
 dynamic class loading with RMI.

RMIClassLoaderSpi

RMIClassLoaderSpi is the service provider interface for
 RMIClassLoader.

RMIClientSocketFactory

An RMIClientSocketFactory instance is used by the RMI runtime
 in order to obtain client sockets for RMI calls.

RMIConnection

RMI object used to forward an MBeanServer request from a client
 to its MBeanServer implementation on the server side.

RMIConnectionImpl

Implementation of the RMIConnection interface.

RMIConnectionImpl_Stub

RMIConnectionImpl remote stub.

RMIConnector

A connection to a remote RMI connector.

RMIConnectorServer

A JMX API connector server that creates RMI-based connections
 from remote clients.

RMIFailureHandler

An RMIFailureHandler can be registered via the
 RMISocketFactory.setFailureHandler call.

RMIIIOPServerImpl
Deprecated.
This transport is no longer supported.

RMIJRMPServerImpl

An RMIServer object that is exported through JRMP and that
 creates client connections as RMI objects exported through JRMP.

RMISecurityException
Deprecated.
Use SecurityException instead.

RMISecurityManager
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

RMIServer

RMI object used to establish connections to an RMI connector.

RMIServerImpl

An RMI object representing a connector server.

RMIServerImpl_Stub

RMIServerImpl remote stub.

RMIServerSocketFactory

An RMIServerSocketFactory instance is used by the RMI runtime
 in order to obtain server sockets for RMI calls.

RMISocketFactory

An RMISocketFactory instance is used by the RMI runtime
 in order to obtain client and server sockets for RMI calls.

Robot

This class is used to generate native system input events
 for the purposes of test automation, self-running demos, and
 other applications where control of the mouse and keyboard
 is needed.

Role

Represents a role: includes a role name and referenced MBeans (via their
 ObjectNames).

RoleInfo

A RoleInfo object summarises a role in a relation type.

RoleInfoNotFoundException

This exception is raised when there is no role info with given name in a
 given relation type.

RoleList

A RoleList represents a list of roles (Role objects).

RoleNotFoundException

This exception is raised when a role in a relation does not exist, or is not
 readable, or is not settable.

RoleResult

Represents the result of a multiple access to several roles of a relation
 (either for reading or writing).

RoleStatus

This class describes the various problems which can be encountered when
 accessing a role.

RoleUnresolved

Represents an unresolved role: a role not retrieved from a relation due
 to a problem.

RoleUnresolvedList

A RoleUnresolvedList represents a list of RoleUnresolved objects,
 representing roles not retrieved from a relation due to a problem
 encountered when trying to access (read or write) the roles.

RootPaneContainer

This interface is implemented by components that have a single
 JRootPane child: JDialog, JFrame, JWindow, JApplet, JInternalFrame.

RootPaneUI

Pluggable look and feel interface for JRootPane.

RoundEnvironment

An annotation processing tool framework will provide an annotation processor with an object
 implementing this interface so that the processor can query for
 information about a round of annotation processing.

RoundingMode

Specifies a rounding policy for numerical operations capable
 of discarding precision.

RoundRectangle2D

The RoundRectangle2D class defines a rectangle with
 rounded corners defined by a location (x,y), a
 dimension (w x h), and the width and height of an arc
 with which to round the corners.

RoundRectangle2D.Double

The Double class defines a rectangle with rounded
 corners all specified in double coordinates.

RoundRectangle2D.Float

The Float class defines a rectangle with rounded
 corners all specified in float coordinates.

RowFilter<M,I>

RowFilter is used to filter out entries from the
 model so that they are not shown in the view.

RowFilter.ComparisonType

Enumeration of the possible comparison values supported by
 some of the default RowFilters.

RowFilter.Entry<M,I>

An Entry object is passed to instances of
 RowFilter, allowing the filter to get the value of the
 entry's data, and thus to determine whether the entry should be shown.

RowId

The representation (mapping) in the Java programming language of an SQL ROWID
 value.

RowIdLifetime

Enumeration for RowId life-time values.

RowMapper

Defines the requirements for an object that translates paths in
 the tree into display rows.

RowSet

The interface that adds support to the JDBC API for the
 JavaBeans component model.

RowSetEvent

An Event object generated when an event occurs to a
 RowSet object.

RowSetFactory

An interface that defines the implementation of a factory that is used
 to obtain different types of RowSet implementations.

RowSetInternal

The interface that a RowSet object implements in order to
 present itself to a RowSetReader or RowSetWriter
 object.

RowSetListener

An interface that must be implemented by a
 component that wants to be notified when a significant
 event happens in the life of a RowSet object.

RowSetMetaData

An object that contains information about the columns in a
 RowSet object.

RowSetMetaDataImpl

Provides implementations for the methods that set and get
 metadata information about a RowSet object's columns.

RowSetProvider

A factory API that enables applications to obtain a
 RowSetFactory implementation  that can be used to create different
 types of RowSet implementations.

RowSetReader

The facility that a disconnected RowSet object calls on
 to populate itself with rows of data.

RowSetWarning

An extension of SQLException that provides information
 about database warnings set on RowSet objects.

RowSetWriter

An object that implements the RowSetWriter interface,
 called a writer.

RowSorter<M>

RowSorter provides the basis for sorting and filtering.

RowSorter.SortKey

SortKey describes the sort order for a particular column.

RowSorterEvent

RowSorterEvent provides notification of changes to
 a RowSorter.

RowSorterEvent.Type

Enumeration of the types of RowSorterEvents.

RowSorterListener

RowSorterListeners are notified of changes to a
 RowSorter.

RSAKey

The interface to a public or private key in
 PKCS#1 v2.2 standard,
 such as those for RSA, or RSASSA-PSS algorithms.

RSAKeyGenParameterSpec

This class specifies the set of parameters used to generate an RSA
 key pair.

RSAMultiPrimePrivateCrtKey

The interface to an RSA multi-prime private key, as defined in the
 PKCS#1 v2.2 standard,
 using the Chinese Remainder Theorem (CRT) information values.

RSAMultiPrimePrivateCrtKeySpec

This class specifies an RSA multi-prime private key, as defined in the
 PKCS#1 v2.2 standard
 using the Chinese Remainder Theorem (CRT) information values
 for efficiency.

RSAOtherPrimeInfo

This class represents the triplet (prime, exponent, and coefficient)
 inside RSA's OtherPrimeInfo structure, as defined in the
 PKCS#1 v2.2 standard.

RSAPrivateCrtKey

The interface to an RSA private key, as defined in the
 PKCS#1 v2.2 standard,
 using the Chinese Remainder Theorem (CRT) information values.

RSAPrivateCrtKeySpec

This class specifies an RSA private key, as defined in the
 PKCS#1 v2.2 standard,
 using the Chinese Remainder Theorem (CRT) information values for efficiency.

RSAPrivateKey

The interface to an RSA private key.

RSAPrivateKeySpec

This class specifies an RSA private key.

RSAPSSParameterSpec

Parameters for the 
 XML Signature RSASSA-PSS Algorithm.

RSAPublicKey

The interface to an RSA public key.

RSAPublicKeySpec

This class specifies an RSA public key.

RTFEditorKit

This is the default implementation of RTF editing
 functionality.

RuleBasedCollator

The RuleBasedCollator class is a concrete subclass of
 Collator that provides a simple, data-driven, table
 collator.

Runnable

The Runnable interface should be implemented by any
 class whose instances are intended to be executed by a thread.

RunnableFuture<V>

A Future that is Runnable.

RunnableScheduledFuture<V>

A ScheduledFuture that is Runnable.

Runtime

Every Java application has a single instance of class
 Runtime that allows the application to interface with
 the environment in which the application is running.

Runtime.Version

A representation of a version string for an implementation of the
 Java SE Platform.

RuntimeErrorException

When a java.lang.Error occurs in the agent it should be caught and
 re-thrown as a RuntimeErrorException.

RuntimeException

RuntimeException is the superclass of those
 exceptions that can be thrown during the normal operation of the
 Java Virtual Machine.

RuntimeMBeanException

Represents runtime exceptions thrown by MBean methods in
 the agent.

RuntimeMXBean

The management interface for the runtime system of
 the Java virtual machine.

RuntimeOperationsException

Represents runtime exceptions thrown in the agent when performing operations on MBeans.

RuntimePermission

This class is for runtime permissions.

SafeVarargs

A programmer assertion that the body of the annotated method or
 constructor does not perform potentially unsafe operations on its
 varargs parameter.

SampleModel

This abstract class defines an interface for extracting samples of pixels
  in an image.

Sasl

A static class for creating SASL clients and servers.

SaslClient

Performs SASL authentication as a client.

SaslClientFactory

An interface for creating instances of SaslClient.

SaslException

This class represents an error that has occurred when using SASL.

SaslServer

Performs SASL authentication as a server.

SaslServerFactory

An interface for creating instances of SaslServer.

Savepoint

The representation of a savepoint, which is a point within
 the current transaction that can be referenced from the
 Connection.rollback method.

SAXException

Encapsulate a general SAX error or warning.

SAXNotRecognizedException

Exception class for an unrecognized identifier.

SAXNotSupportedException

Exception class for an unsupported operation.

SAXParseException

Encapsulate an XML parse error or warning.

SAXParser

Defines the API that wraps an XMLReader
 implementation class.

SAXParserFactory

Defines a factory API that enables applications to configure and
 obtain a SAX based parser to parse XML documents.

SAXResult

Acts as an holder for a transformation Result.

SAXSource

Acts as an holder for SAX-style Source.

SAXTransformerFactory

This class extends TransformerFactory to provide SAX-specific
 factory methods.

Scanner

A simple text scanner which can parse primitive types and strings using
 regular expressions.

ScatteringByteChannel

A channel that can read bytes into a sequence of buffers.

ScheduledExecutorService

An ExecutorService that can schedule commands to run after a given
 delay, or to execute periodically.

ScheduledFuture<V>

A delayed result-bearing action that can be cancelled.

ScheduledThreadPoolExecutor

A ThreadPoolExecutor that can additionally schedule
 commands to run after a given delay, or to execute periodically.

Schema

Immutable in-memory representation of grammar.

SchemaFactory

Factory that creates Schema objects.

SchemaFactoryConfigurationError

Thrown when a problem with configuration with the Schema Factories
 exists.

SchemaFactoryLoader

Factory that creates SchemaFactory.

SchemaViolationException

This exception is thrown when a method
 in some ways violates the schema.

Scope

Interface for determining locally available program elements, such as
 local variables and imports.

ScreenSleepEvent

Event sent when the displays attached to the system enter and exit power save
 sleep.

ScreenSleepListener

Implementors receive notification when the displays attached to the system
 have entered power save sleep.

ScriptContext

The interface whose implementing classes are used to connect Script Engines
 with objects, such as scoped Bindings, in hosting applications.

ScriptEngine

ScriptEngine is the fundamental interface whose methods must be
 fully functional in every implementation of this specification.

ScriptEngineFactory

ScriptEngineFactory is used to describe and instantiate
 ScriptEngines.

ScriptEngineManager

The ScriptEngineManager implements a discovery and instantiation
 mechanism for ScriptEngine classes and also maintains a
 collection of key/value pairs storing state shared by all engines created
 by the Manager.

ScriptException

The generic Exception class for the Scripting APIs.

Scrollable

An interface that provides information to a scrolling container
 like JScrollPane.

Scrollbar

The Scrollbar class embodies a scroll bar, a
 familiar user-interface object.

ScrollBarUI

Pluggable look and feel interface for JScrollBar.

ScrollPane

A container class which implements automatic horizontal and/or
 vertical scrolling for a single child component.

ScrollPaneAdjustable

This class represents the state of a horizontal or vertical
 scrollbar of a ScrollPane.

ScrollPaneConstants

Constants used with the JScrollPane component.

ScrollPaneLayout

The layout manager used by JScrollPane.

ScrollPaneLayout.UIResource

The UI resource version of ScrollPaneLayout.

ScrollPaneUI

Pluggable look and feel interface for JScrollPane.

SctpChannel

A selectable channel for message-oriented connected SCTP sockets.

SctpMultiChannel

A selectable channel for message-oriented SCTP sockets.

SctpServerChannel

A selectable channel for message-oriented listening SCTP sockets.

SctpSocketOption<T>

A socket option associated with an SCTP channel.

SctpStandardSocketOptions

SCTP channels supports the socket options defined by this class
 (as well as those listed in the particular channel class) and may support
 additional Implementation specific socket options.

SctpStandardSocketOptions.InitMaxStreams

This class is used to set the maximum number of inbound/outbound streams
 used by the local endpoint during association initialization.

SealedObject

This class enables a programmer to create an object and protect its
 confidentiality with a cryptographic algorithm.

SearchControls

This class encapsulates
 factors that determine scope of search and what gets returned
 as a result of the search.

SearchResult

This class represents an item in the NamingEnumeration returned as a
 result of the DirContext.search() methods.

SecondaryLoop

A helper interface to run the nested event loop.

SecretKey

A secret (symmetric) key.

SecretKeyFactory

This class represents a factory for secret keys.

SecretKeyFactorySpi

This class defines the Service Provider Interface (SPI)
 for the SecretKeyFactory class.

SecretKeySpec

This class specifies a secret key in a provider-independent fashion.

SecureCacheResponse

Represents a cache response originally retrieved through secure
 means, such as TLS.

SecureClassLoader

This class extends ClassLoader with additional support for defining
 classes with an associated code source and permissions which are
 retrieved by the system policy by default.

SecureDirectoryStream<T>

A DirectoryStream that defines operations on files that are located
 relative to an open directory.

SecureLookupSupplier

Provides security-checked access to a MethodHandles.Lookup object.

SecureRandom

This class provides a cryptographically strong random number
 generator (RNG).

SecureRandomParameters

A marker interface for parameters used in various SecureRandom
 methods.

SecureRandomSpi

This class defines the Service Provider Interface (SPI)
 for the SecureRandom class.

Security

This class centralizes all security properties and common security
 methods.

SecurityException

Thrown by the security manager to indicate a security violation.

SecurityManager
Deprecated, for removal: This API element is subject to removal in a future version.
The Security Manager is deprecated and subject to removal in a
       future release.

SecurityPermission

This class is for security permissions.

SeekableByteChannel

A byte channel that maintains a current position and allows the
 position to be changed.

SeeTree

A tree node for an @see block tag.

Segment

A segment of a character array representing a fragment
 of text.

SegmentAllocator

This interface models a memory allocator.

SelectableChannel

A channel that can be multiplexed via a Selector.

SelectionKey

A token representing the registration of a SelectableChannel with a
 Selector.

Selector

A multiplexor of SelectableChannel objects.

SelectorProvider

Service-provider class for selectors and selectable channels.

Semaphore

A counting semaphore.

SendFailedNotification

Notification emitted when a send failed notification has been received.

SeparatorUI

Pluggable look and feel interface for JSeparator.

Sequence

A Sequence is a data structure containing musical information (often
 an entire song or composition) that can be played back by a Sequencer
 object.

SequenceInputStream

A SequenceInputStream represents
 the logical concatenation of other input
 streams.

SequenceLayout

A sequence layout.

Sequencer

A hardware or software device that plays back a MIDI
 sequence is known as a sequencer.

Sequencer.SyncMode

A SyncMode object represents one of the ways in which a MIDI
 sequencer's notion of time can be synchronized with a master or slave
 device.

Serial

Indicates that an annotated field or method is part of the serialization mechanism defined by the
 Java Object Serialization Specification.

SerialArray

A serialized version of an Array
 object, which is the mapping in the Java programming language of an SQL
 ARRAY value.

SerialBlob

A serialized mapping in the Java programming language of an SQL
 BLOB value.

SerialClob

A serialized mapping in the Java programming language of an SQL
 CLOB value.

SerialDatalink

A serialized mapping in the Java programming language of an SQL
 DATALINK value.

SerialDataTree

A tree node for an @serialData block tag.

SerialException

Indicates and an error with the serialization or de-serialization of
 SQL types such as BLOB, CLOB, STRUCT or ARRAY in
 addition to SQL types such as DATALINK and JAVAOBJECT

SerialFieldTree

A tree node for an @serialField block tag.

Serializable

Serializability of a class is enabled by the class implementing the
 java.io.Serializable interface.

SerializablePermission

This class is for Serializable permissions.

SerializedLambda

Serialized form of a lambda expression.

SerialJavaObject

A serializable mapping in the Java programming language of an SQL
 JAVA_OBJECT value.

SerialRef

A serialized mapping of a Ref object, which is the mapping in the
 Java programming language of an SQL REF value.

SerialStruct

A serialized mapping in the Java programming language of an SQL
 structured type.

SerialTree

A tree node for an @serial block tag.

ServerCloneException

A ServerCloneException is thrown if a remote exception occurs
 during the cloning of a UnicastRemoteObject.

ServerError

A ServerError is thrown as a result of a remote method
 invocation when an Error is thrown while processing
 the invocation on the server, either while unmarshalling the arguments,
 executing the remote method itself, or marshalling the return value.

ServerException

A ServerException is thrown as a result of a remote method
 invocation when a RemoteException is thrown while processing
 the invocation on the server, either while unmarshalling the arguments or
 executing the remote method itself.

ServerNotActiveException

An ServerNotActiveException is an Exception
 thrown during a call to RemoteServer.getClientHost if
 the getClientHost method is called outside of servicing a remote
 method call.

ServerRef
Deprecated.
No replacement.

ServerRuntimeException
Deprecated.
no replacement

ServerSocket

This class implements server sockets.

ServerSocketChannel

A selectable channel for stream-oriented listening sockets.

ServerSocketFactory

This class creates server sockets.

ServiceConfigurationError

Error thrown when something goes wrong while locating, loading, or
 instantiating a service provider.

ServiceLoader<S>

A facility to load implementations of a service.

ServiceLoader.Provider<S>

Represents a service provider located by ServiceLoader.

ServiceNotFoundException

Represents exceptions raised when a requested service is not supported.

ServicePermission

This class is used to protect Kerberos services and the
 credentials necessary to access those services.

ServiceRegistry

A registry for service provider instances for Image I/O service types.

ServiceRegistry.Filter

A simple filter interface used by
 ServiceRegistry.getServiceProviders to select
 providers matching an arbitrary criterion.

ServiceUI

This class is a collection of UI convenience methods which provide a
 graphical user dialog for browsing print services looked up through the Java
 Print Service API.

ServiceUIFactory

Services may optionally provide UIs which allow different styles of
 interaction in different roles.

ServiceUnavailableException

This exception is thrown when attempting to communicate with a
 directory or naming service and that service is not available.

Set<E>

A collection that contains no duplicate elements.

SetOfIntegerSyntax

Class SetOfIntegerSyntax is an abstract base class providing the
 common implementation of all attributes whose value is a set of nonnegative
 integers.

SettingControl

Base class to extend to create setting controls.

SettingDefinition

Annotation that specifies that a method in an event class should be used to
 filter out events.

SettingDescriptor

Describes an event setting.

SettingDescriptorInfo

Management class that describes a setting, for example name, description and
 default value.

Severity

Class Severity is a printing attribute class, an enumeration, that
 denotes the severity of a PrinterStateReason
 attribute.

Shape

The Shape interface provides definitions for objects
 that represent some form of geometric shape.

ShapeGraphicAttribute

The ShapeGraphicAttribute class is an implementation of
 GraphicAttribute that draws shapes in a TextLayout.

ShardingKey

Interface used to indicate that this object represents a Sharding Key.

ShardingKeyBuilder

A builder created from a DataSource  or XADataSource object,
 used to create a ShardingKey with sub-keys of supported data types.

SheetCollate

Class SheetCollate is a printing attribute class, an enumeration,
 that specifies whether or not the media sheets of each copy of each printed
 document in a job are to be in sequence, when multiple copies of the document
 are specified by the Copies attribute.

Short

The Short class wraps a value of primitive type 
 short in an object.

ShortBuffer

A short buffer.

ShortBufferException

This exception is thrown when an output buffer provided by the user
 is too short to hold the operation result.

ShortLookupTable

This class defines a lookup table object.

ShortMessage

A ShortMessage contains a MIDI message that has at most two data
 bytes following its status byte.

ShortType

The type of all primitive short values
 accessed in the target VM.

ShortValue

Provides access to a primitive short value in
 the target VM.

ShortVector

A specialized Vector representing an ordered immutable sequence of
 short values.

ShutdownChannelGroupException

Unchecked exception thrown when an attempt is made to construct a channel in 
 a group that is shutdown or the completion handler for an I/O operation 
 cannot be invoked because the channel group has terminated.

ShutdownNotification

Notification emitted when a peers shutdowns an the association.

Sides

Class Sides is a printing attribute class, an enumeration, that
 specifies how print-stream pages are to be imposed upon the sides of an
 instance of a selected medium, i.e., an impression.

Signature

The Signature class is used to provide applications the functionality
 of a digital signature algorithm.

SignatureException

This is the generic Signature exception.

SignatureMethod

A representation of the XML SignatureMethod element
 as defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

SignatureMethodParameterSpec

A specification of algorithm parameters for an XML SignatureMethod
 algorithm.

SignatureProperties

A representation of the XML SignatureProperties element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

SignatureProperty

A representation of the XML SignatureProperty element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

SignatureSpi

This class defines the Service Provider Interface (SPI)
 for the Signature class, which is used to provide the
 functionality of a digital signature algorithm.

SignedInfo

An representation of the XML SignedInfo element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

SignedObject

 SignedObject is a class for the purpose of creating authentic
 runtime objects whose integrity cannot be compromised without being
 detected.

Signer
Deprecated, for removal: This API element is subject to removal in a future version.
This class is deprecated and subject to removal in a future
     version of Java SE.

SignStyle

Enumeration of ways to handle the positive/negative sign.

SimpleAnnotationValueVisitor14<R,P>

A simple visitor for annotation values with default behavior
 appropriate for source version RELEASE_14.

SimpleAnnotationValueVisitor6<R,P>

A simple visitor for annotation values with default behavior
 appropriate for the RELEASE_6
 source version.

SimpleAnnotationValueVisitor7<R,P>

A simple visitor for annotation values with default behavior
 appropriate for the RELEASE_7
 source version.

SimpleAnnotationValueVisitor8<R,P>

A simple visitor for annotation values with default behavior
 appropriate for the RELEASE_8
 source version.

SimpleAnnotationValueVisitor9<R,P>

A simple visitor for annotation values with default behavior
 appropriate for source versions RELEASE_9 through RELEASE_14.

SimpleAttributeSet

A straightforward implementation of MutableAttributeSet using a
 hash table.

SimpleBeanInfo

This is a support class to make it easier for people to provide
 BeanInfo classes.

SimpleBindings

A simple implementation of Bindings backed by
 a HashMap or some other specified Map.

SimpleDateFormat

SimpleDateFormat is a concrete class for formatting and
 parsing dates in a locale-sensitive manner.

SimpleDoc

This class is an implementation of interface Doc that can be used in
 many common printing requests.

SimpleDocTreeVisitor<R,P>

A simple visitor for tree nodes.

SimpleElementVisitor14<R,P>

A simple visitor of program elements with default behavior
 appropriate for the RELEASE_14
 source version.

SimpleElementVisitor6<R,P>

A simple visitor of program elements with default behavior
 appropriate for the RELEASE_6
 source version.

SimpleElementVisitor7<R,P>

A simple visitor of program elements with default behavior
 appropriate for the RELEASE_7
 source version.

SimpleElementVisitor8<R,P>

A simple visitor of program elements with default behavior
 appropriate for the RELEASE_8
 source version.

SimpleElementVisitor9<R,P>

A simple visitor of program elements with default behavior
 appropriate for source versions RELEASE_9 through RELEASE_14.

SimpleFileVisitor<T>

A simple visitor of files with default behavior to visit all files and to
 re-throw I/O errors.

SimpleFormatter

Print a brief summary of the LogRecord in a human readable
 format.

SimpleJavaFileObject

Provides simple implementations for most methods in JavaFileObject.

SimpleLinkRequest

Default simple implementation of LinkRequest.

SimpleRelinkableCallSite

A relinkable call site that implements monomorphic inline caching strategy,
 only being linked to a single GuardedInvocation at any given time.

SimpleScriptContext

Simple implementation of ScriptContext.

SimpleTimeZone

SimpleTimeZone is a concrete subclass of TimeZone
 that represents a time zone for use with a Gregorian calendar.

SimpleTreeVisitor<R,P>

A simple visitor for tree nodes.

SimpleType<T>

The SimpleType class is the open type class whose instances describe
 all open data values which are neither arrays,
 nor CompositeData values,
 nor TabularData values.

SimpleTypeVisitor14<R,P>

A simple visitor of types with default behavior appropriate for
 source version RELEASE_14.

SimpleTypeVisitor6<R,P>

A simple visitor of types with default behavior appropriate for the
 RELEASE_6 source version.

SimpleTypeVisitor7<R,P>

A simple visitor of types with default behavior appropriate for the
 RELEASE_7 source version.

SimpleTypeVisitor8<R,P>

A simple visitor of types with default behavior appropriate for the
 RELEASE_8 source version.

SimpleTypeVisitor9<R,P>

A simple visitor of types with default behavior appropriate for
 source versions RELEASE_9 through
 RELEASE_14.

SinceTree

A tree node for an @since block tag.

SinglePixelPackedSampleModel

This class represents pixel data packed such that the N samples which make
  up a single pixel are stored in a single data array element, and each data
  data array element holds samples for only one pixel.

SingleSelectionModel

A model that supports at most one indexed selection.

Size2DSyntax

Class Size2DSyntax is an abstract base class providing the common
 implementation of all attributes denoting a size in two dimensions.

SizeLimitExceededException

This exception is thrown when a method
 produces a result that exceeds a size-related limit.

SizeRequirements

For the convenience of layout managers,
 calculates information about the size and position of components.

SizeSequence

A SizeSequence object
 efficiently maintains an ordered list
 of sizes and corresponding positions.

Skeleton
Deprecated.
no replacement.

SkeletonMismatchException
Deprecated.
no replacement.

SkeletonNotFoundException
Deprecated.
no replacement.

SliderUI

Pluggable look and feel interface for JSlider.

SNIHostName

Instances of this class represent a server name of type
 host_name in a Server Name
 Indication (SNI) extension.

SNIMatcher

Instances of this class represent a matcher that performs match
 operations on an SNIServerName instance.

Snippet

A Snippet represents a snippet of Java source code as passed to
 JShell.eval(java.lang.String).

Snippet.Kind

Describes the general kind of snippet.

Snippet.Status

Describes the current state of a Snippet.

Snippet.SubKind

The detailed variety of a snippet.

SnippetEvent

A description of a change to a Snippet.

SNIServerName

Instances of this class represent a server name in a Server Name
 Indication (SNI) extension.

Socket

This class implements client sockets (also called just
 "sockets").

SocketAddress

This class represents a Socket Address with no protocol attachment.

SocketChannel

A selectable channel for stream-oriented connecting sockets.

SocketException

Thrown to indicate that there is an error creating or accessing a Socket.

SocketFactory

This class creates sockets.

SocketHandler

Simple network logging Handler.

SocketImpl

The abstract class SocketImpl is a common superclass
 of all classes that actually implement sockets.

SocketImplFactory

This interface defines a factory for socket implementations.

SocketOption<T>

A socket option associated with a socket.

SocketOptions

Interface of methods to get/set socket options.

SocketPermission

This class represents access to a network via sockets.

Sockets
Deprecated.
Java SE 9 added standard methods to set/get socket options, and retrieve the per-Socket
 supported options effectively rendering this API redundant.

SocketSecurityException
Deprecated.
This class is obsolete.

SocketTimeoutException

Signals that a timeout has occurred on a socket read or accept.

SoftBevelBorder

A class which implements a raised or lowered bevel with
 softened corners.

SoftReference<T>

Soft reference objects, which are cleared at the discretion of the garbage
 collector in response to memory demand.

SortControl

Requests that the results of a search operation be sorted by the LDAP server
 before being returned.

SortedMap<K,V>

A Map that further provides a total ordering on its keys.

SortedSet<E>

A Set that further provides a total ordering on its elements.

SortingFocusTraversalPolicy

A FocusTraversalPolicy that determines traversal order by sorting the
 Components of a focus traversal cycle based on a given Comparator.

SortKey

A sort key and its associated sort parameters.

SortOrder

SortOrder is an enumeration of the possible sort orderings.

SortResponseControl

Indicates whether the requested sort of search results was successful or not.

Soundbank

A Soundbank contains a set of Instruments that can be loaded
 into a Synthesizer.

SoundbankReader

A SoundbankReader supplies soundbank file-reading services.

SoundbankResource

A SoundbankResource represents any audio resource stored in a
 Soundbank.

Source

An object that implements this interface contains the information
 needed to act as source input (XML source or transformation instructions).

SourceCodeAnalysis

Provides analysis utilities for source code input.

SourceCodeAnalysis.Completeness

Describes the completeness of the given input.

SourceCodeAnalysis.CompletionInfo

The result of analyzeCompletion(String input).

SourceCodeAnalysis.Documentation

A documentation for a candidate for continuation of the given user's input.

SourceCodeAnalysis.QualifiedNames

List of possible qualified names.

SourceCodeAnalysis.SnippetWrapper

The wrapping of a snippet of Java source into valid top-level Java
 source.

SourceCodeAnalysis.Suggestion

A candidate for continuation of the given user's input.

SourceDataLine

A source data line is a data line to which data may be written.

SourceLocator

This interface is primarily for the purposes of reporting where
 an error occurred in the XML source or transformation instructions.

SourcePositions

Provides methods to obtain the position of a Tree within a CompilationUnit.

SourceVersion

Source versions of the Java programming language.

SpinnerDateModel

A SpinnerModel for sequences of Dates.

SpinnerListModel

A simple implementation of SpinnerModel whose
 values are defined by an array or a List.

SpinnerModel

A model for a potentially unbounded sequence of object values.

SpinnerNumberModel

A SpinnerModel for sequences of numbers.

SpinnerUI

Pluggable look and feel interface for JSpinner

SPIResolutionException

The construction and throw of this exception is embedded in code generated by
 the JShell core implementation in such a way that, upon executing a
 RECOVERABLE_DEFINED
 user method, this exception is thrown.

SplashScreen

The splash screen can be displayed at application startup, before the
 Java Virtual Machine (JVM) starts.

Spliterator<T>

An object for traversing and partitioning elements of a source.

Spliterator.OfDouble

A Spliterator specialized for double values.

Spliterator.OfInt

A Spliterator specialized for int values.

Spliterator.OfLong

A Spliterator specialized for long values.

Spliterator.OfPrimitive<T,T_CONS,T_SPLITR extends Spliterator.OfPrimitive<T,T_CONS,T_SPLITR>>

A Spliterator specialized for primitive values.

Spliterators

Static classes and methods for operating on or creating instances of
 Spliterator and its primitive specializations
 Spliterator.OfInt, Spliterator.OfLong, and
 Spliterator.OfDouble.

Spliterators.AbstractDoubleSpliterator

An abstract Spliterator.OfDouble that implements
 trySplit to permit limited parallelism.

Spliterators.AbstractIntSpliterator

An abstract Spliterator.OfInt that implements trySplit to
 permit limited parallelism.

Spliterators.AbstractLongSpliterator

An abstract Spliterator.OfLong that implements trySplit
 to permit limited parallelism.

Spliterators.AbstractSpliterator<T>

An abstract Spliterator that implements trySplit to
 permit limited parallelism.

SplitPaneUI

Pluggable look and feel interface for JSplitPane.

SplittableRandom

A generator of uniform pseudorandom values (with period 264)
 applicable for use in (among other contexts) isolated parallel
 computations that may generate subtasks.

Spring

An instance of the Spring class holds three properties that
  characterize its behavior: the minimum, preferred, and
  maximum values.

SpringLayout

A SpringLayout lays out the children of its associated container
 according to a set of constraints.

SpringLayout.Constraints

A Constraints object holds the
 constraints that govern the way a component's size and position
 change in a container controlled by a SpringLayout.

SQLClientInfoException

The subclass of SQLException is thrown when one or more client info properties
 could not be set on a Connection.

SQLData

The interface used for the custom mapping of an SQL user-defined type (UDT) to
 a class in the Java programming language.

SQLDataException

The subclass of SQLException thrown when the SQLState class value
 is '22', or under vendor-specified conditions.

SQLException

An exception that provides information on a database access
 error or other errors.

SQLFeatureNotSupportedException

The subclass of SQLException thrown when the SQLState class value is '0A'
 ( the value is 'zero' A).

SQLInput

An input stream that contains a stream of values representing an
 instance of an SQL structured type or an SQL distinct type.

SQLInputImpl

An input stream used for custom mapping user-defined types (UDTs).

SQLIntegrityConstraintViolationException

The subclass of SQLException thrown when the SQLState class value
 is '23', or under vendor-specified conditions.

SQLInvalidAuthorizationSpecException

The subclass of SQLException thrown when the SQLState class value
 is '28', or under vendor-specified conditions.

SQLNonTransientConnectionException

The subclass of SQLException thrown for the SQLState
 class value '08', or under vendor-specified conditions.

SQLNonTransientException

The subclass of SQLException thrown when an instance where a retry
 of the same operation would fail unless the cause of the SQLException
 is corrected.

SQLOutput

The output stream for writing the attributes of a user-defined
 type back to the database.

SQLOutputImpl

The output stream for writing the attributes of a
 custom-mapped user-defined type (UDT) back to the database.

SQLPermission

The permission for which the SecurityManager will check
 when code that is running an application with a
 SecurityManager enabled, calls the
 DriverManager.deregisterDriver method,
 DriverManager.setLogWriter method,
 DriverManager.setLogStream (deprecated) method,
 SyncFactory.setJNDIContext method,
 SyncFactory.setLogger method,
 Connection.setNetworkTimeout method,
 or the Connection.abort method.

SQLRecoverableException

The subclass of SQLException thrown in situations where a
 previously failed operation might be able to succeed if the application performs
  some recovery steps and retries the entire transaction or in the case of a
 distributed transaction, the transaction branch.

SQLSyntaxErrorException

The subclass of SQLException thrown when the SQLState class value
 is '42', or under vendor-specified conditions.

SQLTimeoutException

The subclass of SQLException thrown when the timeout specified by
 Statement.setQueryTimeout, DriverManager.setLoginTimeout,
 DataSource.setLoginTimeout,XADataSource.setLoginTimeout
 has expired.

SQLTransactionRollbackException

The subclass of SQLException thrown when the SQLState class value
 is '40', or under vendor-specified conditions.

SQLTransientConnectionException

The subclass of SQLException for the SQLState class
 value '08', or under vendor-specified conditions.

SQLTransientException

The subclass of SQLException is thrown in situations where a
 previously failed operation might be able to succeed when the operation is
 retried without any intervention by application-level functionality.

SQLType

An object that is used to identify a generic SQL type, called a JDBC type or
 a vendor specific data type.

SQLWarning

An exception that provides information on  database access
 warnings.

SQLXML

The mapping in the JavaTM programming language for the SQL XML type.

SSLContext

Instances of this class represent a secure socket protocol
 implementation which acts as a factory for secure socket
 factories or SSLEngines.

SSLContextSpi

This class defines the Service Provider Interface (SPI)
 for the SSLContext class.

SSLEngine

A class which enables secure communications using protocols such as
 the Secure Sockets Layer (SSL) or
  IETF RFC 2246 "Transport
 Layer Security" (TLS)  protocols, but is transport independent.

SSLEngineResult

An encapsulation of the result state produced by
 SSLEngine I/O calls.

SSLEngineResult.HandshakeStatus

An SSLEngineResult enum describing the current
 handshaking state of this SSLEngine.

SSLEngineResult.Status

An SSLEngineResult enum describing the overall result
 of the SSLEngine operation.

SSLException

Indicates some kind of error detected by an SSL subsystem.

SSLHandshakeException

Indicates that the client and server could not negotiate the
 desired level of security.

SSLKeyException

Reports a bad SSL key.

SSLParameters

Encapsulates parameters for an SSL/TLS/DTLS connection.

SSLPeerUnverifiedException

Indicates that the peer's identity has not been verified.

SSLPermission

This class is for various network permissions.

SSLProtocolException

Reports an error in the operation of the SSL protocol.

SslRMIClientSocketFactory

An SslRMIClientSocketFactory instance is used by the RMI
 runtime in order to obtain client sockets for RMI calls via SSL.

SslRMIServerSocketFactory

An SslRMIServerSocketFactory instance is used by the RMI
 runtime in order to obtain server sockets for RMI calls via SSL.

SSLServerSocket

This class extends ServerSocket and
 provides secure server sockets using protocols such as the Secure
 Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.

SSLServerSocketFactory

SSLServerSocketFactorys create
 SSLServerSockets.

SSLSession

In SSL, sessions are used to describe an ongoing relationship between
 two entities.

SSLSessionBindingEvent

This event is propagated to a SSLSessionBindingListener.

SSLSessionBindingListener

This interface is implemented by objects which want to know when
 they are being bound or unbound from a SSLSession.

SSLSessionContext

A SSLSessionContext represents a set of
 SSLSessions associated with a single entity.

SSLSocket

This class extends Socket and provides secure
 sockets using protocols such as the "Secure
 Sockets Layer" (SSL) or IETF "Transport Layer Security" (TLS) protocols.

SSLSocketFactory

SSLSocketFactorys create SSLSockets.

Stack<E>

The Stack class represents a last-in-first-out
 (LIFO) stack of objects.

StackFrame

The state of one method invocation on a thread's call stack.

StackOverflowError

Thrown when a stack overflow occurs because an application
 recurses too deeply.

StackTrace

Event annotation, determines whether an event by default has a stack trace
 or not.

StackTraceElement

An element in a stack trace, as returned by Throwable.getStackTrace().

StackWalker

A stack walker.

StackWalker.Option

Stack walker option to configure the stack frame
 information obtained by a StackWalker.

StackWalker.StackFrame

A StackFrame object represents a method invocation returned by
 StackWalker.

StampedLock

A capability-based lock with three modes for controlling read/write
 access.

StandardCharsets

Constant definitions for the standard charsets.

StandardConstants

Standard constants definitions

StandardCopyOption

Defines the standard copy options.

StandardDoclet

This doclet generates HTML-formatted documentation for the specified modules,
 packages and types.

StandardEmitterMBean

An MBean whose management interface is determined by reflection
 on a Java interface, and that emits notifications.

StandardJavaFileManager

File manager based on java.io.File and java.nio.file.Path.

StandardJavaFileManager.PathFactory

Factory to create Path objects from strings.

StandardLocation

Standard locations of file objects.

StandardMBean

An MBean whose management interface is determined by reflection
 on a Java interface.

StandardNamespace

An enumeration of standard namespaces defined by Dynalink.

StandardOpenOption

Defines the standard open options.

StandardOperation

Defines the standard dynamic operations.

StandardProtocolFamily

Defines the standard families of communication protocols.

StandardSocketOptions

Defines the standard socket options.

StandardWatchEventKinds

Defines the standard event kinds.

StartDocument

An interface for the start document event

StartElement

The StartElement interface provides access to information about
 start elements.

StartElementTree

A tree node for the start of an HTML element.

StartTlsRequest

This class implements the LDAPv3 Extended Request for StartTLS as
 defined in
 Lightweight Directory
 Access Protocol (v3): Extension for Transport Layer Security

 The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037
 and no extended request value is defined.

StartTlsResponse

This class implements the LDAPv3 Extended Response for StartTLS as
 defined in
 Lightweight Directory
 Access Protocol (v3): Extension for Transport Layer Security

 The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037
 and no extended response value is defined.

State<T extends JComponent>

Represents a built in, or custom, state in Nimbus.

StateEdit

StateEdit is a general edit for objects that change state.

StateEditable

StateEditable defines the interface for objects that can have
 their state undone/redone by a StateEdit.

StateFactory

This interface represents a factory for obtaining the state of an
 object for binding.

Statement

A Statement object represents a primitive statement
 in which a single method is applied to a target and
 a set of arguments - as in "a.setFoo(b)".

Statement

The object used for executing a static SQL statement
 and returning the results it produces.

StatementEvent

A StatementEvent is sent to all StatementEventListeners which were
 registered with a PooledConnection.

StatementEventListener

An object that registers to be notified of events that occur on PreparedStatements
 that are in the Statement pool.

StatementSnippet

Snippet for a statement.

StatementTree

A tree node used as the base class for the different kinds of
 statements.

StaticClass

Object that allows access to the static members of a class (its static
 methods, properties, and fields), as well as construction of instances using
 StandardOperation.NEW operation.

StAXResult

Acts as a holder for an XML Result in the
 form of a StAX writer,i.e.

StAXSource

Acts as a holder for an XML Source in the
 form of a StAX reader,i.e.

StepEvent

Notification of step completion in the target VM.

StepRequest

Request for notification when a step occurs in the target VM.

Stream<T>

A sequence of elements supporting sequential and parallel aggregate
 operations.

Stream.Builder<T>

A mutable builder for a Stream.

StreamCorruptedException

Thrown when control information that was read from an object stream
 violates internal consistency checks.

StreamFilter

This interface declares a simple filter interface that one can
 create to filter XMLStreamReaders

StreamHandler

Stream based logging Handler.

StreamingExecutionControl

An implementation of the ExecutionControl
 execution engine SPI which streams requests to a remote agent where
 execution takes place.

StreamPrintService

This class extends PrintService and represents a print service that
 prints data in different formats to a client-provided output stream.

StreamPrintServiceFactory

A StreamPrintServiceFactory is the factory for
 StreamPrintService instances, which can print to an output stream in
 a particular document format described as a mime type.

StreamReaderDelegate

This is the base class for deriving an XMLStreamReader filter

 This class is designed to sit between an XMLStreamReader and an
 application's XMLStreamReader.

StreamResult

Acts as an holder for a transformation result,
 which may be XML, plain Text, HTML, or some other form of markup.

StreamSource

Acts as an holder for a transformation Source in the form
 of a stream of XML markup.

StreamSupport

Low-level utility methods for creating and manipulating streams.

StreamTokenizer

The StreamTokenizer class takes an input stream and
 parses it into "tokens", allowing the tokens to be
 read one at a time.

StrictMath

The class StrictMath contains methods for performing basic
 numeric operations such as the elementary exponential, logarithm,
 square root, and trigonometric functions.

String

The String class represents character strings.

StringBuffer

A thread-safe, mutable sequence of characters.

StringBufferInputStream
Deprecated.
This class does not properly convert characters into bytes.

StringBuilder

A mutable sequence of characters.

StringCharacterIterator

StringCharacterIterator implements the
 CharacterIterator protocol for a String.

StringConcatException

StringConcatException is thrown by StringConcatFactory when linkage
 invariants are violated.

StringConcatFactory

Methods to facilitate the creation of String concatenation methods, that
 can be used to efficiently concatenate a known number of arguments of known
 types, possibly after type adaptation and partial evaluation of arguments.

StringContent

An implementation of the AbstractDocument.Content interface that is
 a brute force implementation that is useful for relatively small
 documents and/or debugging.

StringIndexOutOfBoundsException

Thrown by String methods to indicate that an index is either negative
 or greater than the size of the string.

StringJoiner

StringJoiner is used to construct a sequence of characters separated
 by a delimiter and optionally starting with a supplied prefix
 and ending with a supplied suffix.

StringMonitor

Defines a monitor MBean designed to observe the values of a string
 attribute.

StringMonitorMBean

Exposes the remote management interface of the string monitor MBean.

StringReader

A character stream whose source is a string.

StringRefAddr

This class represents the string form of the address of
 a communications end-point.

StringReference

A string object from the target VM.

StringSelection

A Transferable which implements the capability required to transfer a
 String.

StringTokenizer

The string tokenizer class allows an application to break a
 string into tokens.

StringValueExp

Represents strings that are arguments to relational constraints.

StringWriter

A character stream that collects its output in a string buffer, which can
 then be used to construct a string.

Stroke

The Stroke interface allows a
 Graphics2D object to obtain a Shape that is the
 decorated outline, or stylistic representation of the outline,
 of the specified Shape.

StrokeBorder

A class which implements a border of an arbitrary stroke.

Struct

The standard mapping in the Java programming language for an SQL
 structured type.

StubNotFoundException

A StubNotFoundException is thrown if a valid stub class
 could not be found for a remote object when it is exported.

Style

A collection of attributes to associate with an element in a document.

StyleConstants


 A collection of well known or common attribute keys
 and methods to apply to an AttributeSet or MutableAttributeSet
 to get/set the properties in a typesafe manner.

StyleConstants.CharacterConstants

This is a typesafe enumeration of the well-known
 attributes that contribute to a character style.

StyleConstants.ColorConstants

This is a typesafe enumeration of the well-known
 attributes that contribute to a color.

StyleConstants.FontConstants

This is a typesafe enumeration of the well-known
 attributes that contribute to a font.

StyleConstants.ParagraphConstants

This is a typesafe enumeration of the well-known
 attributes that contribute to a paragraph style.

StyleContext

A pool of styles and their associated resources.

StyledDocument

Interface for a generic styled document.

StyledEditorKit

This is the set of things needed by a text component
 to be a reasonably functioning editor for some type
 of text document.

StyledEditorKit.AlignmentAction

An action to set paragraph alignment.

StyledEditorKit.BoldAction

An action to toggle the bold attribute.

StyledEditorKit.FontFamilyAction

An action to set the font family in the associated
 JEditorPane.

StyledEditorKit.FontSizeAction

An action to set the font size in the associated
 JEditorPane.

StyledEditorKit.ForegroundAction

An action to set foreground color.

StyledEditorKit.ItalicAction

An action to toggle the italic attribute.

StyledEditorKit.StyledTextAction

An action that assumes it's being fired on a JEditorPane
 with a StyledEditorKit (or subclass) installed.

StyledEditorKit.UnderlineAction

An action to toggle the underline attribute.

StyleSheet

Support for defining the visual characteristics of
 HTML views being rendered.

StyleSheet

The StyleSheet interface is the abstract base interface for
 any type of style sheet.

StyleSheet.BoxPainter

Class to carry out some of the duties of
 CSS formatting.

StyleSheet.ListPainter

Class to carry out some of the duties of CSS list
 formatting.

StyleSheetList

The StyleSheetList interface provides the abstraction of an
 ordered collection of style sheets.

Subject

 A Subject represents a grouping of related information
 for a single entity, such as a person.

SubjectDelegationPermission

Permission required by an authentication identity to perform
 operations on behalf of an authorization identity.

SubjectDomainCombiner
Deprecated, for removal: This API element is subject to removal in a future version.
This class is only useful in conjunction with
       the Security Manager, which is deprecated
       and subject to removal in a future release.

SubmissionPublisher<T>

A Flow.Publisher that asynchronously issues submitted
 (non-null) items to current subscribers until it is closed.

SummaryTree

A tree node for an @summary inline tag.

Supplier<T>

Represents a supplier of results.

SupportedAnnotationTypes

An annotation used to indicate what annotation interfaces an
 annotation processor supports.

SupportedOptions

An annotation used to indicate what options an annotation processor
 supports.

SupportedSourceVersion

An annotation used to indicate the latest source version an
 annotation processor supports.

SupportedValuesAttribute

Interface SupportedValuesAttribute is a tagging interface which a
 printing attribute class implements to indicate the attribute describes the
 supported values for another attribute.

SuppressWarnings

Indicates that the named compiler warnings should be suppressed in the
 annotated element (and in all program elements contained in the annotated
 element).

SwingConstants

A collection of constants generally used for positioning and orienting
 components on the screen.

SwingContainer

An annotation used to specify some swing-related information
 for the automatically generated BeanInfo classes.

SwingEventMonitor

SwingEventMonitor extends AWTEventMonitor by adding a suite of
 listeners conditionally installed on every Swing component instance
 in the Java Virtual Machine.

SwingPropertyChangeSupport

This subclass of java.beans.PropertyChangeSupport is almost
 identical in functionality.

SwingUtilities

A collection of utility methods for Swing.

SwingWorker<T,V>

An abstract class to perform lengthy GUI-interaction tasks in a
 background thread.

SwingWorker.StateValue

Values for the state bound property.

SwitchBootstrapsPREVIEW
Preview.
Bootstrap methods for linking invokedynamic call sites that implement
 the selection functionality of the switch statement.

SwitchExpressionTree

A tree node for a switch expression.

SwitchPoint


 A SwitchPoint is an object which can publish state transitions to other threads.

SwitchTree

A tree node for a switch statement.

SymbolLookup

A symbol lookup.

SyncFactory

The Service Provider Interface (SPI) mechanism that generates SyncProvider
 instances to be used by disconnected RowSet objects.

SyncFactoryException

Indicates an error with SyncFactory mechanism.

SyncFailedException

Signals that a sync operation has failed.

SynchronizedTree

A tree node for a synchronized statement.

SynchronousQueue<E>

A blocking queue in which each insert
 operation must wait for a corresponding remove operation by another
 thread, and vice versa.

SyncProvider

The synchronization mechanism that provides reader/writer capabilities for
 disconnected RowSet objects.

SyncProviderException

Indicates an error with the SyncProvider mechanism.

SyncResolver

Defines a framework that allows applications to use a manual decision tree
 to decide what should be done when a synchronization conflict occurs.

SynthButtonUI

Provides the Synth L&F UI delegate for
 JButton.

SynthCheckBoxMenuItemUI

Provides the Synth L&F UI delegate for
 JCheckBoxMenuItem.

SynthCheckBoxUI

Provides the Synth L&F UI delegate for
 JCheckBox.

SynthColorChooserUI

Provides the Synth L&F UI delegate for
 JColorChooser.

SynthComboBoxUI

Provides the Synth L&F UI delegate for
 JComboBox.

SynthConstants

Constants used by Synth.

SynthContext

An immutable transient object containing contextual information about
 a Region.

SynthDesktopIconUI

Provides the Synth L&F UI delegate for a minimized internal frame on a desktop.

SynthDesktopPaneUI

Provides the Synth L&F UI delegate for
 JDesktopPane.

SynthEditorPaneUI

Provides the Synth L&F UI delegate for
 JEditorPane.

Synthesizer

A Synthesizer generates sound.

SynthFormattedTextFieldUI

Provides the Synth L&F UI delegate for
 JFormattedTextField.

SynthGraphicsUtils

Wrapper for primitive graphics calls.

SynthIcon

An icon that is passed a SynthContext.

SynthInternalFrameUI

Provides the Synth L&F UI delegate for
 JInternalFrame.

SynthLabelUI

Provides the Synth L&F UI delegate for
 JLabel.

SynthListUI

Provides the Synth L&F UI delegate for
 JList.

SynthLookAndFeel

SynthLookAndFeel provides the basis for creating a customized look and
 feel.

SynthMenuBarUI

Provides the Synth L&F UI delegate for
 JMenuBar.

SynthMenuItemUI

Provides the Synth L&F UI delegate for
 JMenuItem.

SynthMenuUI

Provides the Synth L&F UI delegate for
 JMenu.

SynthOptionPaneUI

Provides the Synth L&F UI delegate for
 JOptionPane.

SynthPainter

SynthPainter is used for painting portions of
 JComponents.

SynthPanelUI

Provides the Synth L&F UI delegate for
 JPanel.

SynthPasswordFieldUI

Provides the Synth L&F UI delegate for
 JPasswordField.

SynthPopupMenuUI

Provides the Synth L&F UI delegate for
 JPopupMenu.

SynthProgressBarUI

Provides the Synth L&F UI delegate for
 JProgressBar.

SynthRadioButtonMenuItemUI

Provides the Synth L&F UI delegate for
 JRadioButtonMenuItem.

SynthRadioButtonUI

Provides the Synth L&F UI delegate for
 JRadioButton.

SynthRootPaneUI

Provides the Synth L&F UI delegate for
 JRootPane.

SynthScrollBarUI

Provides the Synth L&F UI delegate for
 JScrollBar.

SynthScrollPaneUI

Provides the Synth L&F UI delegate for
 JScrollPane.

SynthSeparatorUI

Provides the Synth L&F UI delegate for
 JSeparator.

SynthSliderUI

Provides the Synth L&F UI delegate for
 JSlider.

SynthSpinnerUI

Provides the Synth L&F UI delegate for
 JSpinner.

SynthSplitPaneUI

Provides the Synth L&F UI delegate for
 JSplitPane.

SynthStyle

SynthStyle is a set of style properties.

SynthStyleFactory

Factory used for obtaining SynthStyles.

SynthTabbedPaneUI

Provides the Synth L&F UI delegate for
 JTabbedPane.

SynthTableHeaderUI

Provides the Synth L&F UI delegate for
 JTableHeader.

SynthTableUI

Provides the Synth L&F UI delegate for
 JTable.

SynthTextAreaUI

Provides the look and feel for a plain text editor in the
 Synth look and feel.

SynthTextFieldUI

Provides the Synth L&F UI delegate for JTextField.

SynthTextPaneUI

Provides the look and feel for a styled text editor in the
 Synth look and feel.

SynthToggleButtonUI

Provides the Synth L&F UI delegate for
 JToggleButton.

SynthToolBarUI

Provides the Synth L&F UI delegate for
 JToolBar.

SynthToolTipUI

Provides the Synth L&F UI delegate for
 JToolTip.

SynthTreeUI

Provides the Synth L&F UI delegate for
 JTree.

SynthUI

SynthUI is used to fetch the SynthContext for a particular Component.

SynthViewportUI

Provides the Synth L&F UI delegate for
 JViewport.

SysexMessage

A SysexMessage object represents a MIDI system exclusive message.

System

The System class contains several useful class fields
 and methods.

System.Logger

System.Logger instances log messages that will be
 routed to the underlying logging framework the LoggerFinder uses.

System.Logger.Level

System loggers levels.

System.LoggerFinder

The LoggerFinder service is responsible for creating, managing,
 and configuring loggers to the underlying framework it uses.

SystemColor

A class to encapsulate symbolic colors representing the color of
 native GUI objects on a system.

SystemEventListener

Common interface for all event listener sub-types.

SystemFlavorMap

The SystemFlavorMap is a configurable map between "natives" (Strings), which
 correspond to platform-specific data formats, and "flavors" (DataFlavors),
 which correspond to platform-independent MIME types.

SystemPropertyTree

A tree node for an @systemProperty inline tag.

SystemSleepEvent

Event sent when the system enters and exits power save sleep.

SystemSleepListener

Implementors receive notification as the system is entering sleep, and after
 the system wakes.

SystemTray

The SystemTray class represents the system tray for a
 desktop.

TabableView

Interface for Views that have size dependent upon tabs.

TabbedPaneUI

Pluggable look and feel interface for JTabbedPane.

TabExpander

Simple interface to allow for different types of
 implementations of tab expansion.

TableCellEditor

This interface defines the method any object that would like to be
 an editor of values for components such as JListBox,
 JComboBox, JTree, or JTable
 needs to implement.

TableCellRenderer

This interface defines the method required by any object that
 would like to be a renderer for cells in a JTable.

TableColumn

A TableColumn represents all the attributes of a column in a
  JTable, such as width, resizability, minimum and maximum width.

TableColumnModel

Defines the requirements for a table column model object suitable for
 use with JTable.

TableColumnModelEvent

TableColumnModelEvent is used to notify listeners that a table
 column model has changed, such as a column was added, removed, or
 moved.

TableColumnModelListener

TableColumnModelListener defines the interface for an object that listens
 to changes in a TableColumnModel.

TableHeaderUI

Pluggable look and feel interface for JTableHeader.

TableModel

The TableModel interface specifies the methods the
  JTable will use to interrogate a tabular data model.

TableModelEvent

TableModelEvent is used to notify listeners that a table model
 has changed.

TableModelListener

TableModelListener defines the interface for an object that listens
 to changes in a TableModel.

TableRowSorter<M extends TableModel>

An implementation of RowSorter that provides sorting
 and filtering using a TableModel.

TableStringConverter

TableStringConverter is used to convert objects from the model into
 strings.

TableUI

Pluggable look and feel interface for JTable.

TableView


 Implements View interface for a table, that is composed of an
 element structure where the child elements of the element
 this view is responsible for represent rows and the child
 elements of the row elements are cells.

TabSet

A TabSet is comprised of many TabStops.

TabStop

This class encapsulates a single tab stop (basically as tab stops
 are thought of by RTF).

TabularData

The TabularData interface specifies the behavior of a specific type of complex open data objects
 which represent tabular data structures.

TabularDataSupport

The TabularDataSupport class is the open data
 class which implements the TabularData
 and the Map interfaces, and which is internally based on a hash map data structure.

TabularType

The TabularType class is the  open type class
 whose instances describe the types of TabularData values.

TagElement

A generic HTML TagElement class.

Taglet

The interface for a custom taglet supported by doclets such as
 the standard doclet.

Taglet.Location

The kind of location in which a tag may be used.

Target

Indicates the contexts in which an annotation interface is applicable.

TargetDataLine

A target data line is a type of DataLine from which audio data can be
 read.

TargetedNotification

A (Notification, Listener ID) pair.

Taskbar

The Taskbar class allows a Java application to interact with
 the system task area (taskbar, Dock, etc.).

Taskbar.Feature

List of provided features.

Taskbar.State

Kinds of available window progress states.

TaskEvent

Provides details about work that has been done by the JDK Java Compiler, javac.

TaskEvent.Kind

Kind of task event.

TaskListener

Provides a listener to monitor the activity of the JDK Java Compiler, javac.

Templates

An object that implements this interface is the runtime representation of processed
 transformation instructions.

TemplatesHandler

A SAX ContentHandler that may be used to process SAX
 parse events (parsing transformation instructions) into a Templates object.

Temporal

Framework-level interface defining read-write access to a temporal object,
 such as a date, time, offset or some combination of these.

TemporalAccessor

Framework-level interface defining read-only access to a temporal object,
 such as a date, time, offset or some combination of these.

TemporalAdjuster

Strategy for adjusting a temporal object.

TemporalAdjusters

Common and useful TemporalAdjusters.

TemporalAmount

Framework-level interface defining an amount of time, such as
 "6 hours", "8 days" or "2 years and 3 months".

TemporalField

A field of date-time, such as month-of-year or minute-of-hour.

TemporalQueries

Common implementations of TemporalQuery.

TemporalQuery<R>

Strategy for querying a temporal object.

TemporalUnit

A unit of date-time, such as Days or Hours.

TerminalFactory

A factory for CardTerminal objects.

TerminalFactorySpi

The TerminalFactorySpi class defines the service provider interface.

Text

The Text interface inherits from CharacterData
 and represents the textual content (termed character data in XML) of an Element or Attr.

TextAction

An Action implementation useful for key bindings that are
 shared across a number of different text components.

TextArea

A TextArea object is a multi-line region
 that displays text.

TextAttribute

The TextAttribute class defines attribute keys and
 attribute values used for text rendering.

TextCallbackHandler

Prompts and reads from the command line for answers to authentication
 questions.

TextComponent

The TextComponent class is the superclass of
 any component that allows the editing of some text.

TextEvent

A semantic event which indicates that an object's text changed.

TextField

A TextField object is a text component
 that allows for the editing of a single line of text.

TextHitInfo

The TextHitInfo class represents a character position in a
 text model, and a bias, or "side," of the character.

TextInputCallback

 Underlying security services instantiate and pass a
 TextInputCallback to the handle
 method of a CallbackHandler to retrieve generic text
 information.

TextLayout

TextLayout is an immutable graphical representation of styled
 character data.

TextLayout.CaretPolicy

Defines a policy for determining the strong caret location.

TextListener

The listener interface for receiving text events.

TextMeasurer

The TextMeasurer class provides the primitive operations
 needed for line break: measuring up to a given advance, determining the
 advance of a range of characters, and generating a
 TextLayout for a range of characters.

TextOutputCallback

 Underlying security services instantiate and pass a
 TextOutputCallback to the handle
 method of a CallbackHandler to display information messages,
 warning messages and error messages.

TextStyle

Enumeration of the style of text formatting and parsing.

TextSyntax

Class TextSyntax is an abstract base class providing the common
 implementation of all attributes whose value is a string.

TextTree

A tree node for plain text.

TextUI

Text editor user interface

TexturePaint

The TexturePaint class provides a way to fill a
 Shape with a texture that is specified as
 a BufferedImage.

ThaiBuddhistChronology

The Thai Buddhist calendar system.

ThaiBuddhistDate

A date in the Thai Buddhist calendar system.

ThaiBuddhistEra

An era in the Thai Buddhist calendar system.

Thread

A thread is a thread of execution in a program.

Thread.State

A thread state.

Thread.UncaughtExceptionHandler

Interface for handlers invoked when a Thread abruptly
 terminates due to an uncaught exception.

ThreadDeath

An instance of ThreadDeath is thrown in the victim thread
 when the (deprecated) Thread.stop() method is invoked.

ThreadDeathEvent

Notification of a completed thread in the target VM.

ThreadDeathRequest

Request for notification when a thread terminates in the target VM.

ThreadFactory

An object that creates new threads on demand.

ThreadGroup

A thread group represents a set of threads.

ThreadGroupReference

A thread group object from the target VM.

ThreadInfo

Thread information.

ThreadLocal<T>

This class provides thread-local variables.

ThreadLocalRandom

A random number generator (with period 264) isolated
 to the current thread.

ThreadMXBean

Platform-specific management interface for the thread system
 of the Java virtual machine.

ThreadMXBean

The management interface for the thread system of
 the Java virtual machine.

ThreadPoolExecutor

An ExecutorService that executes each submitted task using
 one of possibly several pooled threads, normally configured
 using Executors factory methods.

ThreadPoolExecutor.AbortPolicy

A handler for rejected tasks that throws a
 RejectedExecutionException.

ThreadPoolExecutor.CallerRunsPolicy

A handler for rejected tasks that runs the rejected task
 directly in the calling thread of the execute method,
 unless the executor has been shut down, in which case the task
 is discarded.

ThreadPoolExecutor.DiscardOldestPolicy

A handler for rejected tasks that discards the oldest unhandled
 request and then retries execute, unless the executor
 is shut down, in which case the task is discarded.

ThreadPoolExecutor.DiscardPolicy

A handler for rejected tasks that silently discards the
 rejected task.

ThreadReference

A thread object from the target VM.

ThreadStartEvent

Notification of a new running thread in the target VM.

ThreadStartRequest

Request for notification when a thread starts execution in the target VM.

Threshold

Event annotation, specifies the default duration below which an event is not
 recorded (for example, "20 ms").

Throwable

The Throwable class is the superclass of all errors and
 exceptions in the Java language.

ThrowsTree

A tree node for an @exception or @throws block tag.

ThrowTree

A tree node for a throw statement.

TIFFDirectory

A convenience class for simplifying interaction with TIFF native
 image metadata.

TIFFField

A class representing a field in a TIFF 6.0 Image File Directory.

TIFFImageReadParam

A subclass of ImageReadParam allowing control over
 the TIFF reading process.

TIFFTag

A class defining the notion of a TIFF tag.

TIFFTagSet

A class representing a set of TIFF tags.

TileObserver

An interface for objects that wish to be informed when tiles
 of a WritableRenderedImage become modifiable by some writer via
 a call to getWritableTile, and when they become unmodifiable via
 the last call to releaseWritableTile.

Time

A thin wrapper around the java.util.Date class that allows the JDBC
 API to identify this as an SQL TIME value.

TimeLimitExceededException

This exception is thrown when a method
 does not terminate within the specified time limit.

TimeoutException

Exception thrown when a blocking operation times out.

Timer

A facility for threads to schedule tasks for future execution in a
 background thread.

Timer

Provides the implementation of the timer MBean.

Timer

Fires one or more ActionEvents at specified
 intervals.

TimerMBean

Exposes the management interface of the timer MBean.

TimerNotification

This class provides definitions of the notifications sent by timer MBeans.

TimerTask

A task that can be scheduled for one-time or repeated execution by a
 Timer.

Timespan

Event field annotation, specifies that the value is a duration.

Timestamp

This class encapsulates information about a signed timestamp.

Timestamp

A thin wrapper around java.util.Date that allows
 the JDBC API to identify this as an SQL TIMESTAMP value.

Timestamp

Event field annotation, specifies that the value is a point in time.

TimeUnit

A TimeUnit represents time durations at a given unit of
 granularity and provides utility methods to convert across units,
 and to perform timing and delay operations in these units.

TimeZone

TimeZone represents a time zone offset, and also figures out daylight
 savings.

TimeZoneNameProvider

An abstract class for service providers that
 provide localized time zone names for the
 TimeZone class.

TitledBorder

A class which implements an arbitrary border
 with the addition of a String title in a
 specified position and justification.

ToDoubleBiFunction<T,U>

Represents a function that accepts two arguments and produces a double-valued
 result.

ToDoubleFunction<T>

Represents a function that produces a double-valued result.

ToIntBiFunction<T,U>

Represents a function that accepts two arguments and produces an int-valued
 result.

ToIntFunction<T>

Represents a function that produces an int-valued result.

ToLongBiFunction<T,U>

Represents a function that accepts two arguments and produces a long-valued
 result.

ToLongFunction<T>

Represents a function that produces a long-valued result.

Tool

Common interface for tools that can be invoked from a program.

ToolBarUI

Pluggable look and feel interface for JToolBar.

Toolkit

This class is the abstract superclass of all actual
 implementations of the Abstract Window Toolkit.

ToolProvider

An interface for command-line tools to provide a way to
 be invoked without necessarily starting a new VM.

ToolProvider

Provides methods for locating tool providers, for example,
 providers of compilers.

ToolTipManager

Manages all the ToolTips in the system.

ToolTipUI

Pluggable look and feel interface for JToolTip.

TooManyListenersException


 The  TooManyListenersException  Exception is used as part of
 the Java Event model to annotate and implement a unicast special case of
 a multicast Event Source.

TopLevelWindowListener

The TopLevelWindowListener interface is used by the EventQueueMonitor
 class to notify an interested party when a top level window is created
 or destroyed in the Java Virtual Machine.

Track

A MIDI track is an independent stream of MIDI events (time-stamped MIDI data)
 that can be stored along with other tracks in a standard MIDI file.

TransactionalWriter

A specialized interface that facilitates an extension of the standard
 SyncProvider abstract class so that it has finer grained
 transaction control.

Transferable

Defines the interface for classes that can be used to provide data for a
 transfer operation.

TransferHandler

This class is used to handle the transfer of a Transferable
 to and from Swing components.

TransferHandler.DropLocation

Represents a location where dropped data should be inserted.

TransferHandler.TransferSupport

This class encapsulates all relevant details of a clipboard
 or drag and drop transfer, and also allows for customizing
 aspects of the drag and drop experience.

TransferQueue<E>

A BlockingQueue in which producers may wait for consumers
 to receive elements.

Transform

A representation of the XML Transform element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

TransformAttribute

The TransformAttribute class provides an immutable
 wrapper for a transform so that it is safe to use as an attribute.

Transformer

An instance of this abstract class can transform a
 source tree into a result tree.

TransformerConfigurationException

Indicates a serious configuration error.

TransformerException

This class specifies an exceptional condition that occurred
 during the transformation process.

TransformerFactory

A TransformerFactory instance can be used to create
 Transformer and
 Templates objects.

TransformerFactoryConfigurationError

Thrown when a problem with configuration with the Transformer Factories
 exists.

TransformerHandler

A TransformerHandler
 listens for SAX ContentHandler parse events and transforms
 them to a Result.

TransformException

Indicates an exceptional condition that occurred while executing a
 transform algorithm.

TransformParameterSpec

A specification of algorithm parameters for a Transform
 algorithm.

TransformService

A Service Provider Interface for transform and canonicalization algorithms.

Transient

Indicates that an attribute called "transient"
 should be declared with the given value
 when the Introspector constructs
 a PropertyDescriptor or EventSetDescriptor
 classes associated with the annotated code element.

TransitionFrom

Event field annotation, specifies that the event transitioned from a thread.

TransitionTo

Event field annotation, specifies that the event will soon transition to a thread.

Translator

The Translator class provides a translation to interface
 Accessible
 for objects that do not implement interface Accessible.

Transmitter

A Transmitter sends MidiEvent objects to one or more
 Receivers.

Transparency

The Transparency interface defines the common transparency
 modes for implementing classes.

Transport

A method of communication between a debugger and a target VM.

TransportService

A transport service for connections between a debugger and
 a target VM.

TransportService.Capabilities

The transport service capabilities.

TransportService.ListenKey

A listen key.

TransportTimeoutException

This exception may be thrown as a result of a timeout
 when attaching to a target VM, or waiting to accept a
 connection from a target VM.

TrayIcon

A TrayIcon object represents a tray icon that can be
 added to the system tray.

TrayIcon.MessageType

The message type determines which icon will be displayed in the
 caption of the message, and a possible system sound a message
 may generate upon showing.

Tree

Common interface for all nodes in an abstract syntax tree.

Tree.Kind

Enumerates all kinds of trees.

TreeCellEditor

Adds to CellEditor the extensions necessary to configure an editor
 in a tree.

TreeCellRenderer

Defines the requirements for an object that displays a tree node.

TreeExpansionEvent

An event used to identify a single path in a tree.

TreeExpansionListener

The listener that's notified when a tree expands or collapses
 a node.

TreeMap<K,V>

A Red-Black tree based NavigableMap implementation.

TreeModel

The model used by JTree.

TreeModelEvent

Encapsulates information describing changes to a tree model, and
 used to notify tree model listeners of the change.

TreeModelListener

Defines the interface for an object that listens
 to changes in a TreeModel.

TreeNode

Defines the requirements for an object that can be used as a
 tree node in a JTree.

TreePath

A path of tree nodes, typically used to represent the sequence of ancestor
 nodes of a tree node up to the top-level CompilationUnitTree node.

TreePath

TreePath represents an array of objects that uniquely
 identify the path to a node in a tree.

TreePathScanner<R,P>

A TreeVisitor that visits all the child tree nodes, and provides
 support for maintaining a path for the parent nodes.

Trees

Bridges JSR 199, JSR 269, and the Tree API.

TreeScanner<R,P>

A TreeVisitor that visits all the child tree nodes.

TreeSelectionEvent

An event that characterizes a change in the current
 selection.

TreeSelectionListener

The listener that's notified when the selection in a TreeSelectionModel
 changes.

TreeSelectionModel

This interface represents the current state of the selection for
 the tree component.

TreeSet<E>

A NavigableSet implementation based on a TreeMap.

TreeUI

Pluggable look and feel interface for JTree.

TreeVisitor<R,P>

A visitor of trees, in the style of the visitor design pattern.

TreeWalker

TreeWalker objects are used to navigate a document tree or
 subtree using the view of the document defined by their
 whatToShow flags and filter (if any).

TreeWillExpandListener

The listener that's notified when a tree expands or collapses
 a node.

TrustAnchor

A trust anchor or most-trusted Certification Authority (CA).

TrustManager

This is the base interface for JSSE trust managers.

TrustManagerFactory

This class acts as a factory for trust managers based on a
 source of trust material.

TrustManagerFactorySpi

This class defines the Service Provider Interface (SPI)
 for the TrustManagerFactory class.

TryTree

A tree node for a try statement.

Type

The mirror for a type in the target VM.

Type

Type is the common superinterface for all types in the Java
 programming language.

TypeBasedGuardingDynamicLinker

A guarding dynamic linker that can determine whether it can link the call site solely based on the type of the first
 argument at linking invocation time.

TypeCastTree

A tree node for a type cast expression.

TypeComponent

An entity declared within a user defined
 type (class or interface).

TypeDeclSnippet

Snippet for a type definition (a class, interface, enum, or annotation
 interface definition).

TypeDescriptor

An entity that has a type descriptor.

TypeDescriptor.OfField<F extends TypeDescriptor.OfField<F>>

An entity that has a field type descriptor.

TypeDescriptor.OfMethod<F extends TypeDescriptor.OfField<F>,M extends TypeDescriptor.OfMethod<F,M>>

An entity that has a method type descriptor
 Method descriptors conforming to JVMS 4.3.3 can be described
 nominally via MethodType::describeConstable;
 otherwise they cannot be described nominally.

TypeElement

Represents a class or interface program element.

TypeInfo

The TypeInfo interface represents a type referenced from
 Element or Attr nodes, specified in the schemas
 associated with the document.

TypeInfoProvider

This class provides access to the type information determined
 by ValidatorHandler.

TypeKind

The kind of a type mirror.

TypeKindVisitor14<R,P>

A visitor of types based on their kind with
 default behavior appropriate for source version RELEASE_14.

TypeKindVisitor6<R,P>

A visitor of types based on their kind with
 default behavior appropriate for the RELEASE_6 source version.

TypeKindVisitor7<R,P>

A visitor of types based on their kind with
 default behavior appropriate for the RELEASE_7 source version.

TypeKindVisitor8<R,P>

A visitor of types based on their kind with
 default behavior appropriate for the RELEASE_8 source version.

TypeKindVisitor9<R,P>

A visitor of types based on their kind with
 default behavior appropriate for source versions RELEASE_9 through RELEASE_14.

TypeMirror

Represents a type in the Java programming language.

TypeNotPresentException

Thrown when an application tries to access a type using a string
 representing the type's name, but no definition for the type with
 the specified name can be found.

TypeParameterElement

Represents a formal type parameter of a generic class, interface, method,
 or constructor element.

TypeParameterTree

A tree node for a type parameter.

Types

The class that defines the constants that are used to identify generic
 SQL types, called JDBC types.

Types

Utility methods for operating on types.

TypeUtilities

Various static utility methods for working with Java types.

TypeVariable<D extends GenericDeclaration>

TypeVariable is the common superinterface for type variables of kinds.

TypeVariable

Represents a type variable.

TypeVisitor<R,P>

A visitor of types, in the style of the
 visitor design pattern.

UIClientPropertyKey

This interface is used only for tagging keys for client properties for
 JComponent set by UI which needs to be cleared on L&F
 change and serialization.

UID

A UID represents an identifier that is unique over time
 with respect to the host it is generated on, or one of 216
 "well-known" identifiers.

UIDefaults

A table of defaults for Swing components.

UIDefaults.ActiveValue

This class enables one to store an entry in the defaults
 table that's constructed each time it's looked up with one of
 the getXXX(key) methods.

UIDefaults.LazyInputMap

LazyInputMap will create a InputMap
 in its createValue
 method.

UIDefaults.LazyValue

This class enables one to store an entry in the defaults
 table that isn't constructed until the first time it's
 looked up with one of the getXXX(key) methods.

UIDefaults.ProxyLazyValue

This class provides an implementation of LazyValue
 which can be
 used to delay loading of the Class for the instance to be created.

UIEvent

The UIEvent interface provides specific contextual information
 associated with User Interface events.

UIManager

UIManager manages the current look and feel, the set of
 available look and feels, PropertyChangeListeners that
 are notified when the look and feel changes, look and feel defaults, and
 convenience methods for obtaining various default values.

UIManager.LookAndFeelInfo

Provides a little information about an installed
 LookAndFeel for the sake of configuring a menu or
 for initial application set up.

UIResource

This interface is used to mark objects created by ComponentUI delegates.

UnaryOperator<T>

Represents an operation on a single operand that produces a result of the
 same type as its operand.

UnaryTree

A tree node for postfix and unary expressions.

UncheckedIOException

Wraps an IOException with an unchecked exception.

UndeclaredThrowableException

Thrown by a method invocation on a proxy instance if its invocation
 handler's invoke method throws a
 checked exception (a Throwable that is not assignable
 to RuntimeException or Error) that
 is not assignable to any of the exception types declared in the
 throws clause of the method that was invoked on the
 proxy instance and dispatched to the invocation handler.

UndoableEdit

An UndoableEdit represents an edit.

UndoableEditEvent

An event indicating that an operation which can be undone has occurred.

UndoableEditListener

Interface implemented by a class interested in hearing about
 undoable operations.

UndoableEditSupport

A support class used for managing UndoableEdit listeners.

UndoManager

UndoManager manages a list of UndoableEdits,
 providing a way to undo or redo the appropriate edits.

UnexpectedException

An UnexpectedException is thrown if the client of a
 remote method call receives, as a result of the call, a checked
 exception that is not among the checked exception types declared in the
 throws clause of the method in the remote interface.

UnicastRemoteObject

Used for exporting a remote object with JRMP and obtaining a stub
 that communicates to the remote object.

UnionType

Represents a union type.

UnionTypeTree

A tree node for a union type expression in a multicatch
 variable declaration.

UnixDomainPrincipal

Represents the credentials of a peer connected to a
 
 Unix domain socket.

UnixDomainSocketAddress

A Unix domain socket address.

UnixLoginModule

This LoginModule imports a user's Unix
 Principal information (UnixPrincipal,
 UnixNumericUserPrincipal,
 and UnixNumericGroupPrincipal)
 and associates them with the current Subject.

UnixNumericGroupPrincipal

This class implements the Principal interface
 and represents a user's Unix group identification number (GID).

UnixNumericUserPrincipal

This class implements the Principal interface
 and represents a user's Unix identification number (UID).

UnixOperatingSystemMXBean

Platform-specific management interface for the Unix
 operating system on which the Java virtual machine is running.

UnixPrincipal

This class implements the Principal interface
 and represents a Unix user.

UnixSystem

This class implementation retrieves and makes available Unix
 UID/GID/groups information for the current user.

UnknownAnnotationValueException

Indicates that an unknown kind of annotation value was encountered.

UnknownBlockTagTree

A tree node for an unrecognized block tag.

UnknownDirectiveException

Indicates that an unknown kind of module directive was encountered.

UnknownElementException

Indicates that an unknown kind of element was encountered.

UnknownEntityException

Superclass of exceptions which indicate that an unknown kind of
 entity was encountered.

UnknownError

Thrown when an unknown but serious exception has occurred in the
 Java Virtual Machine.

UnknownFormatConversionException

Unchecked exception thrown when an unknown conversion is given.

UnknownFormatFlagsException

Unchecked exception thrown when an unknown flag is given.

UnknownHostException

Thrown to indicate that the IP address of a host could not be determined.

UnknownHostException

An UnknownHostException is thrown if a
 java.net.UnknownHostException occurs while creating
 a connection to the remote host for a remote method call.

UnknownInlineTagTree

A tree node for an unrecognized inline tag.

UnknownServiceException

Thrown to indicate that an unknown service exception has
 occurred.

UnknownTypeException

Indicates that an unknown kind of type was encountered.

UnmappableCharacterException

Checked exception thrown when an input character (or byte) sequence
 is valid but cannot be mapped to an output byte (or character)
 sequence.

UnmarshalException

An UnmarshalException can be thrown while unmarshalling the
 parameters or results of a remote method call if any of the following
 conditions occur:
 
  if an exception occurs while unmarshalling the call header
  if the protocol for the return value is invalid
  if a java.io.IOException occurs unmarshalling
 parameters (on the server side) or the return value (on the client side).

UnmodifiableClassException

Thrown by an implementation of
 Instrumentation.redefineClasses
 when one of the specified classes cannot be modified.

UnmodifiableModuleException

Thrown to indicate that a module cannot be modified.

UnmodifiableSetException

Thrown to indicate that the requested operation cannot be performed because
 the set is unmodifiable.

UnrecoverableEntryException

This exception is thrown if an entry in the keystore cannot be recovered.

UnrecoverableKeyException

This exception is thrown if a key in the keystore cannot be recovered.

Unreferenced

A remote object implementation should implement the
 Unreferenced interface to receive notification when there are
 no more clients that reference that remote object.

UnresolvedAddressException

Unchecked exception thrown when an attempt is made to invoke a network
 operation upon an unresolved socket address.

UnresolvedPermission

The UnresolvedPermission class is used to hold Permissions that
 were "unresolved" when the Policy was initialized.

UnresolvedReferenceException

Exception reported on attempting to execute a
 RECOVERABLE_DEFINED
 snippet.

UnsatisfiedLinkError

Thrown if the Java Virtual Machine cannot find an appropriate
 native-language definition of a method declared native.

Unsigned

Event field annotation, specifies that the value is of an unsigned data type.

UnsolicitedNotification

This interface represents an unsolicited notification as defined in
 RFC 2251.

UnsolicitedNotificationEvent

This class represents an event fired in response to an unsolicited
 notification sent by the LDAP server.

UnsolicitedNotificationListener

This interface is for handling UnsolicitedNotificationEvent.

UnsupportedAddressTypeException

Unchecked exception thrown when an attempt is made to bind or connect
 to a socket address of a type that is not supported.

UnsupportedAudioFileException

An UnsupportedAudioFileException is an exception indicating that an
 operation failed because a file did not contain valid data of a recognized
 file type and format.

UnsupportedCallbackException

Signals that a CallbackHandler does not
 recognize a particular Callback.

UnsupportedCharsetException

Unchecked exception thrown when no support is available
 for a requested charset.

UnsupportedClassVersionError

Thrown when the Java Virtual Machine attempts to read a class
 file and determines that the major and minor version numbers
 in the file are not supported.

UnsupportedEncodingException

The Character Encoding is not supported.

UnsupportedFlavorException

Signals that the requested data is not supported in this flavor.

UnsupportedLookAndFeelException

An exception that indicates the requested look & feel
 management classes are not present on the user's system.

UnsupportedOperationException

Thrown to indicate that the requested operation is not supported.

UnsupportedTemporalTypeException

UnsupportedTemporalTypeException indicates that a ChronoField or ChronoUnit is
 not supported for a Temporal class.

URI

Represents a Uniform Resource Identifier (URI) reference.

URICertStoreParameters

Parameters used as input for CertStore algorithms which use
 information contained in a URI to retrieve certificates and CRLs.

URIDereferencer

A dereferencer of URIReferences.

URIException

Interface URIException is a mixin interface which a subclass of
 PrintException can implement to report an error
 condition involving a URI address.

URIParameter

A parameter that contains a URI pointing to data intended for a
 PolicySpi or ConfigurationSpi implementation.

URIReference

Identifies a data object via a URI-Reference, as specified by
 RFC 2396.

URIReferenceException

Indicates an exceptional condition thrown while dereferencing a
 URIReference.

URIResolver

An object that implements this interface that can be called by the processor
 to turn a URI used in document(), xsl:import, or xsl:include into a Source object.

URISyntax

Class URISyntax is an abstract base class providing the common
 implementation of all attributes whose value is a Uniform Resource Identifier
 (URI).

URISyntaxException

Checked exception thrown to indicate that a string could not be parsed as a
 URI reference.

URL

Class URL represents a Uniform Resource
 Locator, a pointer to a "resource" on the World
 Wide Web.

URLClassLoader

This class loader is used to load classes and resources from a search
 path of URLs referring to both JAR files and directories.

URLConnection

The abstract class URLConnection is the superclass
 of all classes that represent a communications link between the
 application and a URL.

URLDecoder

Utility class for HTML form decoding.

URLEncoder

Utility class for HTML form encoding.

URLPermission

Represents permission to access a resource or set of resources defined by a
 given url, and for a given set of user-settable request methods
 and request headers.

URLStreamHandler

The abstract class URLStreamHandler is the common
 superclass for all stream protocol handlers.

URLStreamHandlerFactory

This interface defines a factory for URL stream
 protocol handlers.

URLStreamHandlerProvider

URL stream handler service-provider class.

UserDataHandler

When associating an object to a key on a node using
 Node.setUserData() the application can provide a handler
 that gets called when the node the object is associated to is being
 cloned, imported, or renamed.

UserDefinedFileAttributeView

A file attribute view that provides a view of a file's user-defined
 attributes, sometimes known as extended attributes.

UserPrincipal

A user principal identified by a username or account name.

UserPrincipal

A Principal representing an identity used to determine access rights
 to objects in a file system.

UserPrincipalLookupService

An object to lookup user and group principals by name.

UserPrincipalNotFoundException

Checked exception thrown when a lookup of UserPrincipal fails because
 the principal does not exist.

UserSessionEvent

Event sent when the user session has been changed.

UserSessionEvent.Reason

Kinds of available reasons of user session change.

UserSessionListener

Implementors receive notification when the user session changes.

UsesTree

A tree node for an @uses block tag.

UsesTree

A tree node for a 'uses' directive in a module declaration.

UTFDataFormatException

Signals that a malformed string in
 modified UTF-8
 format has been read in a data
 input stream or by any class that implements the data input
 interface.

Util

Miscellaneous utility methods for setting-up implementations of
 ExecutionControl.

Utilities

A collection of methods to deal with various text
 related activities.

UUID

A class that represents an immutable universally unique identifier (UUID).

Validator

A processor that checks an XML document against Schema.

ValidatorHandler

Streaming validator that works on SAX stream.

Value

The mirror for a value in the target VM.

ValueDescriptor

Describes the event fields and annotation elements.

ValueExp

Represents values that can be passed as arguments to
 relational expressions.

ValueLayout

A value layout.

ValueRange

The range of valid values for a date-time field.

ValueTree

A tree node for an @value inline tag.

VarHandle

A VarHandle is a dynamically strongly typed reference to a variable, or to a
 parametrically-defined family of variables, including static fields,
 non-static fields, array elements, or components of an off-heap data
 structure.

VarHandle.AccessMode

The set of access modes that specify how a variable, referenced by a
 VarHandle, is accessed.

VarHandle.VarHandleDesc

A nominal descriptor for a
 VarHandle constant.

VariableElement

Represents a field, enum constant, method or constructor
 parameter, local variable, resource variable, or exception
 parameter.

VariableHeightLayoutCache

NOTE: This will become more open in a future release.

VariableTree

A tree node for a variable declaration.

VarSnippet

Snippet for a variable definition.

Vector<E>

The Vector class implements a growable array of
 objects.

Vector<E>

A

 
 sequence of a fixed number of lanes,
 all of some fixed
 element type
 such as byte, long, or float.

VectorMask<E>

A VectorMask represents an ordered immutable sequence of boolean
 values.

VectorOperators

This class consists solely of static constants
 that describe lane-wise vector operations, plus nested interfaces
 which classify them.

VectorOperators.Associative

Type for all reassociating
 lane-wise
 binary operators,
 usable in expressions like e = v0.reduceLanes(ADD).

VectorOperators.Binary

Type for all
 lane-wise
 binary (two-argument) operators,
 usable in expressions like w = v0.lanewise(ADD, v1).

VectorOperators.Comparison

Type for all binary
 lane-wise
 boolean comparisons on lane values,
 usable in expressions like m = v0.compare(LT, v1).

VectorOperators.Conversion<E,F>

Type for all
 lane-wise
 conversions on lane values,
 usable in expressions like w1 = v0.convert(I2D, 1).

VectorOperators.Operator

Root type for all operator tokens, providing queries for common
 properties such as arity, argument and return types, symbolic
 name, and operator name.

VectorOperators.Ternary

Type for all
 lane-wise
 ternary (three-argument) operators,
 usable in expressions like w = v0.lanewise(FMA, v1, v2).

VectorOperators.Test

Type for all unary
 lane-wise
 boolean tests on lane values,
 usable in expressions like m = v0.test(IS_FINITE).

VectorOperators.Unary

Type for all
 lane-wise
 unary (one-argument) operators,
 usable in expressions like w = v0.lanewise(NEG).

VectorShape

A VectorShape selects a particular implementation of
 Vectors.

VectorShuffle<E>

A VectorShuffle represents an ordered immutable sequence of
 int values called source indexes, where each source
 index numerically selects a source lane from a compatible Vector.

VectorSpecies<E>

Interface for managing all vectors of the same combination
 of element type (ETYPE)
 and shape.

VerifyError

Thrown when the "verifier" detects that a class file,
 though well formed, contains some sort of internal inconsistency
 or security problem.

VersionTree

A tree node for an @version block tag.

VetoableChangeListener

A VetoableChange event gets fired whenever a bean changes a "constrained"
 property.

VetoableChangeListenerProxy

A class which extends the EventListenerProxy
 specifically for adding a VetoableChangeListener
 with a "constrained" property.

VetoableChangeSupport

This is a utility class that can be used by beans that support constrained
 properties.

View


 A very important part of the text package is the View class.

ViewCSS

This interface represents a CSS view.

ViewFactory

A factory to create a view of some portion of document subject.

ViewportLayout

The default layout manager for JViewport.

ViewportUI

Pluggable look and feel interface for JViewport.

VirtualMachine

A virtual machine targeted for debugging.

VirtualMachine

A Java virtual machine.

VirtualMachineDescriptor

Describes a Java virtual machine.

VirtualMachineError

Thrown to indicate that the Java Virtual Machine is broken or has
 run out of resources necessary for it to continue operating.

VirtualMachineManager

A manager of connections to target virtual machines.

Visibility

Under some circumstances a bean may be run on servers where a GUI
 is not available.

VMCannotBeModifiedException

Thrown to indicate that the operation is invalid because it would
 modify the VM and the VM is read-only.

VMDeathEvent

Notification of target VM termination.

VMDeathRequest

Request for notification when the target VM terminates.

VMDisconnectedException

Unchecked exception thrown to indicate that the
 requested operation cannot be
 completed because there is no longer a connection to the target VM.

VMDisconnectEvent

Notification of disconnection from target VM.

VMID

A VMID is a identifier that is unique across all Java virtual
 machines.

VMMismatchException

Thrown to indicate that the requested operation cannot be
 completed because the a mirror from one target VM is being
 combined with a mirror from another target VM.

VMOption

Information about a VM option including its value and
 where the value came from which is referred as its
 origin.

VMOption.Origin

Origin of the value of a VM option.

VMOutOfMemoryException

Thrown to indicate that the requested operation cannot be
 completed because the target VM has run out of memory.

VMStartEvent

Notification of initialization of a target VM.

VMStartException

A target VM was successfully launched, but terminated with an
 error before a connection could be established.

VoiceStatus

A VoiceStatus object contains information about the current status of
 one of the voices produced by a Synthesizer.

Void

The Void class is an uninstantiable placeholder class to hold a
 reference to the Class object representing the Java keyword
 void.

VoidType

The type of all primitive void values
 accessed in the target VM.

VoidValue

Provides access to a primitive void value in
 the target VM.

VolatileCallSite

A VolatileCallSite is a CallSite whose target acts like a volatile variable.

VolatileImage

VolatileImage is an image which can lose its
 contents at any time due to circumstances beyond the control of the
 application (e.g., situations caused by the operating system or by
 other applications).

Watchable

An object that may be registered with a watch service so that it can be
 watched for changes and events.

WatchEvent<T>

An event or a repeated event for an object that is registered with a WatchService.

WatchEvent.Kind<T>

An event kind, for the purposes of identification.

WatchEvent.Modifier

An event modifier that qualifies how a Watchable is registered
 with a WatchService.

WatchKey

A token representing the registration of a watchable object
 with a WatchService.

WatchpointEvent

Notification of a field triggered event encountered by a thread in the
 target VM.

WatchpointRequest

Identifies a Field in the target VM being watched.

WatchService

A watch service that watches registered objects for changes and
 events.

WeakHashMap<K,V>

Hash table based implementation of the Map interface, with
 weak keys.

WeakReference<T>

Weak reference objects, which do not prevent their referents from being
 made finalizable, finalized, and then reclaimed.

WebRowSet

The standard interface that all implementations of a WebRowSet
 must implement.

WebSocket

A WebSocket Client.

WebSocket.Builder

A builder of WebSocket Clients.

WebSocket.Listener

The receiving interface of WebSocket.

WebSocketHandshakeException

Thrown when the opening handshake has failed.

WeekFields

Localized definitions of the day-of-week, week-of-month and week-of-year fields.

WhileLoopTree

A tree node for a while loop statement.

WildcardTree

A tree node for a wildcard type argument.

WildcardType

WildcardType represents a wildcard type expression, such as
 ?, ? extends Number, or ? super Integer.

WildcardType

Represents a wildcard type argument.

Window

A Window object is a top-level window with no borders and no
 menubar.

Window.Type

Enumeration of available window types.

WindowAdapter

An abstract adapter class for receiving window events.

WindowConstants

Constants used to control the window-closing operation.

WindowEvent

A low-level event that indicates that a window has changed its status.

WindowFocusListener

The listener interface for receiving WindowEvents, including
 WINDOW_GAINED_FOCUS and WINDOW_LOST_FOCUS events.

WindowListener

The listener interface for receiving window events.

WindowStateListener

The listener interface for receiving window state events.

WrappedPlainView

View of plain text (text with only one font and color)
 that does line-wrapping.

Wrapper

Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance
 in question is in fact a proxy class.

WritableByteChannel

A channel that can write bytes.

WritableRaster

This class extends Raster to provide pixel writing capabilities.

WritableRenderedImage

WritableRenderedImage is a common interface for objects which
 contain or can produce image data in the form of Rasters and
 which can be modified and/or written over.

WriteAbortedException

Signals that one of the ObjectStreamExceptions was thrown during a
 write operation.

WritePendingException

Unchecked exception thrown when an attempt is made to write to an
 asynchronous socket channel and a previous write has not completed.

Writer

Abstract class for writing to character streams.

WrongMethodTypeException

Thrown to indicate that code has attempted to call a method handle
 via the wrong method type.

X500Principal

 This class represents an X.500 Principal.

X500PrivateCredential

 This class represents an X500PrivateCredential.

X509Certificate


 Abstract class for X.509 certificates.

X509Certificate
Deprecated, for removal: This API element is subject to removal in a future version.
Use the classes in java.security.cert instead.

X509CertSelector

A CertSelector that selects X509Certificates that
 match all specified criteria.

X509CRL


 Abstract class for an X.509 Certificate Revocation List (CRL).

X509CRLEntry

Abstract class for a revoked certificate in a CRL (Certificate
 Revocation List).

X509CRLSelector

A CRLSelector that selects X509CRLs that
 match all specified criteria.

X509Data

A representation of the XML X509Data element as defined in
 the 
 W3C Recommendation for XML-Signature Syntax and Processing.

X509EncodedKeySpec

This class represents the ASN.1 encoding of a public key,
 encoded according to the ASN.1 type SubjectPublicKeyInfo.

X509ExtendedKeyManager

Abstract class that provides for extension of the X509KeyManager
 interface.

X509ExtendedTrustManager

Extensions to the X509TrustManager interface to support
 SSL/TLS/DTLS connection sensitive trust management.

X509Extension

Interface for an X.509 extension.

X509IssuerSerial

A representation of the XML X509IssuerSerial element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

X509KeyManager

Instances of this interface manage which X509 certificate-based
 key pairs are used to authenticate the local side of a secure
 socket.

X509TrustManager

Instance of this interface manage which X509 certificates
 may be used to authenticate the remote side of a secure
 socket.

XAConnection

An object that provides support for distributed transactions.

XAConnectionBuilder

A builder created from a XADataSource object,
 used to establish a connection to the database that the
 data source object represents.

XADataSource

A factory for XAConnection objects that is used internally.

XAException

The XAException is thrown by the Resource Manager (RM) to inform the
 Transaction Manager of an error encountered by the involved transaction.

XAResource

The XAResource interface is a Java mapping of the industry standard
 XA interface based on the X/Open CAE Specification (Distributed
 Transaction Processing: The XA Specification).

XECKey

An interface for an elliptic curve public/private key as defined by
 RFC 7748.

XECPrivateKey

An interface for an elliptic curve private key as defined by RFC 7748.

XECPrivateKeySpec

A class representing elliptic curve private keys as defined in RFC 7748,
 including the curve and other algorithm parameters.

XECPublicKey

An interface for an elliptic curve public key as defined by RFC 7748.

XECPublicKeySpec

A class representing elliptic curve public keys as defined in RFC 7748,
 including the curve and other algorithm parameters.

Xid

The Xid interface is a Java mapping of the X/Open transaction identifier
 XID structure.

XMLConstants

Utility class to contain basic XML values as constants.

XMLCryptoContext

Contains common context information for XML cryptographic operations.

XMLDecoder

The XMLDecoder class is used to read XML documents
 created using the XMLEncoder and is used just like
 the ObjectInputStream.

XMLEncoder

The XMLEncoder class is a complementary alternative to
 the ObjectOutputStream and can used to generate
 a textual representation of a JavaBean in the same
 way that the ObjectOutputStream can
 be used to create binary representation of Serializable
 objects.

XMLEvent

This is the base event interface for handling markup events.

XMLEventAllocator

This interface defines a class that allows a user to register
 a way to allocate events given an XMLStreamReader.

XMLEventConsumer

This interface defines an event consumer interface.

XMLEventFactory

This interface defines a utility class for creating instances of
 XMLEvents

XMLEventReader

This is the top level interface for parsing XML Events.

XMLEventWriter

This is the top level interface for writing XML documents.

XMLFilter

Interface for an XML filter.

XMLFilterImpl

Base class for deriving an XML filter.

XMLFormatter

Format a LogRecord into a standard XML format.

XMLGregorianCalendar

Representation for W3C XML Schema 1.0 date/time datatypes.

XMLInputFactory

Defines an abstract implementation of a factory for getting streams.

XMLObject

A representation of the XML Object element as defined in
 the 
 W3C Recommendation for XML-Signature Syntax and Processing.

XMLOutputFactory

Defines an abstract implementation of a factory for
 getting XMLEventWriters and XMLStreamWriters.

XMLParseException

This exception is thrown when an XML formatted string is being parsed into ModelMBean objects
 or when XML formatted strings are being created from ModelMBean objects.

XmlReader

A specialized interface that facilitates an extension of the
 SyncProvider abstract class for XML orientated
 synchronization providers.

XMLReader

Interface for reading an XML document using callbacks.

XMLReaderAdapter

Adapt a SAX2 XMLReader as a SAX1 Parser.

XMLReaderFactory
Deprecated.
It is recommended to use SAXParserFactory
 instead.

XMLReporter

This interface is used to report non-fatal errors.

XMLResolver

This interface is used to resolve resources during an XML parse.

XMLSignature

A representation of the XML Signature element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

XMLSignature.SignatureValue

A representation of the XML SignatureValue element as
 defined in the 
 W3C Recommendation for XML-Signature Syntax and Processing.

XMLSignatureException

Indicates an exceptional condition that occurred during the XML
 signature generation or validation process.

XMLSignatureFactory

A factory for creating XMLSignature objects from scratch or
 for unmarshalling an XMLSignature object from a corresponding
 XML representation.

XMLSignContext

Contains context information for generating XML Signatures.

XMLStreamConstants

This interface declares the constants used in this API.

XMLStreamException

The base exception for unexpected processing errors.

XMLStreamReader

The XMLStreamReader interface allows forward, read-only access to XML.

XMLStreamWriter

The XMLStreamWriter interface specifies how to write XML.

XMLStructure

A representation of an XML structure from any namespace.

XMLValidateContext

Contains context information for validating XML Signatures.

XmlWriter

A specialized interface that facilitates an extension of the
 SyncProvider abstract class for XML orientated
 synchronization providers.

XPath

XPath provides access to the XPath evaluation environment and expressions.

XPathConstants

XPath constants.

XPathEvaluationResult<T>

The XPathEvaluationResult interface represents the result of the
 evaluation of an XPath expression within the context of a particular node.

XPathEvaluationResult.XPathResultType

XPathResultType represents possible return types of an XPath evaluation.

XPathEvaluator

The evaluation of XPath expressions is provided by
 XPathEvaluator.

XPathException

XPathException represents a generic XPath exception.

XPathException

A new exception has been created for exceptions specific to these XPath
 interfaces.

XPathExpression

XPathExpression provides access to compiled XPath expressions.

XPathExpression

The XPathExpression interface represents a parsed and resolved
 XPath expression.

XPathExpressionException

XPathExpressionException represents an error in an XPath expression.

XPathFactory

An XPathFactory instance can be used to create
 XPath objects.

XPathFactoryConfigurationException

XPathFactoryConfigurationException represents
 a configuration error in a XPathFactory environment.

XPathFilter2ParameterSpec

Parameters for the W3C Recommendation
 
 XPath Filter 2.0 Transform Algorithm.

XPathFilterParameterSpec

Parameters for the 
 XPath Filtering Transform Algorithm.

XPathFunction

XPathFunction provides access to XPath functions.

XPathFunctionException

XPathFunctionException represents an error with an XPath function.

XPathFunctionResolver

XPathFunctionResolver provides access to the set of user defined XPathFunctions.

XPathNamespace

The XPathNamespace interface is returned by
 XPathResult interfaces to represent the XPath namespace node
 type that DOM lacks.

XPathNodes

XPathNodes represents a set of nodes selected by a location path as specified
 in XML Path Language (XPath)
 Version 1.0, 3.3 Node-sets.

XPathNSResolver

The XPathNSResolver interface permit prefix
 strings in the expression to be properly bound to
 namespaceURI strings.

XPathResult

The XPathResult interface represents the result of the
 evaluation of an XPath 1.0 expression within the context of a particular
 node.

XPathType

The XML Schema Definition of the XPath element as defined in the
 
 W3C Recommendation for XML-Signature XPath Filter 2.0:

XPathType.Filter

Represents the filter set operation.

XPathVariableResolver

XPathVariableResolver provides access to the set of user defined XPath variables.

XSLTTransformParameterSpec

Parameters for the 
 XSLT Transform Algorithm.

Year

A year in the ISO-8601 calendar system, such as 2007.

YearMonth

A year-month in the ISO-8601 calendar system, such as 2007-12.

YieldTree

A tree node for a yield statement.

ZipEntry

This class is used to represent a ZIP file entry.

ZipError

Signals that an unrecoverable error has occurred.

ZipException

Signals that a Zip exception of some sort has occurred.

ZipFile

This class is used to read entries from a zip file.

ZipInputStream

This class implements an input stream filter for reading files in the
 ZIP file format.

ZipOutputStream

This class implements an output stream filter for writing files in the
 ZIP file format.

ZonedDateTime

A date-time with a time-zone in the ISO-8601 calendar system,
 such as 2007-12-03T10:15:30+01:00 Europe/Paris.

ZoneId

A time-zone ID, such as Europe/Paris.

ZoneOffset

A time-zone offset from Greenwich/UTC, such as +02:00.

ZoneOffsetTransition

A transition between two offsets caused by a discontinuity in the local time-line.

ZoneOffsetTransitionRule

A rule expressing how to create a transition.

ZoneOffsetTransitionRule.TimeDefinition

A definition of the way a local time can be converted to the actual
 transition date-time.

ZoneRules

The rules defining how the zone offset varies for a single time-zone.

ZoneRulesException

Thrown to indicate a problem with time-zone configuration.

ZoneRulesProvider

Provider of time-zone rules to the system.

ZoneView

ZoneView is a View implementation that creates zones for which
 the child views are not created or stored until they are needed
 for display or model/view translations.







Report a bug or suggest an enhancement For further API reference and developer documentation see the Java SE Documentation, which contains more detailed, developer-targeted descriptions with conceptual overviews, definitions of terms, workarounds, and working code examples. Other versions. Java is a trademark or registered trademark of Oracle and/or its affiliates in the US and other countries. Copyright © 1993, 2021, Oracle and/or its affiliates, 500 Oracle Parkway, Redwood Shores, CA 94065 USA.All rights reserved. Use is subject to license terms and the documentation redistribution policy. 




